;; Object ergoemacs-mode-24-3-1-x86-64-pc-linux-gnu
;; EIEIO PERSISTENT OBJECT
(pcache-repository "ergoemacs-mode-24-3-1-x86-64-pc-linux-gnu"
  :file "ergoemacs-mode-24-3-1-x86-64-pc-linux-gnu"
  :version "0.3"
  :entries #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs--last-start-emacs-state [object pcache-entry "pcache-entry" 1441048237.732433 7776000 "8ba54e7fec2c7c0df165acd66c022054"] ergoemacs-require [object pcache-entry "pcache-entry" 1441053126.8233142 7776000 ((undo-tree nil nil nil) (unicode-fonts nil nil nil))] nil [object pcache-entry "pcache-entry" 1441053127.0819929 7776000 nil] ergoemacs-component-hash [object pcache-entry "pcache-entry" 1441053127.0103123 7776000 #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("unicode-fonts" [cl-struct-ergoemacs-component-struct "unicode-fonts" (:name "unicode-fonts" :description "unicode-fonts" :ensure t :ergoemacs-require unicode-fonts :package-name unicode-fonts :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) unicode-fonts nil t "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "undo-tree" [cl-struct-ergoemacs-component-struct "undo-tree" (:name "undo-tree" :description "undo-tree" :ensure t :ergoemacs-require undo-tree :package-name undo-tree :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) undo-tree nil t "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "standard-vars" (lambda nil "Enabled/changed variables/modes" (ergoemacs-component-struct--create-component (quote (:name "standard-vars" :description "Enabled/changed variables/modes")) (quote (lambda nil (progn (ergoemacs-component-struct--set (quote fancy-about-text) (quote (lambda nil (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
")))))) (ergoemacs-component-struct--set (quote fancy-startup-text) (quote (lambda nil (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" "
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
")))))) (ergoemacs-component-struct--set (quote initial-scratch-message) (quote (lambda nil (substitute-command-keys ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with \\[find-file],
;; then enter the text in that file's own buffer.")))) (ergoemacs-component-struct--set (quote scroll-error-top-bottom) (quote (lambda nil t))) (ergoemacs-component-struct--set (quote ido-vertical-define-keys) (quote (lambda nil (quote C-n-C-p-up-down-left-right)))) (ergoemacs-component-struct--set (quote org-special-ctrl-a/e) (quote (lambda nil t))) (ergoemacs-component-struct--set (quote set-mark-command-repeat-pop) (quote (lambda nil t))) (ergoemacs-component-struct--set (quote org-support-shift-select) (quote (lambda nil t))) (ergoemacs-component-struct--set (quote org-CUA-compatible) (quote (lambda nil t)))) (ergoemacs-component-struct--set (quote dirtrack-directory-change-hook) (quote ergoemacs-shell-here-directory-change-hook) (list t nil nil)) (ergoemacs-component-struct--set (quote kill-buffer-hook) (quote ergoemacs-save-buffer-to-recently-closed) (list t nil nil)) (ergoemacs-component-struct--set (quote shell-mode-hook) (quote ergoemacs-shell-here-hook) (list t nil nil)) (ergoemacs-component-struct--set (quote eshell-post-command-hook) (quote ergoemacs-shell-here-directory-change-hook) (list t nil nil)) (ergoemacs-component-struct--set (quote shift-select-mode) (quote (lambda nil t))) (ergoemacs-component-struct--set (quote delete-selection-mode) (quote (lambda nil 1))) (progn (ergoemacs-component-struct--set (quote recentf-menu-items-for-commands) (quote (lambda nil (list ["Open Last Closed" ergoemacs-open-last-closed :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Cleanup list" recentf-cleanup :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Edit list..." recentf-edit-list :help "Manually remove files from the recent list" :active t] ["Save list now" recentf-save-list :help "Save the list of recently opened files now" :active t] ["Options..." (customize-group "recentf") :help "Customize recently opened files menu and options" :active t])))) (ergoemacs-component-struct--set (quote recentf-menu-before) (quote (lambda nil "Close")))) (ergoemacs-component-struct--set (quote recentf-mode) (quote (lambda nil (if noninteractive -1 1)))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "save-options-on-exit" (lambda nil "Save emacs options on exit" (ergoemacs-component-struct--create-component (quote (:name "save-options-on-exit" :description "Save emacs options on exit")) (quote (lambda nil (ergoemacs-component-struct--set (quote kill-emacs-hook) (quote ergoemacs-exit-customize-save-customized) (list t nil nil)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "standard-fixed" (lambda nil "Standard Fixed Shortcuts" (ergoemacs-component-struct--create-component (quote (:name "standard-fixed" :description "Standard Fixed Shortcuts" :variable-reg nil)) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-n") (quote ergoemacs-new-empty-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x C-f") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-o") (quote find-file)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-o") (quote ergoemacs-open-in-desktop)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-t") (quote ergoemacs-open-last-closed)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-w") (quote ergoemacs-close-current-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-s") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-f") (quote isearch-forward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x C-s") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-s") (quote save-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x C-w") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-s") (quote write-file)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-p") (quote ergoemacs-print-buffer-confirm)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x h") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-a") (quote mark-whole-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-z") (quote undo)) (ergoemacs-component-struct--define-key (quote undo-tree-map) (kbd "C-?") nil) (ergoemacs-component-struct--define-key (quote undo-tree-map) (kbd "M-_") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-z") (quote (redo undo-tree-redo ergoemacs-redo))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-delete>") (quote ergoemacs-cut-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-c <ergoemacs-timeout>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-insert>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-v") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-insert>") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-v") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-n") (quote make-frame-command)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<delete>") (quote delete-char)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-delete>") (quote kill-word)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-delete>") (quote kill-word)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<home>") (quote move-beginning-of-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<end>") (quote move-end-of-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-home>") (quote beginning-of-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-end>") (quote end-of-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-left>") (quote backward-word)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-right>") (quote forward-word)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-up>") (quote ergoemacs-backward-block)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-down>") (quote ergoemacs-forward-block)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-r") (quote revert-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-f4>") (quote ergoemacs-delete-frame)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-down-mouse-1>") (quote mouse-save-then-kill)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-mouse-1>") (quote ignore)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-+") (quote text-scale-increase)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C--") (quote text-scale-decrease)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-.") (quote keyboard-quit)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-/") (quote info)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-0") (quote ergoemacs-text-scale-normal-size)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-<next>") (quote ergoemacs-next-user-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-<pause>") (quote kill-compilation)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-<prior>") (quote ergoemacs-previous-user-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-=") (quote text-scale-increase)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-?") (quote info)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-<next>") (quote ergoemacs-next-emacs-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-<prior>") (quote ergoemacs-previous-emacs-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-f") (quote occur)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-o") (quote ergoemacs-open-in-external-app)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-s") (quote write-file)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-t") (quote ergoemacs-open-last-closed)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-w") (quote delete-frame)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-`") (quote other-frame)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-a") (quote mark-whole-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-f") (quote isearch-forward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-l") (quote goto-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-n") (quote ergoemacs-new-empty-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-o") (quote find-file)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-p") (quote ergoemacs-print-buffer-confirm)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-w") (quote ergoemacs-close-current-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x <ergoemacs-timeout>") (quote ergoemacs-cut-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x C-b") (quote ibuffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-y") (quote (redo undo-tree-redo ergoemacs-redo))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-S-<next>") (quote forward-page)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-S-<prior>") (quote backward-page)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "<C-return>") (quote ergoemacs-org-insert-heading-respect-content)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "<M-down>") (quote ergoemacs-org-metadown)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "<M-up>") (quote ergoemacs-org-metaup)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "<M-left>") (quote ergoemacs-org-metaleft)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "<M-right>") (quote ergoemacs-org-metaright)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "M-v") (quote ergoemacs-org-yank)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "C-v") (quote ergoemacs-org-yank)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) (kbd "C-f") (quote browse-kill-ring-search-forward)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) (kbd "<deletechar>") (quote browse-kill-ring-delete)) (ergoemacs-component-struct--define-key (quote log-edit-mode-map) [remap save-buffer] (quote log-edit-done)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "<home>") (quote eshell-bol)) (ergoemacs-component-struct--define-key (quote comint-mode-map) (kbd "<home>") (quote comint-bol)) (ergoemacs-component-struct--define-key (quote helm-map) [remap mark-whole-buffer] (quote helm-mark-all)) (ergoemacs-component-struct--define-key (quote helm-map) (kbd "C-w") (quote helm-keyboard-quit)) (ergoemacs-component-struct--define-key (quote helm-map) (kbd "C-z") nil) (ergoemacs-component-struct--with-hook (quote icicle-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap ergoemacs-apropos-user-options] (quote apropos-user-options))))) (ergoemacs-component-struct--with-hook (quote icicle-ido-like-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap ergoemacs-apropos-user-options] (quote apropos-user-options))))) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-S-f") (quote isearch-occur)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-M-f") (quote isearch-occur)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<S-insert>") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-S-v") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-c") (quote isearch-yank-word-or-char)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "M-c") (quote isearch-yank-word-or-char)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "M-v") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-v") (quote ergoemacs-paste)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "tab-indents-region" (lambda nil "Tab indents selected region" (ergoemacs-component-struct--create-component (quote (:name "tab-indents-region" :description "Tab indents selected region")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote mark-active) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "TAB") (quote indent-region))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "fixed-bold-italic" (lambda nil "Fixed keys for bold and italic" (ergoemacs-component-struct--create-component (quote (:name "fixed-bold-italic" :description "Fixed keys for bold and italic")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "C-b") (quote ergoemacs-org-bold)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "<tab>") (quote org-cycle)) (ergoemacs-component-struct--define-key (quote org-mode-map) (kbd "<kp-tab>") (quote org-cycle)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "backspace-is-back" (lambda nil "Backspace is back, as in browsers..." (ergoemacs-component-struct--create-component (quote (:name "backspace-is-back" :description "Backspace is back, as in browsers...")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote Info-mode-map) (kbd "<backspace>") (quote Info-history-back)) (ergoemacs-component-struct--define-key (quote Info-mode-map) (kbd "<S-backspace>") (quote Info-history-forward)) (ergoemacs-component-struct--define-key (quote Info-mode-map) (kbd "<M-backspace>") (quote Info-history-forward)) (ergoemacs-component-struct--define-key (quote help-mode-map) (kbd "<backspace>") (quote help-go-back)) (ergoemacs-component-struct--define-key (quote help-mode-map) (kbd "<S-backspace>") (quote help-go-forward)) (ergoemacs-component-struct--define-key (quote eww-mode-map) (kbd "<backspace>") (quote eww-back-url)) (ergoemacs-component-struct--define-key (quote eww-mode-map) (kbd "<S-backspace>") (quote eww-forward-url)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "fixed-newline" (lambda nil "Newline and indent" (ergoemacs-component-struct--create-component (quote (:name "fixed-newline" :description "Newline and indent")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-RET") (quote newline-and-indent)) (ergoemacs-component-struct--define-key (quote helm-map) (kbd "M-RET") (quote helm-execute-persistent-action)) (ergoemacs-component-struct--define-key (quote helm-map) (kbd "<M-return>") (quote helm-execute-persistent-action)) (ergoemacs-component-struct--define-key (quote helm-map) (kbd "M-S-RET") "C-u M-RET") (ergoemacs-component-struct--define-key (quote helm-map) (kbd "<M-S-return>") "C-u M-RET") (ergoemacs-component-struct--define-key (quote helm-read-file-map) [remap eshell] (quote helm-ff-run-switch-to-eshell)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) [remap ergoemacs-eshell-here] (quote helm-ff-run-switch-to-eshell)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "RET") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "<return>") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "M-RET") (quote ergoemacs-helm-ff-execute-dired-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "<M-return>") (quote ergoemacs-helm-ff-execute-dired-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "RET") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "<return>") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "M-RET") (quote ergoemacs-helm-ff-execute-dired-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "<M-return>") (quote ergoemacs-helm-ff-execute-dired-dir)) (ergoemacs-component-struct--define-key (quote helm-read-file-map) (kbd "DEL") (quote ergoemacs-helm-ff-backspace)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) [remap eshell] (quote helm-ff-run-switch-to-eshell)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) [remap ergoemacs-eshell-here] (quote helm-ff-run-switch-to-eshell)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "DEL") (quote ergoemacs-helm-ff-backspace)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "RET") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "<return>") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "M-RET") (quote ergoemacs-helm-ff-execute-dired-dir)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "<M-return>") (quote ergoemacs-helm-ff-execute-dired-dir)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "RET") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "<return>") (quote ergoemacs-helm-ff-persistent-expand-dir)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "M-RET") (quote ergoemacs-helm-ff-execute-dired-dir)) (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "<M-return>") (quote ergoemacs-helm-ff-execute-dired-dir)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "fn-keys" (lambda nil "Function Keys" (ergoemacs-component-struct--create-component (quote (:name "fn-keys" :description "Function Keys")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-f2>") (quote ergoemacs-cut-all)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-f3>") (quote ergoemacs-copy-all)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-f4>") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-f5>") (quote (redo undo-tree-redo ergoemacs-redo))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-f8>") (quote highlight-symbol-prev)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-f9>") (quote highlight-symbol-next)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-f2>") (quote ergoemacs-cut-all)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-f3>") (quote ergoemacs-copy-all)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-f5>") (quote (redo undo-tree-redo ergoemacs-redo))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-f3>") (quote ergoemacs-toggle-letter-case)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f11>") (quote previous-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f12>") (quote next-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f3>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f6>") (quote ergoemacs-unchorded-alt-modal)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f8>") (quote search-map)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f8> <f8>") (quote highlight-symbol-at-point)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f8> <f9>") (quote highlight-symbol-query-replace)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f2>") (quote ergoemacs-cut-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f4>") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote compilation-mode-map) (kbd "<f11>") (quote previous-error)) (ergoemacs-component-struct--define-key (quote compilation-mode-map) (kbd "<f12>") (quote next-error)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) (kbd "<f11>") (quote browse-kill-ring-previous)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) (kbd "<f12>") (quote browse-kill-ring-next)) (ergoemacs-component-struct--define-key (quote comint-mode-map) (kbd "<f11>") (quote comint-previous-input)) (ergoemacs-component-struct--define-key (quote comint-mode-map) (kbd "<f12>") (quote comint-next-input)) (ergoemacs-component-struct--define-key (quote comint-mode-map) (kbd "S-<f11>") (quote comint-previous-matching-input)) (ergoemacs-component-struct--define-key (quote comint-mode-map) (kbd "<M-f11>") (quote comint-previous-matching-input)) (ergoemacs-component-struct--define-key (quote comint-mode-map) (kbd "S-<f12>") (quote comint-next-matching-input)) (ergoemacs-component-struct--define-key (quote comint-mode-map) (kbd "<M-f12>") (quote comint-next-matching-input)) (ergoemacs-component-struct--define-key (quote log-edit-mode-map) (kbd "<f11>") (quote log-edit-previous-comment)) (ergoemacs-component-struct--define-key (quote log-edit-mode-map) (kbd "<f12>") (quote log-edit-next-comment)) (ergoemacs-component-struct--define-key (quote log-edit-mode-map) (kbd "S-<f11>") (quote log-edit-previous-comment)) (ergoemacs-component-struct--define-key (quote log-edit-mode-map) (kbd "<M-f11>") (quote log-edit-previous-comment)) (ergoemacs-component-struct--define-key (quote log-edit-mode-map) (kbd "S-<f12>") (quote log-edit-next-comment)) (ergoemacs-component-struct--define-key (quote log-edit-mode-map) (kbd "<M-f12>") (quote log-edit-next-comment)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "<f11>") (quote eshell-previous-matching-input-from-input)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "<f12>") (quote eshell-next-matching-input-from-input)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "S-<f11>") (quote eshell-previous-matching-input-from-input)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "<M-f11>") (quote eshell-previous-matching-input-from-input)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "<f11>") (quote eshell-previous-matching-input-from-input)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "S-<f12>") (quote eshell-next-matching-input-from-input)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) (kbd "<M-f12>") (quote eshell-next-matching-input-from-input)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<S-f3>") (quote isearch-toggle-regexp)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<f11>") (quote isearch-ring-retreat)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<f12>") (quote isearch-ring-advance)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "S-<f11>") (quote isearch-ring-advance)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "S-<f12>") (quote isearch-ring-retreat)) (ergoemacs-component-struct--with-hook (quote icicle-minibuffer-setup-hook) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<f11>") (quote previous-history-element)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "M-<f11>") (quote icicle-insert-history-element)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<f12>") (quote next-history-element)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "S-<f11>") (quote next-history-element)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "M-<f12>") (quote icicle-insert-history-element)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "S-<f12>") (quote previous-history-element))))) (ergoemacs-component-struct--with-hook (quote iswitchb-define-mode-map-hook) (quote (:modify-map t :always t)) (quote (lambda nil (ergoemacs-component-struct--define-key (quote iswitchb-mode-map) [remap previous-history-element] (quote iswitchb-prev-match)) (ergoemacs-component-struct--define-key (quote iswitchb-mode-map) [remap next-history-element] (quote iswitchb-next-match))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "f2-edit" (lambda nil "Have <f2> edit" (ergoemacs-component-struct--create-component (quote (:name "f2-edit" :description "Have <f2> edit")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote ergoemacs-translate--parent-map) [f2] (quote ergoemacs-command-loop--force-universal-argument)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "backspace-del-seq" (lambda nil "Backspace deletes last key entered in command sequence" (ergoemacs-component-struct--create-component (quote (:name "backspace-del-seq" :description "Backspace deletes last key entered in command sequence")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote ergoemacs-translate--parent-map) (kbd "DEL") (quote ergoemacs-command-loop--force-undo-last)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "help" (lambda nil "Help changes for ergoemacs-mode" (ergoemacs-component-struct--create-component (quote (:name "help" :description "Help changes for ergoemacs-mode")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h '") (quote ergoemacs-display-current-svg)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 1") (quote describe-function)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 2") (quote describe-variable)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 3") (quote describe-key)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 4") (quote describe-char)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 5") (quote man)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 7") (quote ergoemacs-lookup-google)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 8") (quote ergoemacs-lookup-wikipedia)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h 9") (quote ergoemacs-lookup-word-definition)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h `") (quote elisp-index-search)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h o") (quote ergoemacs-where-is-old-binding)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h z") (quote ergoemacs-clean)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-h C-z") (quote ergoemacs-clean-library)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> '") (quote ergoemacs-display-current-svg)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 1") (quote describe-function)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 2") (quote describe-variable)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 3") (quote describe-key)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 4") (quote describe-char)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 5") (quote man)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 7") (quote ergoemacs-lookup-google)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 8") (quote ergoemacs-lookup-wikipedia)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> 9") (quote ergoemacs-lookup-word-definition)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> `") (quote elisp-index-search)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<f1> o") (quote ergoemacs-where-is-old-binding)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "move-char" [cl-struct-ergoemacs-component-struct "move-char" (:name "move-char" :description "Movement by Characters & Set Mark" :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") (keymap (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (67108873 . backward-paragraph) (9 . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (browse-kill-ring-mode-map (keymap (27 keymap (102 . browse-kill-ring-delete) (107 . browse-kill-ring-forward) (105 . browse-kill-ring-backward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (forward-char . iswitchb-next-match) (backward-char . iswitchb-prev-match))))))) nil nil nil nil nil ([4] [67108896] [14] [16] [6] [2]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-word" [cl-struct-ergoemacs-component-struct "move-word" (:name "move-word" :description "Moving around and deleting words" :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217828] [134217830] [134217826]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-sexp" (lambda nil "Instead of moving around by words, use sexps." (ergoemacs-component-struct--create-component (quote (:name "move-sexp" :description "Instead of moving around by words, use sexps.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap forward-word] (quote forward-sexp)) (ergoemacs-component-struct--define-key (quote global-map) [remap backward-word] (quote backward-sexp)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "move-paragraph" (lambda nil "Move by Paragraph" (ergoemacs-component-struct--create-component (quote (:name "move-paragraph" :description "Move by Paragraph")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-{") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-}") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-U") (quote ergoemacs-backward-block)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-O") (quote ergoemacs-forward-block)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "move-line" (lambda nil "Move by Line" (ergoemacs-component-struct--create-component (quote (:name "move-line" :description "Move by Line")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-a") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-e") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-h") (quote ergoemacs-beginning-of-line-or-what)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-H") (quote ergoemacs-end-of-line-or-what)) (ergoemacs-component-struct--define-key (quote eshell-mode-map) [remap move-beginning-of-line] (quote eshell-bol)) (ergoemacs-component-struct--define-key (quote comint-mode-map) [remap move-beginning-of-line] (quote comint-bol)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "move-and-transpose-lines" (lambda nil "Move Current line/selection down or up with Alt+up or Alt+down" (ergoemacs-component-struct--create-component (quote (:name "move-and-transpose-lines" :description "Move Current line/selection down or up with Alt+up or Alt+down")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [M-up] (quote ergoemacs-move-text-up)) (ergoemacs-component-struct--define-key (quote global-map) [M-down] (quote ergoemacs-move-text-down)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "alt-backspace-is-undo" (lambda nil "Alt+Backspace is Undo" (ergoemacs-component-struct--create-component (quote (:name "alt-backspace-is-undo" :description "Alt+Backspace is Undo")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-backspace>") (quote undo)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "move-page" (lambda nil "Move by Page" (ergoemacs-component-struct--create-component (quote (:name "move-page" :description "Move by Page")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-v") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-v") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-M-v") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-M-I") (quote scroll-other-window-down)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-M-K") (quote scroll-other-window)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-I") (quote (scroll-down-command scroll-down))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-K") (quote (scroll-up-command scroll-up))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "move-buffer" (lambda nil "Move Beginning/End of buffer" (ergoemacs-component-struct--create-component (quote (:name "move-buffer" :description "Move Beginning/End of buffer")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M->") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-<") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-n") (quote ergoemacs-beginning-or-end-of-buffer)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-N") (quote ergoemacs-end-or-beginning-of-buffer)) nil (ergoemacs-component-struct--new-version "5.7.5") (ergoemacs-component-struct--define-key (quote global-map) (kbd "M->") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-<") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-n") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-N") nil))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "move-bracket" (lambda nil "Move By Bracket" (ergoemacs-component-struct--create-component (quote (:name "move-bracket" :description "Move By Bracket")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-J") (quote ergoemacs-backward-open-bracket)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-L") (quote ergoemacs-forward-close-bracket)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-left>") (quote ergoemacs-backward-open-bracket)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-right>") (quote ergoemacs-forward-close-bracket)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "copy" (lambda nil "Copy, Cut, Paste, Redo and Undo" (ergoemacs-component-struct--create-component (quote (:name "copy" :description "Copy, Cut, Paste, Redo and Undo")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-w") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-x") (quote ergoemacs-cut-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-w") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-c") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-y") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-v") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-y") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-V") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-C") (quote ergoemacs-copy-all)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-X") (quote ergoemacs-cut-all)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-Z") (quote (redo undo-tree-redo ergoemacs-redo))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-_") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-/") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x u") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-z") (quote undo)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-c <ergoemacs-timeout>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x <ergoemacs-timeout>") (quote ergoemacs-cut-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-z") (quote undo)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-z") (quote (redo undo-tree-redo ergoemacs-redo))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-y") (quote (redo undo-tree-redo ergoemacs-redo))) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-c") (quote isearch-yank-word-or-char)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "M-c") (quote isearch-yank-word-or-char)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "M-v") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "M-V") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-v") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "C-S-v") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote org-mode-map) [remap ergoemacs-paste] (quote ergoemacs-org-yank)) (ergoemacs-component-struct--define-key (quote org-mode-map) [remap ergoemacs-paste] (quote ergoemacs-org-yank)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) [remap undo] (quote browse-kill-ring-undo-other-window)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) [remap undo-tree-undo] (quote browse-kill-ring-undo-other-window)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) [remap undo-tree-undo] (quote browse-kill-ring-undo-other-window)) (ergoemacs-component-struct--define-key (quote calc-mode-map) [remap undo-tree-undo] (quote calc-undo)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "search" (lambda nil "Search and Replace" (ergoemacs-component-struct--create-component (quote (:name "search" :description "Search and Replace")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-s") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-y") (quote isearch-forward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-r") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-Y") (quote isearch-backward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-5") (quote query-replace)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") (quote (vr/query-replace query-replace-regexp))) (ergoemacs-component-struct--define-key (quote dired-mode-map) (kbd "M-5") (quote dired-do-query-replace-regexp)) (ergoemacs-component-struct--define-key (quote dired-mode-map) (kbd "M-%") (quote dired-do-query-replace-regexp)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) [remap isearch-forward] (quote browse-kill-ring-search-forward)) (ergoemacs-component-struct--define-key (quote browse-kill-ring-mode-map) [remap isearch-backward] (quote browse-kill-ring-search-backward)) nil (ergoemacs-component-struct--new-version "5.7.5") (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-;") (quote isearch-forward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-:") (quote isearch-backward)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "search-reg" (lambda nil "Regular Expression Search/Replace" (ergoemacs-component-struct--create-component (quote (:name "search-reg" :description "Regular Expression Search/Replace")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-forward] (quote isearch-forward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-backward] (quote isearch-backward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-5") (quote (vr/query-replace query-replace-regexp))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") (quote (vr/query-replace query-replace-regexp))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "switch" (lambda nil "Window/Frame/Tab Switching" (ergoemacs-component-struct--create-component (quote (:name "switch" :description "Window/Frame/Tab Switching")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-s") (quote ergoemacs-move-cursor-next-pane)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-S") (quote ergoemacs-move-cursor-previous-pane)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-~") (quote ergoemacs-switch-to-previous-frame)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-`") (quote ergoemacs-switch-to-next-frame)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x 1") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-3") (quote delete-other-windows)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x 0") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-2") (quote delete-window)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x 3") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-4") (quote (split-window-below split-window-horizontally))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-x 2") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-$") (quote (split-window-right split-window-vertically))) nil (ergoemacs-component-struct--new-version "5.7.5") (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-0") (quote delete-window)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "execute" (lambda nil "Execute Commands" (ergoemacs-component-struct--create-component (quote (:name "execute" :description "Execute Commands")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-x") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-a") (quote execute-extended-command)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-!") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-A") (quote shell-command)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "misc" (lambda nil "Misc Commands" (ergoemacs-component-struct--create-component (quote (:name "misc" :description "Misc Commands")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-l") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-p") (quote recenter-top-bottom)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-b") (quote ace-jump-mode)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "kill-line" (lambda nil "Kill Line" (ergoemacs-component-struct--create-component (quote (:name "kill-line" :description "Kill Line")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-k") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-g") (quote kill-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-G") (quote ergoemacs-kill-line-backward)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "text-transform" (lambda nil "Text Transformation" (ergoemacs-component-struct--create-component (quote (:name "text-transform" :description "Text Transformation")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-;") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-'") (quote comment-dwim)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-w") (quote ergoemacs-shrink-whitespaces)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-?") (quote ergoemacs-toggle-camel-case)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-/") (quote ergoemacs-toggle-letter-case)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-t") (quote ergoemacs-call-keyword-completion)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-T") (quote flyspell-auto-correct-word)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-q") (quote ergoemacs-compact-uncompact-block)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "M-?") (quote isearch-toggle-regexp)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "M-/") (quote isearch-toggle-case-fold)) (ergoemacs-component-struct--with-hook (quote iswitchb-define-mode-map-hook) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote iswitchb-mode-map) [remap ergoemacs-toggle-camel-case] (quote iswitchb-toggle-case)) (ergoemacs-component-struct--define-key (quote iswitchb-mode-map) [remap ergoemacs-toggle-letter-case] (quote iswitchb-toggle-regexp))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "select-items" (lambda nil "Select Items" (ergoemacs-component-struct--create-component (quote (:name "select-items" :description "Select Items")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-S-SPC") (quote mark-paragraph)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-8") (quote (er/expand-region ergoemacs-extend-selection))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-*") (quote (er/mark-inside-quotes ergoemacs-select-text-in-quote))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-6") (quote ergoemacs-select-current-block)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-7") (quote ergoemacs-select-current-line)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "quit" (lambda nil "Escape exits" (ergoemacs-component-struct--create-component (quote (:name "quit" :description "Escape exits")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<escape>") (quote keyboard-quit)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<escape>") (quote isearch-abort)) (ergoemacs-component-struct--with-hook (quote org-read-date-minibuffer-setup-hook) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<escape>") (quote minibuffer-keyboard-quit))))) nil (ergoemacs-component-struct--new-version "5.3.7") (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-n") (quote keyboard-quit)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "apps" (lambda nil "General Apps Key Sequence" (ergoemacs-component-struct--create-component (quote (:name "apps" :description "General Apps Key Sequence" :just-first-keys (list [apps 104] [menu 104]) :bind ("<apps> '" ergoemacs-org-edit-src "<apps> 2" delete-window "<apps> 3" delete-other-windows "<apps> 4" split-window-vertically "<apps> 5" query-replace "<apps> <f2>" ergoemacs-cut-all "<apps> <f3>" ergoemacs-copy-all "<apps> <return>" execute-extended-command "<apps> RET" execute-extended-command "<apps> TAB" indent-region "<apps> SPC" set-mark-command "<apps> a" mark-whole-buffer "<apps> d" ("C-x" :ctl-to-alt) "<apps> f" ("C-c" :unchorded-ctl) "<apps> h" help-map "<apps> h '" ergoemacs-display-current-svg "<apps> h 1" describe-function "<apps> h 2" describe-variable "<apps> h 3" describe-key "<apps> h 4" describe-char "<apps> h 5" man "<apps> h 7" ergoemacs-lookup-google "<apps> h 8" ergoemacs-lookup-wikipedia "<apps> h 9" ergoemacs-lookup-word-definition "<apps> h `" elisp-index-search "<apps> h o" ergoemacs-where-is-old-binding "<apps> h z" ergoemacs-clean "<apps> h C-z" ergoemacs-clean-library "<apps> h Z" ergoemacs-clean-nw "<apps> m" (kbd "C-c C-c") "<apps> s" save-buffer "<apps> C-s" write-file "<apps> o" find-file "<apps> g" ergoemacs-read-key--universal-argument "<apps> w" ergoemacs-close-current-buffer "<apps> x" ergoemacs-cut-line-or-region "<apps> c" ergoemacs-copy-line-or-region "<apps> v" ergoemacs-paste "<apps> b" (redo undo-tree-redo ergoemacs-redo) "<apps> t" switch-to-buffer "<apps> z" undo "<apps> r" goto-map))) (quote (lambda nil)) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "apps-toggle" (lambda nil "Toggle States and applications" (ergoemacs-component-struct--create-component (quote (:name "apps-toggle" :description "Toggle States and applications" :just-first-keys (list [apps 105] [menu 105]))) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i c") (quote column-number-mode)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i d") (quote toggle-debug-on-error)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i e") (quote toggle-debug-on-error)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i f") (quote auto-fill-mode)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i l") (quote toggle-truncate-lines)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i q") (quote toggle-debug-on-quit)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i r") (quote read-only-mode)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> i C-r") (quote revert-buffer)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "apps-apps" (lambda nil "Applications" (ergoemacs-component-struct--create-component (quote (:name "apps-apps" :description "Applications" :just-first-keys (list [apps 110] [menu 110]))) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n a") (quote org-agenda)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n A") (quote org-capture)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n C-a") (quote org-capture)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n c") (quote calc)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n d") (quote dired-jump)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n e") (quote eshell)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n p") (quote powershell)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n f") (quote ergoemacs-open-in-desktop)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n g") (quote grep)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n m") (quote magit-status)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n o") (quote ergoemacs-open-in-external-app)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n r") (quote R)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n s") (quote shell)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n t") (quote org-capture)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n C-t") (quote org-agenda)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> n T") (quote org-agenda)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "apps-punctuation" (lambda nil "Punctuation" (ergoemacs-component-struct--create-component (quote (:name "apps-punctuation" :description "Punctuation")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k o") "#") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k l") "$") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k .") ":") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k w") "^") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k s") "*") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k x") "~") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k i") (quote ergoemacs-smart-bracket)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k k") (quote ergoemacs-smart-paren)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k ,") (quote ergoemacs-smart-curly)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k j") (quote ergoemacs-smart-quote)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k u") (quote ergoemacs-smart-apostrophe)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k m") "`") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k y") "?") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k h") "%") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k n") "@") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k r") ">") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k f") "_") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k v") "<") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k e") "+") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k d") "=") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k c") "-") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k t") "&") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k g") "|") (ergoemacs-component-struct--define-key (quote global-map) (kbd "<apps> k b") "!"))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "apps-swap" (lambda nil "Apps/Menu swaps key sequence translations" (ergoemacs-component-struct--create-component (quote (:name "apps-swap" :description "Apps/Menu swaps key sequence translations")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote ergoemacs-translate--parent-map) (if (eq system-type (quote windows-nt)) [apps] [menu]) (quote ergoemacs-command-loop--swap-translation)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "dired-to-wdired" (lambda nil "C-c C-c enters wdired, <escape> exits." (ergoemacs-component-struct--create-component (quote (:name "dired-to-wdired" :description "C-c C-c enters wdired, <escape> exits.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote dired-mode-map) (kbd "C-c C-c") (quote wdired-change-to-wdired-mode)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "dired-tab" (lambda nil "TAB expands a directory." (ergoemacs-component-struct--create-component (quote (:name "dired-tab" :description "TAB expands a directory.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote dired-mode-map) (kbd "TAB") (quote dired-maybe-insert-subdir)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "guru" (lambda nil "Unbind some commonly used keys such as <left> and <right> to get in the habit of using ergoemacs keybindings." (ergoemacs-component-struct--create-component (quote (:name "guru" :description "Unbind some commonly used keys such as <left> and <right> to get in the habit of using ergoemacs keybindings.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<next>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-next>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<prior>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-prior>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<home>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-home>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<end>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-end>") nil))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "no-backspace" (lambda nil "No Backspace!" (ergoemacs-component-struct--create-component (quote (:name "no-backspace" :description "No Backspace!")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<backspace>") nil))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "helm-remaps" (lambda nil "Remaps for helm-mode" (ergoemacs-component-struct--create-component (quote (:name "helm-remaps" :description "Remaps for helm-mode")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote helm-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap grep] (quote helm-do-grep)) (ergoemacs-component-struct--define-key (quote global-map) [remap execute-extended-command] (quote helm-M-x)) (ergoemacs-component-struct--define-key (quote global-map) [remap switch-to-buffer] (quote helm-mini)) (ergoemacs-component-struct--define-key (quote global-map) [remap find-file] (quote helm-find-files)) (ergoemacs-component-struct--define-key (quote global-map) [remap eshell-pcomplete] (quote helm-esh-pcomplete)) (ergoemacs-component-struct--define-key (quote global-map) [remap occur] (quote helm-occur)) (ergoemacs-component-struct--define-key (quote global-map) [remap info] (quote helm-info-at-point)) (ergoemacs-component-struct--define-key (quote global-map) [remap ac-isearch] (quote ac-complete-with-helm))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "helm-switch-sources" (lambda nil "Ctrl+o switches multiple sources." (ergoemacs-component-struct--create-component (quote (:name "helm-switch-sources" :description "Ctrl+o switches multiple sources.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote helm-map) (kbd "C-o") (quote helm-next-source)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "helm-files-up" (lambda nil "Use Ctrl+L to go up one level in helm." (ergoemacs-component-struct--create-component (quote (:name "helm-files-up" :description "Use Ctrl+L to go up one level in helm.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "C-l") (quote helm-find-files-up-one-level)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "icy-reclaim" (lambda nil "Reclaim some icicle key bindings." (ergoemacs-component-struct--create-component (quote (:name "icy-reclaim" :description "Reclaim some icicle key bindings.")) (quote (lambda nil (progn (ergoemacs-component-struct--set (quote icicle-key-complete-keys-for-minibuffer) (quote (lambda nil (list (ergoemacs-kbd "M-T")))))) (ergoemacs-component-struct--with-hook (quote icicle-minibuffer-setup-hook) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "M-*") (quote icicle-narrow-candidates)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "M-?") (quote icicle-minibuffer-help)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "C-M-RET") (quote icicle-help-on-candidate)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-prior>") (quote icicle-previous-apropos-candidate-action)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-next>") (quote icicle-next-apropos-candidate-action)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-M-prior>") (quote icicle-help-on-previous-apropos-candidate)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-M-next>") (quote icicle-help-on-next-apropos-candidate)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-home>") (quote icicle-previous-prefix-candidate-action)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-end>") (quote icicle-next-prefix-candidate-action)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-M-home>") (quote icicle-help-on-previous-prefix-candidate)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-M-end>") (quote icicle-help-on-next-prefix-candidate)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-M-up>") (quote icicle-previous-candidate-per-mode-help)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<C-M-down>") (quote icicle-next-candidate-per-mode-help)) (ergoemacs-component-struct--define-key (quote minibuffer-local-map) (kbd "<delete>") (quote icicle-remove-candidate))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "multiple-cursors-remaps" (lambda nil "Multiple Cursors phi-search remaps" (ergoemacs-component-struct--create-component (quote (:name "multiple-cursors-remaps" :description "Multiple Cursors phi-search remaps")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote multiple-cursors-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-forward] (quote phi-search)) (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-backward] (quote phi-search-backward))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "ido-remaps" (lambda nil "Remaps for ido-mode" (ergoemacs-component-struct--create-component (quote (:name "ido-remaps" :description "Remaps for ido-mode")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote ido-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap execute-extended-command] (quote smex))))) (progn (ergoemacs-component-struct--set (quote smex-prompt-string) (quote (lambda nil (substitute-command-keys "\\[execute-extended-command] "))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "ido-prev-next-instead-of-left-right" (lambda nil "In Ido use, Ergoemacs left and right for previous/next match." (ergoemacs-component-struct--create-component (quote (:name "ido-prev-next-instead-of-left-right" :description "In Ido use, Ergoemacs left and right for previous/next match.")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote ido-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap ido-magic-forward-char] (quote ido-next-match)) (ergoemacs-component-struct--define-key (quote global-map) [remap ido-magic-backward-char] (quote ido-prev-match))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "ergoemacs-remaps" (lambda nil "Remaps for ergoemacs-mode" (ergoemacs-component-struct--create-component (quote (:name "ergoemacs-remaps" :description "Remaps for ergoemacs-mode")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote undo-tree-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap ergoemacs-redo] (quote undo-tree-redo)) (ergoemacs-component-struct--define-key (quote global-map) [remap undo] (quote undo-tree-undo))))) (ergoemacs-component-struct--with-hook (quote mark-active) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "TAB") (quote indent-region))))) (ergoemacs-component-struct--with-hook (quote ergoemacs-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap eshell] (quote ergoemacs-eshell-here)) (ergoemacs-component-struct--define-key (quote global-map) [remap powershell] (quote ergoemacs-powershell-here)) (ergoemacs-component-struct--define-key (quote global-map) [remap shell] (quote ergoemacs-shell-here)) (ergoemacs-component-struct--define-key (quote global-map) [remap universal-argument] (quote ergoemacs-command-loop--universal-argument)) (ergoemacs-component-struct--define-key (quote global-map) [remap describe-mode] (quote ergoemacs-describe-major-mode)) (ergoemacs-component-struct--define-key (quote global-map) [remap ergoemacs-print-buffer-confirm] (quote pr-interface))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "ergoemacs-banish-shift" (lambda nil "Banish Shift Combinations with <apps> SPC" (ergoemacs-component-struct--create-component (quote (:name "ergoemacs-banish-shift" :description "Banish Shift Combinations with <apps> SPC" :variable-reg "")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC SPC") (kbd "_")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC RET") (kbd "-")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC '") (kbd "\"")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC ,") (kbd "<")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC -") (kbd "_")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC .") (kbd ">")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC /") (kbd "?")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC ;") (kbd ":")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC =") (kbd "+")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC \\") (kbd "|")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC `") (kbd "~")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 0") (kbd ")")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 1") (kbd "!")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 2") (kbd "@")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 3") (kbd "#")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 4") (kbd "$")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 5") (kbd "%")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 6") (kbd "^")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 7") (kbd "&")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 8") (kbd "*")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 9") (kbd "(")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC a") (kbd "A")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC b") (kbd "B")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC c") (kbd "C")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC d") (kbd "D")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC e") (kbd "E")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC f") (kbd "F")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC g") (kbd "G")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC h") (kbd "H")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC i") (kbd "I")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC j") (kbd "J")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC k") (kbd "K")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC l") (kbd "L")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC m") (kbd "M")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC n") (kbd "N")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC o") (kbd "O")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC p") (kbd "P")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC q") (kbd "Q")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC r") (kbd "R")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC s") (kbd "S")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC t") (kbd "T")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC u") (kbd "U")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC v") (kbd "V")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC w") (kbd "W")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC x") (kbd "X")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC y") (kbd "Y")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC z") (kbd "Z")))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "menu-bar-file" (lambda nil "File menu" (ergoemacs-component-struct--create-component (quote (:name "menu-bar-file" :description "File menu")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [menu-bar file] (cons "File" (\` (keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item (\, (cond ((eq system-type (quote windows-nt)) "In Explorer") ((eq system-type (quote darwin)) "In Finder") (t "In File Manager"))) ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item (\, (if (eq system-type (quote windows-nt)) "In Command Prompt" "In Shell")) ergoemacs-shell-here) (\, (if (eq system-type (quote windows-nt)) (quote (powershell-here menu-item "In PowerShell" ergoemacs-powershell-here :enable (fboundp (quote powershell)))))))) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs menu-item "Quit" save-buffers-kill-emacs) "File")))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "menu-bar-edit" (lambda nil "Edit menu" (ergoemacs-component-struct--create-component (quote (:name "menu-bar-edit" :description "Edit menu")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [menu-bar edit] (cons "Edit" (quote (keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (redo menu-item "Redo" ergoemacs-redo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (or (not (and (boundp (quote undo-tree-mode)) undo-tree-mode)) (and (and (boundp (quote undo-tree-mode)) undo-tree-mode) (null (undo-tree-node-next (undo-tree-current buffer-undo-tree))))))) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit")))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "menu-bar-search" (lambda nil "Search menu" (ergoemacs-component-struct--create-component (quote (:name "menu-bar-search" :description "Search menu")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [menu-bar search] (cons "Search" (quote (keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") (separator-packages)) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search")))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "menu-bar-view" (lambda nil "View menu" (ergoemacs-component-struct--create-component (quote (:name "menu-bar-view" :description "View menu")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [menu-bar view] (cons "View" (quote (keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode)))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "menu-bar-languages" (lambda nil "Languages menu" (ergoemacs-component-struct--create-component (quote (:name "menu-bar-languages" :description "Languages menu")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [menu-bar languages] (cons "Languages" (ergoemacs-menu--get-major-modes))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "menu-bar-help" (lambda nil "Help menu" (ergoemacs-component-struct--create-component (quote (:name "menu-bar-help" :description "Help menu")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [menu-bar help-menu] (cons (if (eq system-type (quote darwin)) "Help" "?") (\` (keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-display-current-svg) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) (\, (if (eq system-type (quote darwin)) "Help" "?")))))))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "lvl0-theme" (lambda nil "Generated theme component for lvl0 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl0-theme" :description "Generated theme component for lvl0 theme")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-c <ergoemacs-timeout>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-insert>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-v") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-insert>") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-v") (quote ergoemacs-paste)))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "lvl1-theme" (lambda nil "Generated theme component for lvl1 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl1-theme" :description "Generated theme component for lvl1 theme")) (quote (lambda nil)) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "lvl2-theme" [cl-struct-ergoemacs-component-struct "lvl2-theme" (:name "lvl2-theme" :description "Generated theme component for lvl2 theme" :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "standard-theme" (lambda nil "Generated theme component for standard theme" (ergoemacs-component-struct--create-component (quote (:name "standard-theme" :description "Generated theme component for standard theme")) (quote (lambda nil)) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "multiple-cursors" (lambda nil "multiple-cursors" (ergoemacs-component-struct--create-component (quote (:name "multiple-cursors" :description "multiple-cursors" :bind (("M-*" mc/mark-next-like-this) ("M-&" mc/edit-lines)) :ensure t :ergoemacs-require nil :package-name multiple-cursors)) (quote (lambda nil)) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "ace-jump-mode" (lambda nil "ace-jump-mode" (ergoemacs-component-struct--create-component (quote (:name "ace-jump-mode" :description "ace-jump-mode" :bind ("M-," (quote ace-jump-mode)) :ensure t :ergoemacs-require nil :package-name ace-jump-mode)) (quote (lambda nil)) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "expand-region" (lambda nil "expand-region" (ergoemacs-component-struct--create-component (quote (:name "expand-region" :description "expand-region" :bind (("M-8" er/expand-region) ("M-9" er/contract-region) ("M-*" . er/mark-inside-quotes)) :ensure t :ergoemacs-require nil :package-name expand-region)) (quote (lambda nil)) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")) "reduction-theme" (lambda nil "Generated theme component for reduction theme" (ergoemacs-component-struct--create-component (quote (:name "reduction-theme" :description "Generated theme component for reduction theme")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-<") (quote zap-to-char)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-g") (quote kill-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-b") (quote ergoemacs-kill-line-backward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-.") (quote ergoemacs-end-of-line-or-what)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-m") (quote ergoemacs-beginning-of-line-or-what)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-y") (quote isearch-backward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-Y") (quote isearch-backward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-h") (quote isearch-forward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-H") (quote isearch-forward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-a") (quote ergoemacs-move-cursor-previous-pane)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-;") (quote execute-extended-command)) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-T") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-I") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-K") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-U") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-O") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-N") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-G") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-S") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-A") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-J") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-L") nil))) "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc"))))] ergoemacs-component-struct--hash [object pcache-entry "pcache-entry" 1441053127.0105188 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ())] ergoemacs-map--hash [object pcache-entry "pcache-entry" 1441053127.0501778 7776000 #s(hash-table size 97 test equal rehash-size 1.5 rehash-threshold 0.8 data (global-menu-60660ac5d9bb96506993807c6dd481e3 (keymap (file menu-item "File" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693869))) (new-file menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file") (open-file menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer") (dired menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files") (insert-file menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer") (kill-buffer menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer") (separator-save "--") (save-buffer menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file") (write-file menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file") (revert-buffer menu-item "Revert Buffer" revert-buffer :enable (or revert-buffer-function revert-buffer-insert-file-contents-function (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file") (recover-session menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session") (separator-print "--") (print-buffer menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings") (print-region menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position") (ps-print-buffer-faces menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer") (ps-print-region-faces menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer") (ps-print-buffer menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer") (ps-print-region menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer") (separator-window "--") (new-window-below menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one") (new-window-on-right menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one") (one-window menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame") (separator-frame "--") (make-frame menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame") (make-frame-on-display menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display") (delete-this-frame menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame") (separator-exit "--") (exit-emacs menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit") "File") :filter ergoemacs-menu--filter) (edit menu-item "Edit" (keymap (redo) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693940))) (undo) (cut menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position" :keys #("Ctrl+W" 0 4 (face ergoemacs-display-key-face))) (copy menu-item "Copy" kill-ring-save :enable mark-active :help "Copy text in region between mark and current position" :keys "\\[kill-ring-save]") (paste menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied" :keys #("Ctrl+Y" 0 4 (face ergoemacs-display-key-face))) (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it" :filter ergoemacs-menu--filter) (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy" :keys #("Ctrl+X h" 0 4 (face ergoemacs-display-key-face))) (separator-search "--") (search menu-item "Search" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693874))) (search-forward menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string") (search-backward menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string") (re-search-forward menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression") (re-search-backward menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression") (separator-repeat-search "--") (repeat-search-fwd menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-search-back menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards") (separator-tag-search "--") (tags-srch menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files") (tags-continue menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation") (separator-tag-isearch "--") (i-search menu-item "Incremental Search" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693928))) (isearch-forward menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it") (isearch-forward-regexp menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (isearch-backward-regexp menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") "Incremental Search")) "Search") :filter ergoemacs-menu--filter) (replace menu-item "Replace" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693950))) (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace") :filter ergoemacs-menu--filter) (goto menu-item "Go To" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693929))) (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (go-to-pos menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N") (beg-of-buf menu-item "Goto Beginning of Buffer" beginning-of-buffer) (end-of-buf menu-item "Goto End of Buffer" end-of-buffer) (separator-tags "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") :filter ergoemacs-menu--filter) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map :filter ergoemacs-menu--filter) (separator-bookmark "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu :filter ergoemacs-menu--filter) "Edit") :filter ergoemacs-menu--filter) (options menu-item "Options" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693946))) (transient-mark-mode menu-item "Highlight Active Region" transient-mark-mode :enable (not cua-mode) :help "Make text in active region stand out in color (Transient Mark mode)" :button (:toggle and (default-boundp (quote transient-mark-mode)) (default-value (quote transient-mark-mode)))) (highlight-paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :help "Highlight matching/mismatched parentheses at cursor (Show Paren mode)" :button (:toggle and (default-boundp (quote show-paren-mode)) (default-value (quote show-paren-mode)))) (highlight-separator "--") (line-wrapping menu-item "Line Wrapping in This Buffer" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693857))) (window-wrap menu-item "Wrap at Window Edge" #[nil "\203 \300\303!\210\304
\205 \305\306!\207" [visual-line-mode word-wrap truncate-lines 0 nil toggle-truncate-lines -1] 2 nil nil] :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (truncate menu-item "Truncate Long Lines" #[nil "\203 \300\302!\210\303\304\305!\207" [visual-line-mode word-wrap 0 nil toggle-truncate-lines 1] 2 nil nil] :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (word-wrap menu-item "Word Wrap (Visual Line mode)" #[nil "\204 \300\301!\210\302\303!\207" [visual-line-mode 1 message "Visual-Line mode enabled"] 2 nil nil] :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)) "Line Wrapping")) (auto-fill-mode menu-item "Auto Fill in Text Modes" menu-bar-text-mode-auto-fill :help "Automatically fill text while typing (Auto Fill mode)" :button (:toggle if (listp text-mode-hook) (member (quote turn-on-auto-fill) text-mode-hook) (eq (quote turn-on-auto-fill) text-mode-hook))) (case-fold-search menu-item "Ignore Case for Search" toggle-case-fold-search :help "Ignore letter-case in search commands" :button (:toggle and (default-boundp (quote case-fold-search)) (default-value (quote case-fold-search)))) (cua-emulation-mode menu-item "Shift movement mark region (CUA)" cua-mode :visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys)) :help "Use shifted movement keys to set and extend the region" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (cua-mode menu-item "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" cua-mode :visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys) :help "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (edit-options-separator "--") (uniquify menu-item "Use Directory Names in Buffer Names" toggle-uniquify-buffer-names :help "Uniquify buffer names by adding parent directory names" :button (:toggle and (default-boundp (quote uniquify-buffer-name-style)) (default-value (quote uniquify-buffer-name-style)))) (save-place menu-item "Save Place in Files between Sessions" toggle-save-place-globally :help "Visit files of previous session when restarting Emacs" :button (:toggle and (default-boundp (quote save-place)) (default-value (quote save-place)))) (cursor-separator "--") (blink-cursor-mode menu-item "Blink Cursor" blink-cursor-mode :help "Whether the cursor blinks (Blink Cursor mode)" :button (:toggle and (default-boundp (quote blink-cursor-mode)) (default-value (quote blink-cursor-mode)))) (debugger-separator "--") (debug-on-error menu-item "Enter Debugger on Error" toggle-debug-on-error :help "Enter Lisp debugger when an error is signaled" :button (:toggle and (default-boundp (quote debug-on-error)) (default-value (quote debug-on-error)))) (debug-on-quit menu-item "Enter Debugger on Quit/C-g" toggle-debug-on-quit :help "Enter Lisp debugger when C-g is pressed" :button (:toggle and (default-boundp (quote debug-on-quit)) (default-value (quote debug-on-quit)))) (mule-separator "--") (mule menu-item "Multilingual Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693863))) (set-language-environment menu-item "Set Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693854))) (Default menu-item "Default" setup-specified-language-environment) "Set Language Environment" (Chinese "Chinese" . setup-chinese-environment-map) (Cyrillic "Cyrillic" . setup-cyrillic-environment-map) (Indian "Indian" . setup-indian-environment-map) (Sinhala "Sinhala" . setup-specified-language-environment) (English "English" . setup-specified-language-environment) (ASCII "ASCII" . setup-specified-language-environment) (Ethiopic "Ethiopic" . setup-specified-language-environment) (European "European" . setup-european-environment-map) (Turkish "Turkish" . setup-specified-language-environment) (Greek "Greek" . setup-specified-language-environment) (Hebrew "Hebrew" . setup-specified-language-environment) (Windows-1255 "Windows-1255" . setup-specified-language-environment) (Japanese "Japanese" . setup-specified-language-environment) (Korean "Korean" . setup-specified-language-environment) (Lao "Lao" . setup-specified-language-environment) (TaiViet "TaiViet" . setup-specified-language-environment) (Thai "Thai" . setup-specified-language-environment) (Tibetan "Tibetan" . setup-specified-language-environment) (Vietnamese "Vietnamese" . setup-specified-language-environment) (IPA "IPA" . setup-specified-language-environment) (Arabic "Arabic" . setup-specified-language-environment) (Persian "Persian" . setup-specified-language-environment) (UTF-8 "UTF-8" . setup-specified-language-environment) (Khmer "Khmer" . setup-specified-language-environment) (Burmese "Burmese" . setup-specified-language-environment) (Cham "Cham" . setup-specified-language-environment))) (separator-mule "--") (toggle-input-method menu-item "Toggle Input Method" toggle-input-method) (set-input-method menu-item "Select Input Method..." set-input-method) (separator-input-method "--") (set-various-coding-system menu-item "Set Coding Systems" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693904))) (universal-coding-system-argument menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command") (separator-1 "--") (set-buffer-file-coding-system menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved") (revert-buffer-with-coding-system menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system") (set-file-name-coding-system menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names") (separator-2 "--") (set-keyboard-coding-system menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input") (set-terminal-coding-system menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output") (separator-3 "--") (set-selection-coding-system menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard") (set-next-selection-coding-system menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation") (set-buffer-process-coding-system menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer") "Set Coding System") :enable (default-value (quote enable-multibyte-characters))) (view-hello-file menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets") (separator-coding-system "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693896))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support)) :help "Show multilingual settings for a specific language") (describe-input-method menu-item "Describe Input Method" describe-input-method) (describe-coding-system menu-item "Describe Coding System..." describe-coding-system) (list-character-sets menu-item "List Character Sets" list-character-sets :help "Show table of available character sets") (mule-diag menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings") "Mule (Multilingual Environment)")) (showhide-separator "--") (showhide menu-item "Show/Hide" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693864))) (showhide-tool-bar menu-item "Tool-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693860))) (showhide-tool-bar-none menu-item "None" menu-bar-showhide-tool-bar-menu-customize-disable :help "Turn tool-bar off" :visible (display-graphic-p) :button (:radio eq tool-bar-mode nil)) (showhide-tool-bar-top menu-item "On the Top" menu-bar-showhide-tool-bar-menu-customize-enable-top :help "Tool-bar at the top" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote top)))) (showhide-tool-bar-bottom menu-item "On the Bottom" menu-bar-showhide-tool-bar-menu-customize-enable-bottom :help "Tool-bar at the bottom" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote bottom)))) (showhide-tool-bar-right menu-item "On the Right" menu-bar-showhide-tool-bar-menu-customize-enable-right :help "Tool-bar at the right side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote right)))) (showhide-tool-bar-left menu-item "On the Left" menu-bar-showhide-tool-bar-menu-customize-enable-left :help "Tool-bar at the left side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote left)))) "Tool-bar") :visible (display-graphic-p)) (menu-bar-mode menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))) (showhide-tooltip-mode menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)) (showhide-scroll-bar menu-item "Scroll-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693908))) (none menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)) (left menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))) (right menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))) "Scroll-bar") :visible (display-graphic-p)) (showhide-fringe menu-item "Fringe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693915))) (none menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)) (left menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))) (right menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))) (default menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)) (customize menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)) (indicate-empty-lines menu-item "Empty Line Indicators" toggle-indicate-empty-lines :help "Indicate trailing empty lines in fringe, globally" :button (:toggle and (default-boundp (quote indicate-empty-lines)) (default-value (quote indicate-empty-lines)))) (showhide-fringe-ind menu-item "Buffer Boundaries" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693850))) (none menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)) (left menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))) (right menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))) (box menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))) (mixed menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))) (customize menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) "Buffer boundaries") :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe") "Fringe") :visible (display-graphic-p)) (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))) (datetime-separator "--") (showhide-date-time menu-item "Time, Load and Mail" display-time-mode :help "Display time, system load averages and mail status in mode line" :button (:toggle and (default-boundp (quote display-time-mode)) (default-value (quote display-time-mode)))) (showhide-battery menu-item "Battery Status" display-battery-mode :help "Display battery status information in mode line" :button (:toggle and (default-boundp (quote display-battery-mode)) (default-value (quote display-battery-mode)))) (linecolumn-separator "--") (size-indication-mode menu-item "Size Indication" size-indication-mode :help "Show the size of the buffer in the mode line" :button (:toggle and (default-boundp (quote size-indication-mode)) (default-value (quote size-indication-mode)))) (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (column-number-mode menu-item "Column Numbers" column-number-mode :help "Show the current column number in the mode line" :button (:toggle and (default-boundp (quote column-number-mode)) (default-value (quote column-number-mode)))) "Show/Hide")) (menu-system-font menu-item "Use System Font" toggle-use-system-font :help "Use the monospaced font defined by the system" :button (:toggle and (default-boundp (quote font-use-system-font)) (default-value (quote font-use-system-font)))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (custom-separator "--") (save menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above") (package menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages") (customize menu-item "Customize Emacs" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693918))) (customize-themes menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme") (customize menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'") (customize-browse menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups") (separator-3 "--") (customize-saved menu-item "Saved Options" customize-saved :help "Customize previously saved options") (customize-changed-options menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions") (separator-2 "--") (customize-option menu-item "Specific Option..." customize-option :help "Customize value of specific option") (customize-face menu-item "Specific Face..." customize-face :help "Customize attributes of specific face") (customize-group menu-item "Specific Group..." customize-group :help "Customize settings of specific group") (separator-1 "--") (customize-apropos menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list") (customize-apropos-options menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list") (customize-apropos-faces menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list") "Customize")) "Options") :filter ergoemacs-menu--filter) (help-menu menu-item "Help" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693916))) (emacs-tutorial menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs") (emacs-tutorial-language-specific menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)") (emacs-faq menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs") (emacs-news menu-item "Emacs News" view-emacs-news :help "New features of this version") (emacs-known-problems menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs") (emacs-manual-bug menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug") (send-emacs-bug-report menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers") (emacs-psychotherapist menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better") (sep1 "--") (search-documentation menu-item "Search Documentation" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693871))) (emacs-terminology menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual") (lookup-subject-in-emacs-manual menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual") (lookup-subject-in-elisp-manual menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual") (lookup-key-in-manual menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key") (lookup-command-in-manual menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command") (sep1 "--") (find-commands-by-name menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp") (find-options-by-name menu-item "Find Options by Name..." apropos-variable :help "Find variables whose names match a regexp") (find-option-by-value menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp") (find-any-object-by-name menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp") (search-documentation-strings menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp") "Search Documentation")) (describe menu-item "Describe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693882))) (describe-mode menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode") (describe-key-1 menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item") (describe-function menu-item "Describe Function..." describe-function :help "Display documentation of function/command") (describe-variable menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option") (describe-face menu-item "Describe Face..." describe-face :help "Display the properties of a face") (describe-package menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package") (describe-current-display-table menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table") (list-keybindings menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)") (separator-desc-mule "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693896))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support))) (describe-input-method menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method") (describe-coding-system menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))) (describe-coding-system-briefly menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))) (mule-diag menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings") "Describe")) (emacs-manual menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features") (more-manuals menu-item "More Manuals" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693831))) (emacs-lisp-intro menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming") (emacs-lisp-reference menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual") (other-manuals menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals") (lookup-subject-in-all-manuals menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals") (order-emacs-manuals menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation") (sep2 "--") (man menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries") "More Manuals")) (find-emacs-packages menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword") (external-packages menu-item "Finding Extra Packages" menu-bar-help-extra-packages :help "Lisp packages distributed separately for use in Emacs") (sep2 "--") (getting-new-versions menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs") (describe-copying menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)") (describe-no-warranty menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY") (sep4 "--") (about-emacs menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help") (about-gnu-project menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux") "Help") :filter ergoemacs-menu--filter) (mouse-1 . tmm-menubar-mouse) (tools menu-item "Tools" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693913))) (grep menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)") (compile menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors") (shell menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output" :keys "Alt+!") (shell-on-region menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command" :keys "Alt+|") (gdb menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB") (ede menu-item "Project support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)) (semantic menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)) (separator-prog "--") (Syntax\ Checking menu-item "Syntax Checking" (keymap "Syntax Checking" (Enable\ on-the-fly\ syntax\ checking menu-item "Enable on-the-fly syntax checking" flycheck-mode :enable (or flycheck-mode (flycheck-get-checker-for-buffer)) :button (:toggle . flycheck-mode)) (Check\ current\ buffer menu-item "Check current buffer" flycheck-buffer :enable flycheck-mode) (Clear\ errors\ in\ buffer menu-item "Clear errors in buffer" flycheck-clear) (nil menu-item "---") (Go\ to\ next\ error menu-item "Go to next error" flycheck-next-error :enable flycheck-mode) (Go\ to\ previous\ error menu-item "Go to previous error" flycheck-previous-error :enable flycheck-mode) (Show\ all\ errors menu-item "Show all errors" flycheck-list-errors :enable flycheck-mode) (nil-7 menu-item "---") (Copy\ messages\ at\ point menu-item "Copy messages at point" flycheck-copy-errors-as-kill :enable (flycheck-overlays-at (point))) (nil-9 menu-item "---") (Select\ syntax\ checker menu-item "Select syntax checker" flycheck-select-checker :enable flycheck-mode) (Disable\ syntax\ checker menu-item "Disable syntax checker" flycheck-disable-checker :enable flycheck-mode) (Set\ executable\ of\ syntax\ checker menu-item "Set executable of syntax checker" flycheck-set-checker-executable :enable flycheck-mode) (nil-13 menu-item "---") (Describe\ syntax\ checker menu-item "Describe syntax checker" flycheck-describe-checker) (Show\ Flycheck\ version menu-item "Show Flycheck version" flycheck-version) (Read\ the\ Flycheck\ manual menu-item "Read the Flycheck manual" flycheck-info))) (spell menu-item "Spell Checking" ispell-menu-map :filter ergoemacs-menu--filter) (separator-spell "--") (compare menu-item "Compare (Ediff)" menu-bar-ediff-menu :filter ergoemacs-menu--filter) (ediff-merge menu-item "Merge" menu-bar-ediff-merge-menu :filter ergoemacs-menu--filter) (epatch menu-item "Apply Patch" menu-bar-epatch-menu :filter ergoemacs-menu--filter) (separator-compare "--") (vc menu-item "Version Control" vc-menu-map :filter (lambda (bind) (ergoemacs-menu--filter bind (quote vc-menu-map-filter) (quote nil)))) (separator-vc "--") (gnus menu-item "Read Net News (Gnus)" gnus :help "Read network news groups") (rmail menu-item (format "Read Mail (with %s)" (read-mail-item-name)) menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail and reply to it") (compose-mail menu-item (format "Send Mail (with %s)" (send-mail-item-name)) compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Send a mail message") (directory-search menu-item "Directory Search" eudc-tools-menu :filter ergoemacs-menu--filter) (separator-net "--") (calendar menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar") (calc menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator") (simple-calculator menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator") (separator-encryption-decryption "--") (encryption-decryption menu-item "Encryption/Decryption" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693889))) (decrypt-file menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file") (encrypt-file menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file") (verify-file menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file") (sign-file menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file") (separator-file "--") (decrypt-region menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region") (encrypt-region menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region") (verify-region menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region") (sign-region menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region") (separator-keys "--") (list-keys menu-item "List Keys" epa-list-keys :help "Browse your public keyring") (import-keys menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file") (import-keys-region menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region") (export-keys menu-item "Export Keys" epa-export-keys :help "Export public keys to a file") (insert-keys menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point") "Encryption/Decryption") :filter ergoemacs-menu--filter) (separator-games "--") (games menu-item "Games" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693922))) (5x5 menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board") (adventure menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs") (black-box menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays") (bubbles menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves") (gomoku menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)") (hanoi menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs") (land menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks") (life menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves") (mult menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication") (pong menu-item "Pong" pong :help "Bounce the ball to your opponent") (snake menu-item "Snake" snake :help "Move snake around avoiding collisions") (solitaire menu-item "Solitaire" solitaire :help "Get rid of all the stones") (tetris menu-item "Tetris" tetris :help "Falling blocks game") (zone menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle") "Games") :filter ergoemacs-menu--filter) "Tools") :filter ergoemacs-menu--filter) (buffer menu-item "Buffers" (keymap "Select Buffer" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693878))) [("*scratch*  " (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*scratch*")) ("*Messages*  *" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Messages*"))] (command-separator "--") (next-buffer menu-item "Next Buffer" next-buffer :help "Switch to the \"next\" buffer in a cyclic order" :keys "XF86Forward") (previous-buffer menu-item "Previous Buffer" previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order" :keys "XF86Back") (select-named-buffer menu-item "Select Named Buffer..." switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window" :keys #("Ctrl+X b" 0 4 (face ergoemacs-display-key-face))) (list-all-buffers menu-item "List All Buffers" list-buffers :help "Pop up a window listing all Emacs buffers" :keys #("Ctrl+X Ctrl+B" 0 4 (face ergoemacs-display-key-face) 7 11 (face ergoemacs-display-key-face)))) :filter ergoemacs-menu--filter) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693751)))) global-composed-list-60660ac5d9bb96506993807c6dd481e3 ((keymap (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (67108873 . backward-paragraph) (9 . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char us))))) (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word us))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-undefined us)))) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (27 keymap (100 . ergoemacs-map-undefined) (102 . ergoemacs-map-undefined) (98 . ergoemacs-map-undefined)))) global-ret-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-unbound us)))) keymap (keymap (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (67108873 . backward-paragraph) (9 . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char us))))) (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word us))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-undefined us)))) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (27 keymap (100 . ergoemacs-map-undefined) (102 . ergoemacs-map-undefined) (98 . ergoemacs-map-undefined))) keymap #^[nil nil keymap 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mode-specific-command-prefix delete-char move-end-of-line forward-char keyboard-quit help-command indent-for-tab-command newline-and-indent kill-line recenter-top-bottom newline next-line open-line previous-line quoted-insert isearch-backward isearch-forward transpose-chars universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil undo self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] #^^[1 0 #^^[2 0 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mode-specific-command-prefix delete-char move-end-of-line forward-char keyboard-quit help-command indent-for-tab-command newline-and-indent kill-line recenter-top-bottom newline next-line open-line previous-line quoted-insert isearch-backward isearch-forward transpose-chars universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil undo self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693952))) (S-mouse-3 . kmacro-end-call-mouse) (C-mouse-5 . mwheel-scroll) (S-mouse-5 . mwheel-scroll) (mouse-5 . mwheel-scroll) (C-mouse-4 . mwheel-scroll) (S-mouse-4 . mwheel-scroll) (mouse-4 . mwheel-scroll) (paste . clipboard-yank) (copy . clipboard-kill-ring-save) (cut . clipboard-kill-region) (f18 . clipboard-yank) (f16 . clipboard-kill-ring-save) (f20 . clipboard-kill-region) (tool-bar menu-item "tool bar" ignore :filter tool-bar-make-keymap) (f10 . menu-bar-open) (vertical-line keymap (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-vertical-line) (C-mouse-2 . mouse-split-window-vertically)) (vertical-scroll-bar keymap (mouse-1 . scroll-bar-toolkit-scroll) (C-mouse-2 . mouse-split-window-vertically)) (header-line keymap (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-header-line)) (mode-line keymap (C-mouse-2 . mouse-split-window-horizontally) (mouse-3 . mouse-delete-window) (mouse-2 . mouse-delete-other-windows) (down-mouse-1 . mouse-drag-mode-line) (drag-mouse-1 . mouse-select-window) (mouse-1 . mouse-select-window)) (C-down-mouse-3 menu-item "Menu Bar" ignore :filter (lambda (_) (if (zerop (or (frame-parameter nil (quote menu-bar-lines)) 0)) (mouse-menu-bar-map) (mouse-menu-major-mode-map)))) (S-down-mouse-1 . mouse-appearance-menu) (C-down-mouse-1 . mouse-buffer-menu) (mouse-3 . mouse-save-then-kill) (mouse-2 . mouse-yank-primary) (triple-mouse-1 . mouse-set-point) (double-mouse-1 . mouse-set-point) (drag-mouse-1 . mouse-set-region) (mouse-1 . mouse-set-point) (down-mouse-1 . mouse-drag-region) (M-mouse-2 . mouse-yank-secondary) (M-mouse-3 . mouse-secondary-save-then-kill) (M-down-mouse-1 . mouse-drag-secondary) (M-drag-mouse-1 . mouse-set-secondary) (M-mouse-1 . mouse-start-secondary) (C-down-mouse-2 . facemenu-menu) (compose-last-chars . compose-last-chars) (f1 . help-command) (help . help-command) (f2 . 2C-command) (menu-bar keymap (file menu-item "File" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693869))) (new-file menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file") (open-file menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer") (dired menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files") (insert-file menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer") (kill-buffer menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer") (separator-save "--") (save-buffer menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file") (write-file menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file") (revert-buffer menu-item "Revert Buffer" revert-buffer :enable (or revert-buffer-function revert-buffer-insert-file-contents-function (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file") (recover-session menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session") (separator-print "--") (print-buffer menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings") (print-region menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position") (ps-print-buffer-faces menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer") (ps-print-region-faces menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer") (ps-print-buffer menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer") (ps-print-region menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer") (separator-window "--") (new-window-below menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one") (new-window-on-right menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one") (one-window menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame") (separator-frame "--") (make-frame menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame") (make-frame-on-display menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display") (delete-this-frame menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame") (separator-exit "--") (exit-emacs menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit") "File") :filter ergoemacs-menu--filter) (edit menu-item "Edit" (keymap (redo) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693940))) (undo) (cut menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position" :keys #("Ctrl+W" 0 4 (face ergoemacs-display-key-face))) (copy menu-item "Copy" kill-ring-save :enable mark-active :help "Copy text in region between mark and current position" :keys "\\[kill-ring-save]") (paste menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied" :keys #("Ctrl+Y" 0 4 (face ergoemacs-display-key-face))) (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it" :filter ergoemacs-menu--filter) (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy" :keys #("Ctrl+X h" 0 4 (face ergoemacs-display-key-face))) (separator-search "--") (search menu-item "Search" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693874))) (search-forward menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string") (search-backward menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string") (re-search-forward menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression") (re-search-backward menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression") (separator-repeat-search "--") (repeat-search-fwd menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-search-back menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards") (separator-tag-search "--") (tags-srch menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files") (tags-continue menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation") (separator-tag-isearch "--") (i-search menu-item "Incremental Search" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693928))) (isearch-forward menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it") (isearch-forward-regexp menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (isearch-backward-regexp menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") "Incremental Search")) "Search") :filter ergoemacs-menu--filter) (replace menu-item "Replace" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693950))) (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace") :filter ergoemacs-menu--filter) (goto menu-item "Go To" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693929))) (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (go-to-pos menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N") (beg-of-buf menu-item "Goto Beginning of Buffer" beginning-of-buffer) (end-of-buf menu-item "Goto End of Buffer" end-of-buffer) (separator-tags "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") :filter ergoemacs-menu--filter) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map :filter ergoemacs-menu--filter) (separator-bookmark "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu :filter ergoemacs-menu--filter) "Edit") :filter ergoemacs-menu--filter) (options menu-item "Options" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693946))) (transient-mark-mode menu-item "Highlight Active Region" transient-mark-mode :enable (not cua-mode) :help "Make text in active region stand out in color (Transient Mark mode)" :button (:toggle and (default-boundp (quote transient-mark-mode)) (default-value (quote transient-mark-mode)))) (highlight-paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :help "Highlight matching/mismatched parentheses at cursor (Show Paren mode)" :button (:toggle and (default-boundp (quote show-paren-mode)) (default-value (quote show-paren-mode)))) (highlight-separator "--") (line-wrapping menu-item "Line Wrapping in This Buffer" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693857))) (window-wrap menu-item "Wrap at Window Edge" #[nil "\203 \300\303!\210\304
\205 \305\306!\207" [visual-line-mode word-wrap truncate-lines 0 nil toggle-truncate-lines -1] 2 nil nil] :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (truncate menu-item "Truncate Long Lines" #[nil "\203 \300\302!\210\303\304\305!\207" [visual-line-mode word-wrap 0 nil toggle-truncate-lines 1] 2 nil nil] :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (word-wrap menu-item "Word Wrap (Visual Line mode)" #[nil "\204 \300\301!\210\302\303!\207" [visual-line-mode 1 message "Visual-Line mode enabled"] 2 nil nil] :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)) "Line Wrapping")) (auto-fill-mode menu-item "Auto Fill in Text Modes" menu-bar-text-mode-auto-fill :help "Automatically fill text while typing (Auto Fill mode)" :button (:toggle if (listp text-mode-hook) (member (quote turn-on-auto-fill) text-mode-hook) (eq (quote turn-on-auto-fill) text-mode-hook))) (case-fold-search menu-item "Ignore Case for Search" toggle-case-fold-search :help "Ignore letter-case in search commands" :button (:toggle and (default-boundp (quote case-fold-search)) (default-value (quote case-fold-search)))) (cua-emulation-mode menu-item "Shift movement mark region (CUA)" cua-mode :visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys)) :help "Use shifted movement keys to set and extend the region" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (cua-mode menu-item "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" cua-mode :visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys) :help "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (edit-options-separator "--") (uniquify menu-item "Use Directory Names in Buffer Names" toggle-uniquify-buffer-names :help "Uniquify buffer names by adding parent directory names" :button (:toggle and (default-boundp (quote uniquify-buffer-name-style)) (default-value (quote uniquify-buffer-name-style)))) (save-place menu-item "Save Place in Files between Sessions" toggle-save-place-globally :help "Visit files of previous session when restarting Emacs" :button (:toggle and (default-boundp (quote save-place)) (default-value (quote save-place)))) (cursor-separator "--") (blink-cursor-mode menu-item "Blink Cursor" blink-cursor-mode :help "Whether the cursor blinks (Blink Cursor mode)" :button (:toggle and (default-boundp (quote blink-cursor-mode)) (default-value (quote blink-cursor-mode)))) (debugger-separator "--") (debug-on-error menu-item "Enter Debugger on Error" toggle-debug-on-error :help "Enter Lisp debugger when an error is signaled" :button (:toggle and (default-boundp (quote debug-on-error)) (default-value (quote debug-on-error)))) (debug-on-quit menu-item "Enter Debugger on Quit/C-g" toggle-debug-on-quit :help "Enter Lisp debugger when C-g is pressed" :button (:toggle and (default-boundp (quote debug-on-quit)) (default-value (quote debug-on-quit)))) (mule-separator "--") (mule menu-item "Multilingual Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693863))) (set-language-environment menu-item "Set Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693854))) (Default menu-item "Default" setup-specified-language-environment) "Set Language Environment" (Chinese "Chinese" . setup-chinese-environment-map) (Cyrillic "Cyrillic" . setup-cyrillic-environment-map) (Indian "Indian" . setup-indian-environment-map) (Sinhala "Sinhala" . setup-specified-language-environment) (English "English" . setup-specified-language-environment) (ASCII "ASCII" . setup-specified-language-environment) (Ethiopic "Ethiopic" . setup-specified-language-environment) (European "European" . setup-european-environment-map) (Turkish "Turkish" . setup-specified-language-environment) (Greek "Greek" . setup-specified-language-environment) (Hebrew "Hebrew" . setup-specified-language-environment) (Windows-1255 "Windows-1255" . setup-specified-language-environment) (Japanese "Japanese" . setup-specified-language-environment) (Korean "Korean" . setup-specified-language-environment) (Lao "Lao" . setup-specified-language-environment) (TaiViet "TaiViet" . setup-specified-language-environment) (Thai "Thai" . setup-specified-language-environment) (Tibetan "Tibetan" . setup-specified-language-environment) (Vietnamese "Vietnamese" . setup-specified-language-environment) (IPA "IPA" . setup-specified-language-environment) (Arabic "Arabic" . setup-specified-language-environment) (Persian "Persian" . setup-specified-language-environment) (UTF-8 "UTF-8" . setup-specified-language-environment) (Khmer "Khmer" . setup-specified-language-environment) (Burmese "Burmese" . setup-specified-language-environment) (Cham "Cham" . setup-specified-language-environment))) (separator-mule "--") (toggle-input-method menu-item "Toggle Input Method" toggle-input-method) (set-input-method menu-item "Select Input Method..." set-input-method) (separator-input-method "--") (set-various-coding-system menu-item "Set Coding Systems" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693904))) (universal-coding-system-argument menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command") (separator-1 "--") (set-buffer-file-coding-system menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved") (revert-buffer-with-coding-system menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system") (set-file-name-coding-system menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names") (separator-2 "--") (set-keyboard-coding-system menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input") (set-terminal-coding-system menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output") (separator-3 "--") (set-selection-coding-system menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard") (set-next-selection-coding-system menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation") (set-buffer-process-coding-system menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer") "Set Coding System") :enable (default-value (quote enable-multibyte-characters))) (view-hello-file menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets") (separator-coding-system "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693896))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support)) :help "Show multilingual settings for a specific language") (describe-input-method menu-item "Describe Input Method" describe-input-method) (describe-coding-system menu-item "Describe Coding System..." describe-coding-system) (list-character-sets menu-item "List Character Sets" list-character-sets :help "Show table of available character sets") (mule-diag menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings") "Mule (Multilingual Environment)")) (showhide-separator "--") (showhide menu-item "Show/Hide" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693864))) (showhide-tool-bar menu-item "Tool-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693860))) (showhide-tool-bar-none menu-item "None" menu-bar-showhide-tool-bar-menu-customize-disable :help "Turn tool-bar off" :visible (display-graphic-p) :button (:radio eq tool-bar-mode nil)) (showhide-tool-bar-top menu-item "On the Top" menu-bar-showhide-tool-bar-menu-customize-enable-top :help "Tool-bar at the top" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote top)))) (showhide-tool-bar-bottom menu-item "On the Bottom" menu-bar-showhide-tool-bar-menu-customize-enable-bottom :help "Tool-bar at the bottom" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote bottom)))) (showhide-tool-bar-right menu-item "On the Right" menu-bar-showhide-tool-bar-menu-customize-enable-right :help "Tool-bar at the right side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote right)))) (showhide-tool-bar-left menu-item "On the Left" menu-bar-showhide-tool-bar-menu-customize-enable-left :help "Tool-bar at the left side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote left)))) "Tool-bar") :visible (display-graphic-p)) (menu-bar-mode menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))) (showhide-tooltip-mode menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)) (showhide-scroll-bar menu-item "Scroll-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693908))) (none menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)) (left menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))) (right menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))) "Scroll-bar") :visible (display-graphic-p)) (showhide-fringe menu-item "Fringe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693915))) (none menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)) (left menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))) (right menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))) (default menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)) (customize menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)) (indicate-empty-lines menu-item "Empty Line Indicators" toggle-indicate-empty-lines :help "Indicate trailing empty lines in fringe, globally" :button (:toggle and (default-boundp (quote indicate-empty-lines)) (default-value (quote indicate-empty-lines)))) (showhide-fringe-ind menu-item "Buffer Boundaries" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693850))) (none menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)) (left menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))) (right menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))) (box menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))) (mixed menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))) (customize menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) "Buffer boundaries") :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe") "Fringe") :visible (display-graphic-p)) (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))) (datetime-separator "--") (showhide-date-time menu-item "Time, Load and Mail" display-time-mode :help "Display time, system load averages and mail status in mode line" :button (:toggle and (default-boundp (quote display-time-mode)) (default-value (quote display-time-mode)))) (showhide-battery menu-item "Battery Status" display-battery-mode :help "Display battery status information in mode line" :button (:toggle and (default-boundp (quote display-battery-mode)) (default-value (quote display-battery-mode)))) (linecolumn-separator "--") (size-indication-mode menu-item "Size Indication" size-indication-mode :help "Show the size of the buffer in the mode line" :button (:toggle and (default-boundp (quote size-indication-mode)) (default-value (quote size-indication-mode)))) (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (column-number-mode menu-item "Column Numbers" column-number-mode :help "Show the current column number in the mode line" :button (:toggle and (default-boundp (quote column-number-mode)) (default-value (quote column-number-mode)))) "Show/Hide")) (menu-system-font menu-item "Use System Font" toggle-use-system-font :help "Use the monospaced font defined by the system" :button (:toggle and (default-boundp (quote font-use-system-font)) (default-value (quote font-use-system-font)))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (custom-separator "--") (save menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above") (package menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages") (customize menu-item "Customize Emacs" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693918))) (customize-themes menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme") (customize menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'") (customize-browse menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups") (separator-3 "--") (customize-saved menu-item "Saved Options" customize-saved :help "Customize previously saved options") (customize-changed-options menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions") (separator-2 "--") (customize-option menu-item "Specific Option..." customize-option :help "Customize value of specific option") (customize-face menu-item "Specific Face..." customize-face :help "Customize attributes of specific face") (customize-group menu-item "Specific Group..." customize-group :help "Customize settings of specific group") (separator-1 "--") (customize-apropos menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list") (customize-apropos-options menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list") (customize-apropos-faces menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list") "Customize")) "Options") :filter ergoemacs-menu--filter) (help-menu menu-item "Help" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693916))) (emacs-tutorial menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs") (emacs-tutorial-language-specific menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)") (emacs-faq menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs") (emacs-news menu-item "Emacs News" view-emacs-news :help "New features of this version") (emacs-known-problems menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs") (emacs-manual-bug menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug") (send-emacs-bug-report menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers") (emacs-psychotherapist menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better") (sep1 "--") (search-documentation menu-item "Search Documentation" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693871))) (emacs-terminology menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual") (lookup-subject-in-emacs-manual menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual") (lookup-subject-in-elisp-manual menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual") (lookup-key-in-manual menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key") (lookup-command-in-manual menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command") (sep1 "--") (find-commands-by-name menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp") (find-options-by-name menu-item "Find Options by Name..." apropos-variable :help "Find variables whose names match a regexp") (find-option-by-value menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp") (find-any-object-by-name menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp") (search-documentation-strings menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp") "Search Documentation")) (describe menu-item "Describe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693882))) (describe-mode menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode") (describe-key-1 menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item") (describe-function menu-item "Describe Function..." describe-function :help "Display documentation of function/command") (describe-variable menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option") (describe-face menu-item "Describe Face..." describe-face :help "Display the properties of a face") (describe-package menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package") (describe-current-display-table menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table") (list-keybindings menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)") (separator-desc-mule "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693896))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support))) (describe-input-method menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method") (describe-coding-system menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))) (describe-coding-system-briefly menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))) (mule-diag menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings") "Describe")) (emacs-manual menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features") (more-manuals menu-item "More Manuals" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693831))) (emacs-lisp-intro menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming") (emacs-lisp-reference menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual") (other-manuals menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals") (lookup-subject-in-all-manuals menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals") (order-emacs-manuals menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation") (sep2 "--") (man menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries") "More Manuals")) (find-emacs-packages menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword") (external-packages menu-item "Finding Extra Packages" menu-bar-help-extra-packages :help "Lisp packages distributed separately for use in Emacs") (sep2 "--") (getting-new-versions menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs") (describe-copying menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)") (describe-no-warranty menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY") (sep4 "--") (about-emacs menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help") (about-gnu-project menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux") "Help") :filter ergoemacs-menu--filter) (mouse-1 . tmm-menubar-mouse) (tools menu-item "Tools" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693913))) (grep menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)") (compile menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors") (shell menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output" :keys "Alt+!") (shell-on-region menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command" :keys "Alt+|") (gdb menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB") (ede menu-item "Project support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)) (semantic menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)) (separator-prog "--") (Syntax\ Checking menu-item "Syntax Checking" (keymap "Syntax Checking" (Enable\ on-the-fly\ syntax\ checking menu-item "Enable on-the-fly syntax checking" flycheck-mode :enable (or flycheck-mode (flycheck-get-checker-for-buffer)) :button (:toggle . flycheck-mode)) (Check\ current\ buffer menu-item "Check current buffer" flycheck-buffer :enable flycheck-mode) (Clear\ errors\ in\ buffer menu-item "Clear errors in buffer" flycheck-clear) (nil menu-item "---") (Go\ to\ next\ error menu-item "Go to next error" flycheck-next-error :enable flycheck-mode) (Go\ to\ previous\ error menu-item "Go to previous error" flycheck-previous-error :enable flycheck-mode) (Show\ all\ errors menu-item "Show all errors" flycheck-list-errors :enable flycheck-mode) (nil-7 menu-item "---") (Copy\ messages\ at\ point menu-item "Copy messages at point" flycheck-copy-errors-as-kill :enable (flycheck-overlays-at (point))) (nil-9 menu-item "---") (Select\ syntax\ checker menu-item "Select syntax checker" flycheck-select-checker :enable flycheck-mode) (Disable\ syntax\ checker menu-item "Disable syntax checker" flycheck-disable-checker :enable flycheck-mode) (Set\ executable\ of\ syntax\ checker menu-item "Set executable of syntax checker" flycheck-set-checker-executable :enable flycheck-mode) (nil-13 menu-item "---") (Describe\ syntax\ checker menu-item "Describe syntax checker" flycheck-describe-checker) (Show\ Flycheck\ version menu-item "Show Flycheck version" flycheck-version) (Read\ the\ Flycheck\ manual menu-item "Read the Flycheck manual" flycheck-info))) (spell menu-item "Spell Checking" ispell-menu-map :filter ergoemacs-menu--filter) (separator-spell "--") (compare menu-item "Compare (Ediff)" menu-bar-ediff-menu :filter ergoemacs-menu--filter) (ediff-merge menu-item "Merge" menu-bar-ediff-merge-menu :filter ergoemacs-menu--filter) (epatch menu-item "Apply Patch" menu-bar-epatch-menu :filter ergoemacs-menu--filter) (separator-compare "--") (vc menu-item "Version Control" vc-menu-map :filter (lambda (bind) (ergoemacs-menu--filter bind (quote vc-menu-map-filter) (quote nil)))) (separator-vc "--") (gnus menu-item "Read Net News (Gnus)" gnus :help "Read network news groups") (rmail menu-item (format "Read Mail (with %s)" (read-mail-item-name)) menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail and reply to it") (compose-mail menu-item (format "Send Mail (with %s)" (send-mail-item-name)) compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Send a mail message") (directory-search menu-item "Directory Search" eudc-tools-menu :filter ergoemacs-menu--filter) (separator-net "--") (calendar menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar") (calc menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator") (simple-calculator menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator") (separator-encryption-decryption "--") (encryption-decryption menu-item "Encryption/Decryption" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693889))) (decrypt-file menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file") (encrypt-file menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file") (verify-file menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file") (sign-file menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file") (separator-file "--") (decrypt-region menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region") (encrypt-region menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region") (verify-region menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region") (sign-region menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region") (separator-keys "--") (list-keys menu-item "List Keys" epa-list-keys :help "Browse your public keyring") (import-keys menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file") (import-keys-region menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region") (export-keys menu-item "Export Keys" epa-export-keys :help "Export public keys to a file") (insert-keys menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point") "Encryption/Decryption") :filter ergoemacs-menu--filter) (separator-games "--") (games menu-item "Games" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693922))) (5x5 menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board") (adventure menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs") (black-box menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays") (bubbles menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves") (gomoku menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)") (hanoi menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs") (land menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks") (life menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves") (mult menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication") (pong menu-item "Pong" pong :help "Bounce the ball to your opponent") (snake menu-item "Snake" snake :help "Move snake around avoiding collisions") (solitaire menu-item "Solitaire" solitaire :help "Get rid of all the stones") (tetris menu-item "Tetris" tetris :help "Falling blocks game") (zone menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle") "Games") :filter ergoemacs-menu--filter) "Tools") :filter ergoemacs-menu--filter) (buffer menu-item "Buffers" (keymap "Select Buffer" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693878))) [("*scratch*  " (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*scratch*")) ("*Messages*  *" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Messages*"))] (command-separator "--") (next-buffer menu-item "Next Buffer" next-buffer :help "Switch to the \"next\" buffer in a cyclic order" :keys "XF86Forward") (previous-buffer menu-item "Previous Buffer" previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order" :keys "XF86Back") (select-named-buffer menu-item "Select Named Buffer..." switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window" :keys #("Ctrl+X b" 0 4 (face ergoemacs-display-key-face))) (list-all-buffers menu-item "List All Buffers" list-buffers :help "Pop up a window listing all Emacs buffers" :keys #("Ctrl+X Ctrl+B" 0 4 (face ergoemacs-display-key-face) 7 11 (face ergoemacs-display-key-face)))) :filter ergoemacs-menu--filter) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693751)))) (f4 . kmacro-end-or-call-macro) (f3 . kmacro-start-macro-or-insert-counter) (C-M-end . end-of-defun) (C-M-home . beginning-of-defun) (C-M-down . down-list) (C-M-up . backward-up-list) (C-M-right . forward-sexp) (C-M-left . backward-sexp) (S-delete . kill-region) (C-backspace . backward-kill-word) (C-delete . kill-word) (C-left . left-word) (C-right . right-word) (M-left . left-word) (M-right . right-word) (mouse-movement . ignore) (deletechar . delete-forward-char) (deleteline . kill-line) (insertline . open-line) (open . find-file) (again . repeat-complex-command) (redo . repeat-complex-command) (undo . undo) (S-insertchar . yank) (C-insertchar . kill-ring-save) (insertchar . overwrite-mode) (S-insert . yank) (C-insert . kill-ring-save) (insert . overwrite-mode) (execute . execute-extended-command) (M-begin . beginning-of-buffer-other-window) (begin . beginning-of-buffer) (M-end . end-of-buffer-other-window) (C-end . end-of-buffer) (end . move-end-of-line) (M-prior . scroll-other-window-down) (M-next . scroll-other-window) (C-next . scroll-left) (C-prior . scroll-right) (C-down . forward-paragraph) (C-up . backward-paragraph) (next . scroll-up-command) (prior . scroll-down-command) (down . next-line) (right . right-char) (up . previous-line) (left . left-char) (M-home . beginning-of-buffer-other-window) (C-home . beginning-of-buffer) (home . move-beginning-of-line) (C-S-backspace . kill-whole-line) (find . search-forward) (menu . execute-extended-command) (67108896 . set-mark-command) (67108909 . negative-argument) (67108921 . digit-argument) (67108920 . digit-argument) (67108919 . digit-argument) (67108918 . digit-argument) (67108917 . digit-argument) (67108916 . digit-argument) (67108915 . digit-argument) (67108914 . digit-argument) (67108913 . digit-argument) (67108912 . digit-argument) (XF86Back . previous-buffer) (XF86Forward . next-buffer) (67108911 . undo) (make-frame-visible . ignore-event) (iconify-frame . ignore-event) (delete-frame . handle-delete-frame) (select-window . handle-select-window) (switch-frame . handle-switch-frame)) ergoemacs-map---60660ac5d9bb96506993807c6dd481e3 #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ([27 114] kill-word [27 101] backward-kill-word [27 111] forward-word [27 117] backward-word [ergoemacs-labeled] (lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char us)))) [27 102] delete-char [27 100] delete-backward-char [27 32] set-mark-command [27 11] forward-paragraph [27 67108873] backward-paragraph [27 9] backward-paragraph [27 12] right-word [27 10] left-word [27 107] next-line [27 105] previous-line [27 108] forward-char [27 106] backward-char)) undefined-keys-60660ac5d9bb96506993807c6dd481e3 ([134217826] [134217830] [134217828] [2] [6] [16] [14] [67108896] [4]) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-unbound us)))) keymap (keymap (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (67108873 . backward-paragraph) (9 . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char us))))) (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word us))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-undefined us)))) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (27 keymap (100 . ergoemacs-map-undefined) (102 . ergoemacs-map-undefined) (98 . ergoemacs-map-undefined))) keymap #^[nil nil keymap 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mode-specific-command-prefix delete-char move-end-of-line forward-char keyboard-quit help-command indent-for-tab-command newline-and-indent kill-line recenter-top-bottom newline next-line open-line previous-line quoted-insert isearch-backward isearch-forward transpose-chars universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil undo self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] #^^[1 0 #^^[2 0 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mode-specific-command-prefix delete-char move-end-of-line forward-char keyboard-quit help-command indent-for-tab-command newline-and-indent kill-line recenter-top-bottom newline next-line open-line previous-line quoted-insert isearch-backward isearch-forward transpose-chars universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil undo self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693952))) (S-mouse-3 . kmacro-end-call-mouse) (C-mouse-5 . mwheel-scroll) (S-mouse-5 . mwheel-scroll) (mouse-5 . mwheel-scroll) (C-mouse-4 . mwheel-scroll) (S-mouse-4 . mwheel-scroll) (mouse-4 . mwheel-scroll) (paste . clipboard-yank) (copy . clipboard-kill-ring-save) (cut . clipboard-kill-region) (f18 . clipboard-yank) (f16 . clipboard-kill-ring-save) (f20 . clipboard-kill-region) (tool-bar menu-item "tool bar" ignore :filter tool-bar-make-keymap) (f10 . menu-bar-open) (vertical-line keymap (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-vertical-line) (C-mouse-2 . mouse-split-window-vertically)) (vertical-scroll-bar keymap (mouse-1 . scroll-bar-toolkit-scroll) (C-mouse-2 . mouse-split-window-vertically)) (header-line keymap (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-header-line)) (mode-line keymap (C-mouse-2 . mouse-split-window-horizontally) (mouse-3 . mouse-delete-window) (mouse-2 . mouse-delete-other-windows) (down-mouse-1 . mouse-drag-mode-line) (drag-mouse-1 . mouse-select-window) (mouse-1 . mouse-select-window)) (C-down-mouse-3 menu-item "Menu Bar" ignore :filter (lambda (_) (if (zerop (or (frame-parameter nil (quote menu-bar-lines)) 0)) (mouse-menu-bar-map) (mouse-menu-major-mode-map)))) (S-down-mouse-1 . mouse-appearance-menu) (C-down-mouse-1 . mouse-buffer-menu) (mouse-3 . mouse-save-then-kill) (mouse-2 . mouse-yank-primary) (triple-mouse-1 . mouse-set-point) (double-mouse-1 . mouse-set-point) (drag-mouse-1 . mouse-set-region) (mouse-1 . mouse-set-point) (down-mouse-1 . mouse-drag-region) (M-mouse-2 . mouse-yank-secondary) (M-mouse-3 . mouse-secondary-save-then-kill) (M-down-mouse-1 . mouse-drag-secondary) (M-drag-mouse-1 . mouse-set-secondary) (M-mouse-1 . mouse-start-secondary) (C-down-mouse-2 . facemenu-menu) (compose-last-chars . compose-last-chars) (f1 . help-command) (help . help-command) (f2 . 2C-command) (menu-bar keymap (file menu-item "File" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693869))) (new-file menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file") (open-file menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer") (dired menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files") (insert-file menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer") (kill-buffer menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer") (separator-save "--") (save-buffer menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file") (write-file menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file") (revert-buffer menu-item "Revert Buffer" revert-buffer :enable (or revert-buffer-function revert-buffer-insert-file-contents-function (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file") (recover-session menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session") (separator-print "--") (print-buffer menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings") (print-region menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position") (ps-print-buffer-faces menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer") (ps-print-region-faces menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer") (ps-print-buffer menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer") (ps-print-region menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer") (separator-window "--") (new-window-below menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one") (new-window-on-right menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one") (one-window menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame") (separator-frame "--") (make-frame menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame") (make-frame-on-display menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display") (delete-this-frame menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame") (separator-exit "--") (exit-emacs menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit") "File") :filter ergoemacs-menu--filter) (edit menu-item "Edit" (keymap (redo) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693940))) (undo) (cut menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position" :keys #("Ctrl+W" 0 4 (face ergoemacs-display-key-face))) (copy menu-item "Copy" kill-ring-save :enable mark-active :help "Copy text in region between mark and current position" :keys "\\[kill-ring-save]") (paste menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied" :keys #("Ctrl+Y" 0 4 (face ergoemacs-display-key-face))) (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it" :filter ergoemacs-menu--filter) (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy" :keys #("Ctrl+X h" 0 4 (face ergoemacs-display-key-face))) (separator-search "--") (search menu-item "Search" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693874))) (search-forward menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string") (search-backward menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string") (re-search-forward menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression") (re-search-backward menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression") (separator-repeat-search "--") (repeat-search-fwd menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-search-back menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards") (separator-tag-search "--") (tags-srch menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files") (tags-continue menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation") (separator-tag-isearch "--") (i-search menu-item "Incremental Search" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693928))) (isearch-forward menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it") (isearch-forward-regexp menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (isearch-backward-regexp menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") "Incremental Search")) "Search") :filter ergoemacs-menu--filter) (replace menu-item "Replace" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693950))) (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace") :filter ergoemacs-menu--filter) (goto menu-item "Go To" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693929))) (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (go-to-pos menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N") (beg-of-buf menu-item "Goto Beginning of Buffer" beginning-of-buffer) (end-of-buf menu-item "Goto End of Buffer" end-of-buffer) (separator-tags "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") :filter ergoemacs-menu--filter) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map :filter ergoemacs-menu--filter) (separator-bookmark "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu :filter ergoemacs-menu--filter) "Edit") :filter ergoemacs-menu--filter) (options menu-item "Options" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693946))) (transient-mark-mode menu-item "Highlight Active Region" transient-mark-mode :enable (not cua-mode) :help "Make text in active region stand out in color (Transient Mark mode)" :button (:toggle and (default-boundp (quote transient-mark-mode)) (default-value (quote transient-mark-mode)))) (highlight-paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :help "Highlight matching/mismatched parentheses at cursor (Show Paren mode)" :button (:toggle and (default-boundp (quote show-paren-mode)) (default-value (quote show-paren-mode)))) (highlight-separator "--") (line-wrapping menu-item "Line Wrapping in This Buffer" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693857))) (window-wrap menu-item "Wrap at Window Edge" #[nil "\203 \300\303!\210\304
\205 \305\306!\207" [visual-line-mode word-wrap truncate-lines 0 nil toggle-truncate-lines -1] 2 nil nil] :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (truncate menu-item "Truncate Long Lines" #[nil "\203 \300\302!\210\303\304\305!\207" [visual-line-mode word-wrap 0 nil toggle-truncate-lines 1] 2 nil nil] :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (word-wrap menu-item "Word Wrap (Visual Line mode)" #[nil "\204 \300\301!\210\302\303!\207" [visual-line-mode 1 message "Visual-Line mode enabled"] 2 nil nil] :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)) "Line Wrapping")) (auto-fill-mode menu-item "Auto Fill in Text Modes" menu-bar-text-mode-auto-fill :help "Automatically fill text while typing (Auto Fill mode)" :button (:toggle if (listp text-mode-hook) (member (quote turn-on-auto-fill) text-mode-hook) (eq (quote turn-on-auto-fill) text-mode-hook))) (case-fold-search menu-item "Ignore Case for Search" toggle-case-fold-search :help "Ignore letter-case in search commands" :button (:toggle and (default-boundp (quote case-fold-search)) (default-value (quote case-fold-search)))) (cua-emulation-mode menu-item "Shift movement mark region (CUA)" cua-mode :visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys)) :help "Use shifted movement keys to set and extend the region" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (cua-mode menu-item "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" cua-mode :visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys) :help "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (edit-options-separator "--") (uniquify menu-item "Use Directory Names in Buffer Names" toggle-uniquify-buffer-names :help "Uniquify buffer names by adding parent directory names" :button (:toggle and (default-boundp (quote uniquify-buffer-name-style)) (default-value (quote uniquify-buffer-name-style)))) (save-place menu-item "Save Place in Files between Sessions" toggle-save-place-globally :help "Visit files of previous session when restarting Emacs" :button (:toggle and (default-boundp (quote save-place)) (default-value (quote save-place)))) (cursor-separator "--") (blink-cursor-mode menu-item "Blink Cursor" blink-cursor-mode :help "Whether the cursor blinks (Blink Cursor mode)" :button (:toggle and (default-boundp (quote blink-cursor-mode)) (default-value (quote blink-cursor-mode)))) (debugger-separator "--") (debug-on-error menu-item "Enter Debugger on Error" toggle-debug-on-error :help "Enter Lisp debugger when an error is signaled" :button (:toggle and (default-boundp (quote debug-on-error)) (default-value (quote debug-on-error)))) (debug-on-quit menu-item "Enter Debugger on Quit/C-g" toggle-debug-on-quit :help "Enter Lisp debugger when C-g is pressed" :button (:toggle and (default-boundp (quote debug-on-quit)) (default-value (quote debug-on-quit)))) (mule-separator "--") (mule menu-item "Multilingual Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693863))) (set-language-environment menu-item "Set Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693854))) (Default menu-item "Default" setup-specified-language-environment) "Set Language Environment" (Chinese "Chinese" . setup-chinese-environment-map) (Cyrillic "Cyrillic" . setup-cyrillic-environment-map) (Indian "Indian" . setup-indian-environment-map) (Sinhala "Sinhala" . setup-specified-language-environment) (English "English" . setup-specified-language-environment) (ASCII "ASCII" . setup-specified-language-environment) (Ethiopic "Ethiopic" . setup-specified-language-environment) (European "European" . setup-european-environment-map) (Turkish "Turkish" . setup-specified-language-environment) (Greek "Greek" . setup-specified-language-environment) (Hebrew "Hebrew" . setup-specified-language-environment) (Windows-1255 "Windows-1255" . setup-specified-language-environment) (Japanese "Japanese" . setup-specified-language-environment) (Korean "Korean" . setup-specified-language-environment) (Lao "Lao" . setup-specified-language-environment) (TaiViet "TaiViet" . setup-specified-language-environment) (Thai "Thai" . setup-specified-language-environment) (Tibetan "Tibetan" . setup-specified-language-environment) (Vietnamese "Vietnamese" . setup-specified-language-environment) (IPA "IPA" . setup-specified-language-environment) (Arabic "Arabic" . setup-specified-language-environment) (Persian "Persian" . setup-specified-language-environment) (UTF-8 "UTF-8" . setup-specified-language-environment) (Khmer "Khmer" . setup-specified-language-environment) (Burmese "Burmese" . setup-specified-language-environment) (Cham "Cham" . setup-specified-language-environment))) (separator-mule "--") (toggle-input-method menu-item "Toggle Input Method" toggle-input-method) (set-input-method menu-item "Select Input Method..." set-input-method) (separator-input-method "--") (set-various-coding-system menu-item "Set Coding Systems" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693904))) (universal-coding-system-argument menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command") (separator-1 "--") (set-buffer-file-coding-system menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved") (revert-buffer-with-coding-system menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system") (set-file-name-coding-system menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names") (separator-2 "--") (set-keyboard-coding-system menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input") (set-terminal-coding-system menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output") (separator-3 "--") (set-selection-coding-system menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard") (set-next-selection-coding-system menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation") (set-buffer-process-coding-system menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer") "Set Coding System") :enable (default-value (quote enable-multibyte-characters))) (view-hello-file menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets") (separator-coding-system "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693896))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support)) :help "Show multilingual settings for a specific language") (describe-input-method menu-item "Describe Input Method" describe-input-method) (describe-coding-system menu-item "Describe Coding System..." describe-coding-system) (list-character-sets menu-item "List Character Sets" list-character-sets :help "Show table of available character sets") (mule-diag menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings") "Mule (Multilingual Environment)")) (showhide-separator "--") (showhide menu-item "Show/Hide" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693864))) (showhide-tool-bar menu-item "Tool-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693860))) (showhide-tool-bar-none menu-item "None" menu-bar-showhide-tool-bar-menu-customize-disable :help "Turn tool-bar off" :visible (display-graphic-p) :button (:radio eq tool-bar-mode nil)) (showhide-tool-bar-top menu-item "On the Top" menu-bar-showhide-tool-bar-menu-customize-enable-top :help "Tool-bar at the top" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote top)))) (showhide-tool-bar-bottom menu-item "On the Bottom" menu-bar-showhide-tool-bar-menu-customize-enable-bottom :help "Tool-bar at the bottom" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote bottom)))) (showhide-tool-bar-right menu-item "On the Right" menu-bar-showhide-tool-bar-menu-customize-enable-right :help "Tool-bar at the right side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote right)))) (showhide-tool-bar-left menu-item "On the Left" menu-bar-showhide-tool-bar-menu-customize-enable-left :help "Tool-bar at the left side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote left)))) "Tool-bar") :visible (display-graphic-p)) (menu-bar-mode menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))) (showhide-tooltip-mode menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)) (showhide-scroll-bar menu-item "Scroll-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693908))) (none menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)) (left menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))) (right menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))) "Scroll-bar") :visible (display-graphic-p)) (showhide-fringe menu-item "Fringe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693915))) (none menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)) (left menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))) (right menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))) (default menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)) (customize menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)) (indicate-empty-lines menu-item "Empty Line Indicators" toggle-indicate-empty-lines :help "Indicate trailing empty lines in fringe, globally" :button (:toggle and (default-boundp (quote indicate-empty-lines)) (default-value (quote indicate-empty-lines)))) (showhide-fringe-ind menu-item "Buffer Boundaries" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693850))) (none menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)) (left menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))) (right menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))) (box menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))) (mixed menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))) (customize menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) "Buffer boundaries") :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe") "Fringe") :visible (display-graphic-p)) (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))) (datetime-separator "--") (showhide-date-time menu-item "Time, Load and Mail" display-time-mode :help "Display time, system load averages and mail status in mode line" :button (:toggle and (default-boundp (quote display-time-mode)) (default-value (quote display-time-mode)))) (showhide-battery menu-item "Battery Status" display-battery-mode :help "Display battery status information in mode line" :button (:toggle and (default-boundp (quote display-battery-mode)) (default-value (quote display-battery-mode)))) (linecolumn-separator "--") (size-indication-mode menu-item "Size Indication" size-indication-mode :help "Show the size of the buffer in the mode line" :button (:toggle and (default-boundp (quote size-indication-mode)) (default-value (quote size-indication-mode)))) (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (column-number-mode menu-item "Column Numbers" column-number-mode :help "Show the current column number in the mode line" :button (:toggle and (default-boundp (quote column-number-mode)) (default-value (quote column-number-mode)))) "Show/Hide")) (menu-system-font menu-item "Use System Font" toggle-use-system-font :help "Use the monospaced font defined by the system" :button (:toggle and (default-boundp (quote font-use-system-font)) (default-value (quote font-use-system-font)))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (custom-separator "--") (save menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above") (package menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages") (customize menu-item "Customize Emacs" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693918))) (customize-themes menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme") (customize menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'") (customize-browse menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups") (separator-3 "--") (customize-saved menu-item "Saved Options" customize-saved :help "Customize previously saved options") (customize-changed-options menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions") (separator-2 "--") (customize-option menu-item "Specific Option..." customize-option :help "Customize value of specific option") (customize-face menu-item "Specific Face..." customize-face :help "Customize attributes of specific face") (customize-group menu-item "Specific Group..." customize-group :help "Customize settings of specific group") (separator-1 "--") (customize-apropos menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list") (customize-apropos-options menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list") (customize-apropos-faces menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list") "Customize")) "Options") :filter ergoemacs-menu--filter) (help-menu menu-item "Help" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693916))) (emacs-tutorial menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs") (emacs-tutorial-language-specific menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)") (emacs-faq menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs") (emacs-news menu-item "Emacs News" view-emacs-news :help "New features of this version") (emacs-known-problems menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs") (emacs-manual-bug menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug") (send-emacs-bug-report menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers") (emacs-psychotherapist menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better") (sep1 "--") (search-documentation menu-item "Search Documentation" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693871))) (emacs-terminology menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual") (lookup-subject-in-emacs-manual menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual") (lookup-subject-in-elisp-manual menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual") (lookup-key-in-manual menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key") (lookup-command-in-manual menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command") (sep1 "--") (find-commands-by-name menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp") (find-options-by-name menu-item "Find Options by Name..." apropos-variable :help "Find variables whose names match a regexp") (find-option-by-value menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp") (find-any-object-by-name menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp") (search-documentation-strings menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp") "Search Documentation")) (describe menu-item "Describe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693882))) (describe-mode menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode") (describe-key-1 menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item") (describe-function menu-item "Describe Function..." describe-function :help "Display documentation of function/command") (describe-variable menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option") (describe-face menu-item "Describe Face..." describe-face :help "Display the properties of a face") (describe-package menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package") (describe-current-display-table menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table") (list-keybindings menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)") (separator-desc-mule "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693896))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support))) (describe-input-method menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method") (describe-coding-system menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))) (describe-coding-system-briefly menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))) (mule-diag menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings") "Describe")) (emacs-manual menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features") (more-manuals menu-item "More Manuals" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693831))) (emacs-lisp-intro menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming") (emacs-lisp-reference menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual") (other-manuals menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals") (lookup-subject-in-all-manuals menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals") (order-emacs-manuals menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation") (sep2 "--") (man menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries") "More Manuals")) (find-emacs-packages menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword") (external-packages menu-item "Finding Extra Packages" menu-bar-help-extra-packages :help "Lisp packages distributed separately for use in Emacs") (sep2 "--") (getting-new-versions menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs") (describe-copying menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)") (describe-no-warranty menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY") (sep4 "--") (about-emacs menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help") (about-gnu-project menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux") "Help") :filter ergoemacs-menu--filter) (mouse-1 . tmm-menubar-mouse) (tools menu-item "Tools" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693913))) (grep menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)") (compile menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors") (shell menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output" :keys "Alt+!") (shell-on-region menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command" :keys "Alt+|") (gdb menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB") (ede menu-item "Project support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)) (semantic menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)) (separator-prog "--") (Syntax\ Checking menu-item "Syntax Checking" (keymap "Syntax Checking" (Enable\ on-the-fly\ syntax\ checking menu-item "Enable on-the-fly syntax checking" flycheck-mode :enable (or flycheck-mode (flycheck-get-checker-for-buffer)) :button (:toggle . flycheck-mode)) (Check\ current\ buffer menu-item "Check current buffer" flycheck-buffer :enable flycheck-mode) (Clear\ errors\ in\ buffer menu-item "Clear errors in buffer" flycheck-clear) (nil menu-item "---") (Go\ to\ next\ error menu-item "Go to next error" flycheck-next-error :enable flycheck-mode) (Go\ to\ previous\ error menu-item "Go to previous error" flycheck-previous-error :enable flycheck-mode) (Show\ all\ errors menu-item "Show all errors" flycheck-list-errors :enable flycheck-mode) (nil-7 menu-item "---") (Copy\ messages\ at\ point menu-item "Copy messages at point" flycheck-copy-errors-as-kill :enable (flycheck-overlays-at (point))) (nil-9 menu-item "---") (Select\ syntax\ checker menu-item "Select syntax checker" flycheck-select-checker :enable flycheck-mode) (Disable\ syntax\ checker menu-item "Disable syntax checker" flycheck-disable-checker :enable flycheck-mode) (Set\ executable\ of\ syntax\ checker menu-item "Set executable of syntax checker" flycheck-set-checker-executable :enable flycheck-mode) (nil-13 menu-item "---") (Describe\ syntax\ checker menu-item "Describe syntax checker" flycheck-describe-checker) (Show\ Flycheck\ version menu-item "Show Flycheck version" flycheck-version) (Read\ the\ Flycheck\ manual menu-item "Read the Flycheck manual" flycheck-info))) (spell menu-item "Spell Checking" ispell-menu-map :filter ergoemacs-menu--filter) (separator-spell "--") (compare menu-item "Compare (Ediff)" menu-bar-ediff-menu :filter ergoemacs-menu--filter) (ediff-merge menu-item "Merge" menu-bar-ediff-merge-menu :filter ergoemacs-menu--filter) (epatch menu-item "Apply Patch" menu-bar-epatch-menu :filter ergoemacs-menu--filter) (separator-compare "--") (vc menu-item "Version Control" vc-menu-map :filter (lambda (bind) (ergoemacs-menu--filter bind (quote vc-menu-map-filter) (quote nil)))) (separator-vc "--") (gnus menu-item "Read Net News (Gnus)" gnus :help "Read network news groups") (rmail menu-item (format "Read Mail (with %s)" (read-mail-item-name)) menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail and reply to it") (compose-mail menu-item (format "Send Mail (with %s)" (send-mail-item-name)) compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Send a mail message") (directory-search menu-item "Directory Search" eudc-tools-menu :filter ergoemacs-menu--filter) (separator-net "--") (calendar menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar") (calc menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator") (simple-calculator menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator") (separator-encryption-decryption "--") (encryption-decryption menu-item "Encryption/Decryption" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693889))) (decrypt-file menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file") (encrypt-file menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file") (verify-file menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file") (sign-file menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file") (separator-file "--") (decrypt-region menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region") (encrypt-region menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region") (verify-region menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region") (sign-region menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region") (separator-keys "--") (list-keys menu-item "List Keys" epa-list-keys :help "Browse your public keyring") (import-keys menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file") (import-keys-region menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region") (export-keys menu-item "Export Keys" epa-export-keys :help "Export public keys to a file") (insert-keys menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point") "Encryption/Decryption") :filter ergoemacs-menu--filter) (separator-games "--") (games menu-item "Games" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693922))) (5x5 menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board") (adventure menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs") (black-box menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays") (bubbles menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves") (gomoku menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)") (hanoi menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs") (land menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks") (life menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves") (mult menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication") (pong menu-item "Pong" pong :help "Bounce the ball to your opponent") (snake menu-item "Snake" snake :help "Move snake around avoiding collisions") (solitaire menu-item "Solitaire" solitaire :help "Get rid of all the stones") (tetris menu-item "Tetris" tetris :help "Falling blocks game") (zone menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle") "Games") :filter ergoemacs-menu--filter) "Tools") :filter ergoemacs-menu--filter) (buffer menu-item "Buffers" (keymap "Select Buffer" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693878))) [("*scratch*  " (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*scratch*")) ("*Messages*  *" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Messages*"))] (command-separator "--") (next-buffer menu-item "Next Buffer" next-buffer :help "Switch to the \"next\" buffer in a cyclic order" :keys "XF86Forward") (previous-buffer menu-item "Previous Buffer" previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order" :keys "XF86Back") (select-named-buffer menu-item "Select Named Buffer..." switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window" :keys #("Ctrl+X b" 0 4 (face ergoemacs-display-key-face))) (list-all-buffers menu-item "List All Buffers" list-buffers :help "Pop up a window listing all Emacs buffers" :keys #("Ctrl+X Ctrl+B" 0 4 (face ergoemacs-display-key-face) 7 11 (face ergoemacs-display-key-face)))) :filter ergoemacs-menu--filter) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693751)))) (f4 . kmacro-end-or-call-macro) (f3 . kmacro-start-macro-or-insert-counter) (C-M-end . end-of-defun) (C-M-home . beginning-of-defun) (C-M-down . down-list) (C-M-up . backward-up-list) (C-M-right . forward-sexp) (C-M-left . backward-sexp) (S-delete . kill-region) (C-backspace . backward-kill-word) (C-delete . kill-word) (C-left . left-word) (C-right . right-word) (M-left . left-word) (M-right . right-word) (mouse-movement . ignore) (deletechar . delete-forward-char) (deleteline . kill-line) (insertline . open-line) (open . find-file) (again . repeat-complex-command) (redo . repeat-complex-command) (undo . undo) (S-insertchar . yank) (C-insertchar . kill-ring-save) (insertchar . overwrite-mode) (S-insert . yank) (C-insert . kill-ring-save) (insert . overwrite-mode) (execute . execute-extended-command) (M-begin . beginning-of-buffer-other-window) (begin . beginning-of-buffer) (M-end . end-of-buffer-other-window) (C-end . end-of-buffer) (end . move-end-of-line) (M-prior . scroll-other-window-down) (M-next . scroll-other-window) (C-next . scroll-left) (C-prior . scroll-right) (C-down . forward-paragraph) (C-up . backward-paragraph) (next . scroll-up-command) (prior . scroll-down-command) (down . next-line) (right . right-char) (up . previous-line) (left . left-char) (M-home . beginning-of-buffer-other-window) (C-home . beginning-of-buffer) (home . move-beginning-of-line) (C-S-backspace . kill-whole-line) (find . search-forward) (menu . execute-extended-command) (67108896 . set-mark-command) (67108909 . negative-argument) (67108921 . digit-argument) (67108920 . digit-argument) (67108919 . digit-argument) (67108918 . digit-argument) (67108917 . digit-argument) (67108916 . digit-argument) (67108915 . digit-argument) (67108914 . digit-argument) (67108913 . digit-argument) (67108912 . digit-argument) (XF86Back . previous-buffer) (XF86Forward . next-buffer) (67108911 . undo) (make-frame-visible . ignore-event) (iconify-frame . ignore-event) (delete-frame . handle-delete-frame) (select-window . handle-select-window) (switch-frame . handle-switch-frame)) ergoemacs-map--undefined-keys-60660ac5d9bb96506993807c6dd481e3 ([134217826] [134217830] [134217828] [2] [6] [16] [14] [67108896] [4]) :minor-mode-map-alist:2C-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693748) ergoemacs-mode us)))) (ergoemacs-remap keymap (enlarge-window-horizontally . 2C-enlarge-window-horizontally) (shrink-window-horizontally . 2C-shrink-window-horizontally)))) nil) :minor-mode-map-alist:2C-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693748) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693748) ergoemacs-mode us)))) (ergoemacs-remap keymap (enlarge-window-horizontally . 2C-enlarge-window-horizontally) (shrink-window-horizontally . 2C-shrink-window-horizontally))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693748))) (f2 keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693886))) (125 . 2C-enlarge-window-horizontally) (123 . 2C-shrink-window-horizontally) (124 . 2C-toggle-autoscroll) (13 . 2C-newline) (111 . 2C-associated-buffer) (100 . 2C-dissociate) (49 . 2C-merge)) (24 keymap (123 . 2C-shrink-window-horizontally) (125 . 2C-enlarge-window-horizontally) (54 keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693886))) (125 . 2C-enlarge-window-horizontally) (123 . 2C-shrink-window-horizontally) (124 . 2C-toggle-autoscroll) (13 . 2C-newline) (111 . 2C-associated-buffer) (100 . 2C-dissociate) (49 . 2C-merge)))) :minor-mode-map-alist:undo-tree-visualizer-selection-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693820) ergoemacs-mode us)))) (ergoemacs-remap keymap (previous-line . undo-tree-visualizer-select-previous) (next-line . undo-tree-visualizer-select-next) (scroll-up-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-next 10] 2 "

(fn)" nil]) (scroll-down-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-previous 10] 2 "

(fn)" nil]) (right-char . undo-tree-visualizer-select-right) (forward-char . undo-tree-visualizer-select-right) (left-char . undo-tree-visualizer-select-left) (backward-char . undo-tree-visualizer-select-left) (newline . undo-tree-visualizer-set) (mouse-set-point . undo-tree-visualizer-mouse-select)) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (27 keymap (106 . undo-tree-visualizer-select-left) (108 . undo-tree-visualizer-select-right) (105 . undo-tree-visualizer-select-previous) (107 . undo-tree-visualizer-select-next)))) nil) :minor-mode-map-alist:undo-tree-visualizer-selection-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693820) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693820) ergoemacs-mode us)))) (ergoemacs-remap keymap (previous-line . undo-tree-visualizer-select-previous) (next-line . undo-tree-visualizer-select-next) (scroll-up-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-next 10] 2 "

(fn)" nil]) (scroll-down-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-previous 10] 2 "

(fn)" nil]) (right-char . undo-tree-visualizer-select-right) (forward-char . undo-tree-visualizer-select-right) (left-char . undo-tree-visualizer-select-left) (backward-char . undo-tree-visualizer-select-left) (newline . undo-tree-visualizer-set) (mouse-set-point . undo-tree-visualizer-mouse-select)) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (27 keymap (106 . undo-tree-visualizer-select-left) (108 . undo-tree-visualizer-select-right) (105 . undo-tree-visualizer-select-previous) (107 . undo-tree-visualizer-select-next))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693820))) (100 . undo-tree-visualizer-selection-toggle-diff) (mouse-1 . undo-tree-visualizer-mouse-select) (13 . undo-tree-visualizer-set) (62 . #[0 "\300\301!\207" [undo-tree-visualizer-select-right 10] 2 "

(fn)" nil]) (60 . #[0 "\300\301!\207" [undo-tree-visualizer-select-left 10] 2 "

(fn)" nil]) (46 . #[0 "\300\301!\207" [undo-tree-visualizer-select-right 10] 2 "

(fn)" nil]) (44 . #[0 "\300\301!\207" [undo-tree-visualizer-select-left 10] 2 "

(fn)" nil]) (2 . undo-tree-visualizer-select-left) (98 . undo-tree-visualizer-select-left) (left . undo-tree-visualizer-select-left) (6 . undo-tree-visualizer-select-right) (102 . undo-tree-visualizer-select-right) (right . undo-tree-visualizer-select-right) (prior . #[0 "\300\301!\207" [undo-tree-visualizer-select-previous 10] 2 "

(fn)" nil]) (next . #[0 "\300\301!\207" [undo-tree-visualizer-select-next 10] 2 "

(fn)" nil]) (14 . undo-tree-visualizer-select-next) (110 . undo-tree-visualizer-select-next) (down . undo-tree-visualizer-select-next) (16 . undo-tree-visualizer-select-previous) (112 . undo-tree-visualizer-select-previous) (up . undo-tree-visualizer-select-previous) (remap keymap (backward-char . undo-tree-visualizer-select-left) (forward-char . undo-tree-visualizer-select-right) (next-line . undo-tree-visualizer-select-next) (previous-line . undo-tree-visualizer-select-previous))) :minor-mode-map-alist:undo-tree-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693903) ergoemacs-mode us)))) (ergoemacs-remap keymap (undo . undo-tree-undo)))) nil) :minor-mode-map-alist:undo-tree-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693903) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693903) ergoemacs-mode us)))) (ergoemacs-remap keymap (undo . undo-tree-undo))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693903))) (24 keymap (114 keymap (85 . undo-tree-restore-state-from-register) (117 . undo-tree-save-state-to-register)) (117 . undo-tree-visualize)) (27 keymap (95 . undo-tree-redo)) (67108927 . undo-tree-redo) (31 . undo-tree-undo) (67108911 . undo-tree-undo) (remap keymap (redo . undo-tree-redo) (undo-only . undo-tree-undo) (undo . undo-tree-undo))) :minor-mode-map-alist:smartparens-strict-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693888) ergoemacs-mode us)))))) nil) :minor-mode-map-alist:smartparens-strict-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693888) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693888) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693888))) (remap keymap (backward-kill-word . sp-backward-kill-word) (kill-line . sp-kill-hybrid-sexp) (kill-word . sp-kill-word) (delete-backward-char . sp-backward-delete-char) (backward-delete-char . sp-backward-delete-char) (backward-delete-char-untabify . sp-backward-delete-char) (delete-forward-char . sp-delete-char) (delete-char . sp-delete-char))) :minor-mode-map-alist:ido-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693747) ergoemacs-mode us)))))) nil) :minor-mode-map-alist:ido-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693747) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693747) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693747))) (remap keymap (display-buffer . ido-display-buffer) (kill-buffer . ido-kill-buffer) (insert-buffer . ido-insert-buffer) (switch-to-buffer-other-frame . ido-switch-buffer-other-frame) (switch-to-buffer-other-window . ido-switch-buffer-other-window) (switch-to-buffer . ido-switch-buffer) (find-file-read-only-other-frame . ido-find-file-read-only-other-frame) (find-file-other-frame . ido-find-file-other-frame) (find-file-read-only-other-window . ido-find-file-read-only-other-window) (find-file-other-window . ido-find-file-other-window) (dired . ido-dired) (list-directory . ido-list-directory) (insert-file . ido-insert-file) (write-file . ido-write-file) (find-alternate-file . ido-find-alternate-file) (find-file-read-only . ido-find-file-read-only) (find-file . ido-find-file))) :minor-mode-map-alist:org-cdlatex-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693878) ergoemacs-mode us)))))) nil) :minor-mode-map-alist:org-cdlatex-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693878) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693878) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693878))) (3 keymap (123 . cdlatex-environment)) (39 . org-cdlatex-math-modify) (96 . cdlatex-math-symbol) (94 . org-cdlatex-underscore-caret) (95 . org-cdlatex-underscore-caret)) :minor-mode-map-alist:outline-minor-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693853) ergoemacs-mode us)))))) nil) :minor-mode-map-alist:outline-minor-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693853) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693853) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693853))) (3 keymap (64 keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693890))) (13 . outline-insert-heading) (67108926 . outline-demote) (67108924 . outline-promote) (22 . outline-move-subtree-down) (30 . outline-move-subtree-up) (15 . hide-other) (17 . hide-sublevels) (11 . show-branches) (12 . hide-leaves) (5 . show-entry) (3 . hide-entry) (1 . show-all) (20 . hide-body) (2 . outline-backward-same-level) (6 . outline-forward-same-level) (21 . outline-up-heading) (4 . hide-subtree) (19 . show-subtree) (9 . show-children) (16 . outline-previous-visible-heading) (14 . outline-next-visible-heading) (64 . outline-mark-subtree))) (menu-bar keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693847))) (outline "Outline" keymap "Outline" "Headings" keymap (outline-up-heading menu-item "Up" outline-up-heading :help "Move to the visible heading line of which the present line is a subheading") (outline-next-visible-heading menu-item "Next" outline-next-visible-heading :help "Move to the next visible heading line") (outline-previous-visible-heading menu-item "Previous" outline-previous-visible-heading :help "Move to the previous heading line") (outline-forward-same-level menu-item "Next Same Level" outline-forward-same-level :help "Move forward to the arg'th subheading at same level as this one") (outline-backward-same-level menu-item "Previous Same Level" outline-backward-same-level :help "Move backward to the arg'th subheading at same level as this one.") (outline-insert-heading menu-item "New Heading" outline-insert-heading :help "Insert a new heading at same depth at point") (copy menu-item "Copy to Kill Ring" outline-headers-as-kill :enable mark-active :help "Save the visible outline headers in region at the start of the kill ring") (move-subtree-up menu-item "Move Subtree Up" outline-move-subtree-up :help "Move the current subtree up past arg headlines of the same level") (move-subtree-down menu-item "Move Subtree Down" outline-move-subtree-down :help "Move the current subtree down past arg headlines of the same level") (promote-subtree menu-item "Promote Subtree" outline-promote :help "Promote headings higher up the tree") (demote-subtree menu-item "Demote Subtree" outline-demote :help "Demote headings lower down the tree") "Headings" (--- "---") "Show" keymap (show-all menu-item "Show All" show-all :help "Show all of the text in the buffer") (show-entry menu-item "Show Entry" show-entry :help "Show the body directly following this heading") (show-branches menu-item "Show Branches" show-branches :help "Show all subheadings of this heading, but not their bodies") (show-children menu-item "Show Children" show-children :help "Show all direct subheadings of this heading") (show-subtree menu-item "Show Subtree" show-subtree :help "Show everything after this heading at deeper levels") "Show" (--- "---") "Hide" keymap (hide-leaves menu-item "Hide Leaves" hide-leaves :help "Hide the body after this heading and at deeper levels") (hide-body menu-item "Hide Body" hide-body :help "Hide all body lines in buffer, leaving all headings visible") (hide-entry menu-item "Hide Entry" hide-entry :help "Hide the body directly following this heading") (hide-subtree menu-item "Hide Subtree" hide-subtree :help "Hide everything after this heading at deeper levels") (hide-sublevels menu-item "Hide Sublevels" hide-sublevels :help "Hide everything but the top LEVELS levels of headers, in whole buffer") (hide-other menu-item "Hide Other" hide-other :help "Hide everything except current body and parent and top-level headings") "Hide"))) :minor-mode-map-alist:org-src-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693843) ergoemacs-mode us)))) (ergoemacs-remap keymap (save-buffer . org-edit-src-save)))) nil) :minor-mode-map-alist:org-src-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693843) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693843) ergoemacs-mode us)))) (ergoemacs-remap keymap (save-buffer . org-edit-src-save))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693843))) (24 keymap (19 . org-edit-src-save)) (3 keymap (11 . org-edit-src-abort) (39 . org-edit-src-exit))) :minor-mode-map-alist:visual-line-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693875) ergoemacs-mode us)))))) nil) :minor-mode-map-alist:visual-line-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693875) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693875) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693875))) (remap keymap (move-end-of-line . end-of-visual-line) (move-beginning-of-line . beginning-of-visual-line) (kill-line . kill-visual-line))) lisp-interaction-mode-852438d026c018c4307b916406f98c62-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693948) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point) (newline-and-indent . eval-print-last-sexp)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . backward-delete-char-untabify)))) nil) lisp-interaction-mode-852438d026c018c4307b916406f98c62-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693948) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693948) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point) (newline-and-indent . eval-print-last-sexp)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . backward-delete-char-untabify))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693948))) (menu-bar keymap (lisp-interaction "Lisp-Interaction" keymap (complete-symbol menu-item "Complete Lisp Symbol" completion-at-point :help "Perform completion on Lisp symbol preceding point") (indent-pp-sexp menu-item "Indent or Pretty-Print" indent-pp-sexp :help "Indent each line of the list starting just after point, or prettyprint it") (edebug-defun-lisp-interaction menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x") (eval-print-last-sexp menu-item "Evaluate and Print" eval-print-last-sexp :help "Evaluate sexp before point; print value into current buffer") (eval-defun menu-item "Evaluate Defun" eval-defun :help "Evaluate the top-level form containing point, or after point") "Lisp-Interaction")) (10 . eval-print-last-sexp) (27 keymap (9 . completion-at-point) (17 . indent-pp-sexp) (24 . eval-defun)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693841))) (127 . backward-delete-char-untabify) (27 keymap (17 . indent-sexp))) minibuffer-inactive-mode-map-13cb9e4836c82bf4e3355ddc02312d16-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693746) ergoemacs-mode us)))) (ergoemacs-remap keymap (scroll-up-command . next-history-element) (next-buffer . next-history-element) (scroll-down-command . previous-history-element) (previous-buffer . previous-history-element) (keyboard-quit . abort-recursive-edit) (move-beginning-of-line . ido-toggle-ignore) (move-end-of-line . ido-edit-input) (indent-for-tab-command . ido-complete) (newline-and-indent . ido-select-text) (newline . ido-exit-minibuffer) (isearch-backward . ido-prev-match) (isearch-forward . ido-next-match) (transpose-chars . ido-toggle-regexp) (suspend-frame . ido-undo-merge-work-directory) (set-mark-command . ido-restrict-to-matches) (right-char . ido-next-match) (left-char . ido-prev-match) (backward-char . ido-magic-backward-char) (forward-char . ido-magic-forward-char) (delete-char . ido-magic-delete-char) (list-buffers . ido-enter-switch-buffer) (find-file . ido-fallback-command) (list-directory . ido-enter-dired) (next-line . ido-next-match-dir) (previous-line . ido-toggle-prefix) (delete-backward-char . ido-delete-backward-updir) (backward-kill-word . ido-up-directory) (recenter-top-bottom . ido-reread-directory) (kill-line . ido-delete-file-at-head) (open-line . ido-copy-current-word) (kill-region . ido-copy-current-file-name) (downcase-word . ido-toggle-literal)) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (27 keymap (98 . ergoemacs-map-undefined) (106 . ido-magic-backward-char) (108 . ido-magic-forward-char) (105 . ido-toggle-prefix) (107 . next-line) (32 . ido-restrict-to-matches) (100 . ido-delete-backward-updir) (102 . ido-magic-delete-char) (117 . ido-push-dir) (111 . ido-wide-find-file-or-pop-dir) (114 . ido-wide-find-dir-or-delete-dir)))) nil) minibuffer-inactive-mode-map-13cb9e4836c82bf4e3355ddc02312d16-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693746) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693746) ergoemacs-mode us)))) (ergoemacs-remap keymap (scroll-up-command . next-history-element) (next-buffer . next-history-element) (scroll-down-command . previous-history-element) (previous-buffer . previous-history-element) (keyboard-quit . abort-recursive-edit) (move-beginning-of-line . ido-toggle-ignore) (move-end-of-line . ido-edit-input) (indent-for-tab-command . ido-complete) (newline-and-indent . ido-select-text) (newline . ido-exit-minibuffer) (isearch-backward . ido-prev-match) (isearch-forward . ido-next-match) (transpose-chars . ido-toggle-regexp) (suspend-frame . ido-undo-merge-work-directory) (set-mark-command . ido-restrict-to-matches) (right-char . ido-next-match) (left-char . ido-prev-match) (backward-char . ido-magic-backward-char) (forward-char . ido-magic-forward-char) (delete-char . ido-magic-delete-char) (list-buffers . ido-enter-switch-buffer) (find-file . ido-fallback-command) (list-directory . ido-enter-dired) (next-line . ido-next-match-dir) (previous-line . ido-toggle-prefix) (delete-backward-char . ido-delete-backward-updir) (backward-kill-word . ido-up-directory) (recenter-top-bottom . ido-reread-directory) (kill-line . ido-delete-file-at-head) (open-line . ido-copy-current-word) (kill-region . ido-copy-current-file-name) (downcase-word . ido-toggle-literal)) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (27 keymap (98 . ergoemacs-map-undefined) (106 . ido-magic-backward-char) (108 . ido-magic-forward-char) (105 . ido-toggle-prefix) (107 . next-line) (32 . ido-restrict-to-matches) (100 . ido-delete-backward-updir) (102 . ido-magic-delete-char) (117 . ido-push-dir) (111 . ido-wide-find-file-or-pop-dir) (114 . ido-wide-find-dir-or-delete-dir))) (keymap (24 keymap (6 . ignore)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (hook-map after-change-major-mode-hook global-font-lock-mode-enable-in-buffers))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693427))) (24 keymap (6 . ignore)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693889))) (15 . ido-toggle-virtual-buffers) (11 . ido-kill-buffer-at-head) (24 keymap (2 . ido-fallback-command) (6 . ido-enter-find-file)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693870))) (4 . ido-magic-delete-char) (6 . ido-magic-forward-char) (2 . ido-magic-backward-char) (63 . ido-completion-help) (left . ido-prev-match) (right . ido-next-match) (0 . ido-restrict-to-matches) (27 keymap (32 . ido-take-first-match)) (67108896 . ido-restrict-to-matches) (26 . ido-undo-merge-work-directory) (20 . ido-toggle-regexp) (19 . ido-next-match) (18 . ido-prev-match) (16 . ido-toggle-prefix) (13 . ido-exit-minibuffer) (10 . ido-select-text) (32 . ido-complete-space) (9 . ido-complete) (5 . ido-edit-input) (3 . ido-toggle-case) (1 . ido-toggle-ignore) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693465))) (menu-bar keymap (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . abort-recursive-edit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) rust-mode-8739be375fcdefc8bdff16fc8f08fa19-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693742) ergoemacs-mode us)))))) nil) rust-mode-8739be375fcdefc8bdff16fc8f08fa19-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693742) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693742) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693742))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693895))) (27 keymap (17 . prog-indent-sexp))) ergoemacs-translate--parent-map-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((2305843009213693950) ergoemacs-mode us)))))) nil) ergoemacs-translate--parent-map-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((2305843009213693950) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((2305843009213693950) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key 2305843009213693950)))) ibuffer-mode-852438d026c018c4307b916406f98c62-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693783) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . ibuffer-unmark-backward) (backward-kill-word . ibuffer-unmark-all) (forward-paragraph . ibuffer-forward-next-marked) (backward-paragraph . ibuffer-backwards-next-marked) (indent-new-comment-line . ibuffer-jump-to-filter-group) (yank . ibuffer-yank) (find-file . ibuffer-find-file) (transpose-chars . ibuffer-visit-tags-table) (open-line . ibuffer-visit-buffer-other-window-noselect) (newline . ibuffer-visit-buffer) (kill-line . ibuffer-kill-line) (indent-for-tab-command . ibuffer-forward-filter-group) (delete-char . ibuffer-mark-for-delete-backwards)) (4 . ergoemacs-map-undefined) (27 keymap (106 . backward-char) (9 . ibuffer-backwards-next-marked) (67108873 . ibuffer-backwards-next-marked) (11 . ibuffer-forward-next-marked) (100 . ibuffer-unmark-backward) (102 . ibuffer-mark-for-delete-backwards) (111 . forward-word) (101 . ibuffer-unmark-all)))) nil) ibuffer-mode-852438d026c018c4307b916406f98c62-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693783) ergoemacs-unbound us))))) ibuffer-name-map-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693868) ergoemacs-mode us)))) (ergoemacs-remap keymap (mouse-set-point . ibuffer-mouse-toggle-mark) (mouse-yank-primary . ibuffer-mouse-visit-buffer)))) nil) ibuffer-name-map-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693868) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693868) ergoemacs-mode us)))) (ergoemacs-remap keymap (mouse-set-point . ibuffer-mouse-toggle-mark) (mouse-yank-primary . ibuffer-mouse-visit-buffer))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693868))) (down-mouse-3 . ibuffer-mouse-popup-menu) (mouse-2 . ibuffer-mouse-visit-buffer) (mouse-1 . ibuffer-mouse-toggle-mark)) special-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693845) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . scroll-down-command)) (27 keymap (100 . scroll-down-command)))) nil) special-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693845) ergoemacs-unbound us))))) bs-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693919) ergoemacs-mode us)))) (ergoemacs-remap keymap (mouse-yank-primary . bs-mouse-select) (negative-argument . negative-argument) (open-line . bs-tmp-select-other-window) (mouse-save-then-kill . bs-mouse-select-other-frame) (previous-line . bs-up) (next-line . bs-down) (newline . bs-select) (delete-char . bs-delete-backward) (keyboard-quit . bs-abort) (abort-recursive-edit . bs-abort)) (4 . ergoemacs-map-undefined) (27 keymap (102 . bs-delete-backward)))) nil) bs-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693919) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693919) ergoemacs-mode us)))) (ergoemacs-remap keymap (mouse-yank-primary . bs-mouse-select) (negative-argument . negative-argument) (open-line . bs-tmp-select-other-window) (mouse-save-then-kill . bs-mouse-select-other-frame) (previous-line . bs-up) (next-line . bs-down) (newline . bs-select) (delete-char . bs-delete-backward) (keyboard-quit . bs-abort) (abort-recursive-edit . bs-abort)) (4 . ergoemacs-map-undefined) (27 keymap (102 . bs-delete-backward))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693919))) (63 . bs-help) (60 . scroll-left) (62 . scroll-right) (117 . bs-unmark-current) (109 . bs-mark-current) (116 . bs-visit-tags-table) (43 . bs-set-current-buffer-to-show-always) (77 . bs-toggle-current-to-show) (126 . bs-clear-modified) (37 . bs-toggle-readonly) (29 . bs-abort) (7 . bs-abort) (3 keymap (3 . bs-kill)) (113 . bs-kill) (99 . bs-select-next-configuration) (67 . bs-set-configuration-and-refresh) (103 . bs-refresh) (107 . bs-delete) (4 . bs-delete-backward) (100 . bs-delete) (97 . bs-toggle-show-all) (83 . bs-show-sorted) (115 . bs-save) (98 . bs-bury-buffer) (13 . bs-select) (down . bs-down) (112 . bs-up) (110 . bs-down) (up . bs-up) (button3 . bs-mouse-select-other-frame) (mouse-3 . bs-mouse-select-other-frame) (15 . bs-tmp-select-other-window) (111 . bs-select-other-window) (27 keymap (45 . negative-argument)) (45 . negative-argument) (57 . digit-argument) (56 . digit-argument) (55 . digit-argument) (54 . digit-argument) (53 . digit-argument) (52 . digit-argument) (51 . digit-argument) (50 . digit-argument) (49 . digit-argument) (70 . bs-select-other-frame) (button2 . bs-mouse-select) (mouse-2 . bs-mouse-select) (33 . bs-select-in-one-window) (118 . bs-view) (102 . bs-select) (32 . bs-select)) emacs-lisp-mode-852438d026c018c4307b916406f98c62-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693820) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . backward-delete-char-untabify)))) nil) emacs-lisp-mode-852438d026c018c4307b916406f98c62-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693820) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693820) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . backward-delete-char-untabify))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693820))) (menu-bar keymap (emacs-lisp "Emacs-Lisp" keymap (indent-line menu-item "Indent Line" lisp-indent-line) (indent-region menu-item "Indent Region" indent-region :help "Indent each nonblank line in the region" :enable mark-active) (comment-region menu-item "Comment Out Region" comment-region :help "Comment or uncomment each line in the region" :enable mark-active) (separator-format "--") (eval-sexp menu-item "Evaluate Last S-expression" eval-last-sexp :help "Evaluate sexp before point; print value in minibuffer") (eval-region menu-item "Evaluate Region" eval-region :help "Execute the region as Lisp code" :enable mark-active) (eval-buffer menu-item "Evaluate Buffer" eval-buffer :help "Execute the current buffer as Lisp code") (ielm menu-item "Interactive Expression Evaluation" ielm :help "Interactively evaluate Emacs Lisp expressions") (separator-eval "--") (byte-compile menu-item "Byte-compile This File" emacs-lisp-byte-compile :help "Byte compile the file containing the current buffer") (emacs-byte-compile-and-load menu-item "Byte-compile and Load" emacs-lisp-byte-compile-and-load :help "Byte-compile the current file (if it has changed), then load compiled code") (byte-recompile menu-item "Byte-recompile Directory..." byte-recompile-directory :help "Recompile every `.el' file in DIRECTORY that needs recompilation") (disas menu-item "Disassemble Byte Compiled Object..." disassemble :help "Print disassembled code for OBJECT in a buffer") (separator-byte "--") (edebug-defun menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x") (lint "Linting" keymap (lint-d menu-item "Lint Defun" elint-defun :help "Lint the function at point") (lint-b menu-item "Lint Buffer" elint-current-buffer :help "Lint the current buffer") (lint-f menu-item "Lint File..." elint-file :help "Lint a file") (lint-di menu-item "Lint Directory..." elint-directory :help "Lint a directory")) (profiling "Profiling" keymap (prof-func menu-item "Instrument Function..." elp-instrument-function :help "Instrument a function for profiling") (prof-pack menu-item "Instrument Package..." elp-instrument-package :help "Instrument for profiling all function that start with a prefix") (prof-res menu-item "Show Profiling Results" elp-results :help "Display current profiling results") (prof-resfunc menu-item "Reset Counters for Function..." elp-reset-function :help "Reset the profiling information for a function") (prof-resall menu-item "Reset Counters for All Functions" elp-reset-all :help "Reset the profiling information for all functions being profiled") (sep-rem "--") (prof-restfunc menu-item "Remove Instrumentation for Function..." elp-restore-function :help "Restore an instrumented function to its original definition") (prof-restall menu-item "Remove Instrumentation for All Functions" elp-restore-all :help "Restore the original definitions of all functions being profiled")) (tracing "Tracing" keymap (tr-f menu-item "Trace Function..." trace-function :help "Trace the function given as an argument") (tr-q menu-item "Trace Function Quietly..." trace-function-background :help "Trace the function with trace output going quietly to a buffer") (tr-sep "--") (tr-uf menu-item "Untrace Function..." untrace-function :help "Untrace function, and possibly activate all remaining advice") (tr-a menu-item "Untrace All" untrace-all :help "Untrace all currently traced functions")) (re-builder menu-item "Construct Regexp" re-builder :help "Construct a regexp interactively") (checkdoc menu-item "Check Documentation Strings" checkdoc :help "Check documentation strings for style requirements") (eldoc menu-item "Auto-Display Documentation Strings" eldoc-mode :button (:toggle bound-and-true-p eldoc-mode) :help "Display the documentation string for the item under cursor") "Emacs-Lisp")) (27 keymap (17 . indent-pp-sexp) (24 . eval-defun) (9 . completion-at-point)) "Emacs-Lisp" keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693841))) (127 . backward-delete-char-untabify) (27 keymap (17 . indent-sexp))) isearch-mode-map-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693868) ergoemacs-mode us)))) (ergoemacs-remap keymap (handle-switch-frame) (handle-delete-frame) (ignore) (mouse-yank-primary . isearch-mouse-2) (delete-backward-char . isearch-delete-char) (toggle-input-method . isearch-toggle-input-method) (isearch-forward-regexp . isearch-repeat-forward) (isearch-backward-regexp . isearch-repeat-backward) (keyboard-escape-quit . isearch-cancel) (append-next-kill . isearch-del-char) (isearch-forward-word . isearch-toggle-word) (isearch-forward-symbol . isearch-toggle-symbol) (occur . isearch-occur) (highlight-regexp . isearch-highlight-regexp) (yank-pop . isearch-yank-pop) (complete-symbol . isearch-complete) (capitalize-word . isearch-toggle-case-fold) (move-to-window-line-top-bottom . isearch-toggle-regexp) (forward-sentence . isearch-edit-string) (query-replace . isearch-query-replace) (query-replace-regexp . isearch-query-replace-regexp) (yank . isearch-yank-kill) (insert-char . isearch-other-control-char) (kill-region . isearch-yank-word-or-char) (isearch-forward . isearch-repeat-forward) (isearch-backward . isearch-repeat-backward) (quoted-insert . isearch-quote-char) (newline . isearch-exit) (help-for-help . isearch-help-for-help) (describe-bindings . isearch-describe-bindings) (describe-key . isearch-describe-key) (describe-mode . isearch-describe-mode) (help-quit . help-quit) (keyboard-quit . isearch-abort)) (27 keymap (106 . isearch-other-control-char) (108 . isearch-other-control-char) (105 . isearch-other-control-char) (107 . isearch-other-control-char) (10 . isearch-other-control-char) (12 . isearch-other-control-char) (9 . isearch-other-meta-char) (67108873 . isearch-other-meta-char) (11 . isearch-other-meta-char) (32 . isearch-other-control-char) (100 . isearch-delete-char) (102 . isearch-other-control-char) (117 . isearch-other-meta-char) (111 . isearch-other-meta-char) (101 . isearch-other-meta-char) (114 . isearch-other-meta-char)))) nil) isearch-mode-map-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693868) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693868) ergoemacs-mode us)))) (ergoemacs-remap keymap (handle-switch-frame) (handle-delete-frame) (ignore) (mouse-yank-primary . isearch-mouse-2) (delete-backward-char . isearch-delete-char) (toggle-input-method . isearch-toggle-input-method) (isearch-forward-regexp . isearch-repeat-forward) (isearch-backward-regexp . isearch-repeat-backward) (keyboard-escape-quit . isearch-cancel) (append-next-kill . isearch-del-char) (isearch-forward-word . isearch-toggle-word) (isearch-forward-symbol . isearch-toggle-symbol) (occur . isearch-occur) (highlight-regexp . isearch-highlight-regexp) (yank-pop . isearch-yank-pop) (complete-symbol . isearch-complete) (capitalize-word . isearch-toggle-case-fold) (move-to-window-line-top-bottom . isearch-toggle-regexp) (forward-sentence . isearch-edit-string) (query-replace . isearch-query-replace) (query-replace-regexp . isearch-query-replace-regexp) (yank . isearch-yank-kill) (insert-char . isearch-other-control-char) (kill-region . isearch-yank-word-or-char) (isearch-forward . isearch-repeat-forward) (isearch-backward . isearch-repeat-backward) (quoted-insert . isearch-quote-char) (newline . isearch-exit) (help-for-help . isearch-help-for-help) (describe-bindings . isearch-describe-bindings) (describe-key . isearch-describe-key) (describe-mode . isearch-describe-mode) (help-quit . help-quit) (keyboard-quit . isearch-abort)) (27 keymap (106 . isearch-other-control-char) (108 . isearch-other-control-char) (105 . isearch-other-control-char) (107 . isearch-other-control-char) (10 . isearch-other-control-char) (12 . isearch-other-control-char) (9 . isearch-other-meta-char) (67108873 . isearch-other-meta-char) (11 . isearch-other-meta-char) (32 . isearch-other-control-char) (100 . isearch-delete-char) (102 . isearch-other-control-char) (117 . isearch-other-meta-char) (111 . isearch-other-meta-char) (101 . isearch-other-meta-char) (114 . isearch-other-meta-char))) keymap #^[nil nil keymap 
#^^[3 0 nil nil nil nil nil nil nil isearch-abort (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693884))) (113 . help-quit) (109 . isearch-describe-mode) (107 . isearch-describe-key) (98 . isearch-describe-bindings) (63 . isearch-help-for-help) (f1 . isearch-help-for-help) (help . isearch-help-for-help) (8 . isearch-help-for-help) (t . isearch-other-control-char)) isearch-printing-char isearch-printing-char nil nil isearch-exit nil nil nil isearch-quote-char isearch-repeat-backward isearch-repeat-forward nil nil nil isearch-yank-word-or-char (keymap (56 keymap (13 . isearch-other-control-char)) (t . isearch-other-control-char)) isearch-yank-kill nil (keymap (67108901 . isearch-query-replace-regexp) (37 . isearch-query-replace) (101 . isearch-edit-string) (114 . isearch-toggle-regexp) (99 . isearch-toggle-case-fold) (9 . isearch-complete) (121 . isearch-yank-pop) (112 . isearch-ring-retreat) (110 . isearch-ring-advance) (115 keymap (104 keymap (114 . isearch-highlight-regexp)) (111 . isearch-occur) (32 . isearch-toggle-lax-whitespace) (95 . isearch-toggle-symbol) (119 . isearch-toggle-word) (114 . isearch-toggle-regexp) (99 . isearch-toggle-case-fold) (5 . isearch-yank-line)) (25 . isearch-yank-char) (23 . isearch-del-char) (escape keymap (escape . isearch-cancel)) (27 keymap (27 . isearch-cancel)) (18 . isearch-repeat-backward) (19 . isearch-repeat-forward) (t . isearch-other-meta-char)) isearch-toggle-input-method nil isearch-toggle-specified-input-method nil isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-delete-char] #^^[1 0 #^^[2 0 
#^^[3 0 nil nil nil nil nil nil nil isearch-abort (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693884))) (113 . help-quit) (109 . isearch-describe-mode) (107 . isearch-describe-key) (98 . isearch-describe-bindings) (63 . isearch-help-for-help) (f1 . isearch-help-for-help) (help . isearch-help-for-help) (8 . isearch-help-for-help) (t . isearch-other-control-char)) isearch-printing-char isearch-printing-char nil nil isearch-exit nil nil nil isearch-quote-char isearch-repeat-backward isearch-repeat-forward nil nil nil isearch-yank-word-or-char (keymap (56 keymap (13 . isearch-other-control-char)) (t . isearch-other-control-char)) isearch-yank-kill nil (keymap (67108901 . isearch-query-replace-regexp) (37 . isearch-query-replace) (101 . isearch-edit-string) (114 . isearch-toggle-regexp) (99 . isearch-toggle-case-fold) (9 . isearch-complete) (121 . isearch-yank-pop) (112 . isearch-ring-retreat) (110 . isearch-ring-advance) (115 keymap (104 keymap (114 . isearch-highlight-regexp)) (111 . isearch-occur) (32 . isearch-toggle-lax-whitespace) (95 . isearch-toggle-symbol) (119 . isearch-toggle-word) (114 . isearch-toggle-regexp) (99 . isearch-toggle-case-fold) (5 . isearch-yank-line)) (25 . isearch-yank-char) (23 . isearch-del-char) (escape keymap (escape . isearch-cancel)) (27 keymap (27 . isearch-cancel)) (18 . isearch-repeat-backward) (19 . isearch-repeat-forward) (t . isearch-other-meta-char)) isearch-toggle-input-method nil isearch-toggle-specified-input-method nil isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-delete-char] 
#^^[3 128 isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char] isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char] isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char] isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char isearch-printing-char] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693868))) (down-mouse-2) (mouse-2 . isearch-mouse-2) (language-change) (mouse-movement) (make-frame-visible) (iconify-frame) (delete-frame) (switch-frame) (f1 keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693884))) (113 . help-quit) (109 . isearch-describe-mode) (107 . isearch-describe-key) (98 . isearch-describe-bindings) (63 . isearch-help-for-help) (f1 . isearch-help-for-help) (help . isearch-help-for-help) (8 . isearch-help-for-help) (t . isearch-other-control-char)) (help keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693884))) (113 . help-quit) (109 . isearch-describe-mode) (107 . isearch-describe-key) (98 . isearch-describe-bindings) (63 . isearch-help-for-help) (f1 . isearch-help-for-help) (help . isearch-help-for-help) (8 . isearch-help-for-help) (t . isearch-other-control-char)) (33554464 . isearch-printing-char) (escape keymap (67108901 . isearch-query-replace-regexp) (37 . isearch-query-replace) (101 . isearch-edit-string) (114 . isearch-toggle-regexp) (99 . isearch-toggle-case-fold) (9 . isearch-complete) (121 . isearch-yank-pop) (112 . isearch-ring-retreat) (110 . isearch-ring-advance) (115 keymap (104 keymap (114 . isearch-highlight-regexp)) (111 . isearch-occur) (32 . isearch-toggle-lax-whitespace) (95 . isearch-toggle-symbol) (119 . isearch-toggle-word) (114 . isearch-toggle-regexp) (99 . isearch-toggle-case-fold) (5 . isearch-yank-line)) (25 . isearch-yank-char) (23 . isearch-del-char) (escape keymap (escape . isearch-cancel)) (27 keymap (27 . isearch-cancel)) (18 . isearch-repeat-backward) (19 . isearch-repeat-forward) (t . isearch-other-meta-char)) (t . isearch-other-control-char)) sp-pair-overlay-keymap-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693909) ergoemacs-mode us)))) (ergoemacs-remap keymap (keyboard-quit . sp-remove-active-pair-overlay)))) nil) sp-pair-overlay-keymap-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693909) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693909) ergoemacs-mode us)))) (ergoemacs-remap keymap (keyboard-quit . sp-remove-active-pair-overlay))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693909))) (7 . sp-remove-active-pair-overlay)) sh-mode-852438d026c018c4307b916406f98c62-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693640) ergoemacs-mode us)))))) nil) sh-mode-852438d026c018c4307b916406f98c62-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693640) ergoemacs-unbound us))))) debugger-mode-852438d026c018c4307b916406f98c62-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693635) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (mouse-yank-primary . push-button) (newline . debug-help-follow)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph)))) nil) debugger-mode-852438d026c018c4307b916406f98c62-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693635) ergoemacs-unbound us))))) :minor-mode-map-alist:racer-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693631) ergoemacs-mode us)))) (ergoemacs-remap keymap (find-tag . racer-find-definition) (tags-loop-continue . pop-tag-mark)))) nil) :minor-mode-map-alist:racer-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693631) ergoemacs-unbound us)))) keymap (keymap (27 keymap (46 . racer-find-definition)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (hook-map rust-mode-hook lambda))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693631) ergoemacs-mode us)))) (ergoemacs-remap keymap (find-tag . racer-find-definition) (tags-loop-continue . pop-tag-mark))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693435))) (27 keymap (44 . pop-tag-mark) (46 . racer-find-definition))) rust-mode-1aa56f5af1f2ead0003ab87c5fb3d298-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693742) ergoemacs-mode us)))) (ergoemacs-remap keymap (find-tag . racer-find-definition) (indent-for-tab-command . racer-complete-or-indent)))) nil) rust-mode-1aa56f5af1f2ead0003ab87c5fb3d298-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693742) ergoemacs-unbound us)))) keymap (keymap (27 keymap (46 . racer-find-definition)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (hook-map rust-mode-hook lambda))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693742) ergoemacs-mode us)))) (ergoemacs-remap keymap (find-tag . racer-find-definition) (indent-for-tab-command . racer-complete-or-indent))) (keymap (ergoemacs-remap keymap (find-tag)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (hook-map after-change-major-mode-hook global-font-lock-mode-enable-in-buffers))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693742))) (9 . racer-complete-or-indent) (27 keymap (46 . racer-find-definition)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693895))) (27 keymap (17 . prog-indent-sexp))) minibuffer-local-must-match-map-13cb9e4836c82bf4e3355ddc02312d16-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693842) ergoemacs-mode us)))) (ergoemacs-remap keymap (scroll-up-command . next-history-element) (next-line . next-history-element) (next-buffer . next-history-element) (previous-line . previous-history-element) (previous-buffer . previous-history-element) (keyboard-quit . abort-recursive-edit) (indent-for-tab-command . minibuffer-complete) (scroll-down-command . switch-to-completions) (newline . minibuffer-complete-and-exit) (newline-and-indent . minibuffer-complete-and-exit)) (27 keymap (114 . kill-word)))) nil) minibuffer-local-must-match-map-13cb9e4836c82bf4e3355ddc02312d16-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693842) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693842) ergoemacs-mode us)))) (ergoemacs-remap keymap (scroll-up-command . next-history-element) (next-line . next-history-element) (next-buffer . next-history-element) (previous-line . previous-history-element) (previous-buffer . previous-history-element) (keyboard-quit . abort-recursive-edit) (indent-for-tab-command . minibuffer-complete) (scroll-down-command . switch-to-completions) (newline . minibuffer-complete-and-exit) (newline-and-indent . minibuffer-complete-and-exit)) (27 keymap (114 . kill-word))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693842))) (10 . minibuffer-complete-and-exit) (13 . minibuffer-complete-and-exit) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693837))) (menu-bar keymap (minibuf "Minibuf" keymap (tab menu-item "Complete" minibuffer-complete :help "Complete as far as possible") (space menu-item "Complete Word" minibuffer-complete-word :help "Complete at most one word") (63 menu-item "List Completions" minibuffer-completion-help :help "Display all possible completions") "Minibuf")) (27 keymap (118 . switch-to-completions)) (prior . switch-to-completions) (63 . minibuffer-completion-help) (32 . minibuffer-complete-word) (9 . minibuffer-complete) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693465))) (menu-bar keymap (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . abort-recursive-edit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) :minor-mode-map-alist:flycheck-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693539) ergoemacs-mode us)))))) nil) :minor-mode-map-alist:flycheck-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693539) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693539) ergoemacs-mode us))))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693539))) (menu-bar keymap (flycheck keymap "Syntax Checking" (Enable\ on-the-fly\ syntax\ checking menu-item "Enable on-the-fly syntax checking" flycheck-mode :enable (or flycheck-mode (flycheck-get-checker-for-buffer)) :button (:toggle . flycheck-mode)) (Check\ current\ buffer menu-item "Check current buffer" flycheck-buffer :enable flycheck-mode) (Clear\ errors\ in\ buffer menu-item "Clear errors in buffer" flycheck-clear) (nil menu-item "---") (Go\ to\ next\ error menu-item "Go to next error" flycheck-next-error :enable flycheck-mode) (Go\ to\ previous\ error menu-item "Go to previous error" flycheck-previous-error :enable flycheck-mode) (Show\ all\ errors menu-item "Show all errors" flycheck-list-errors :enable flycheck-mode) (nil-7 menu-item "---") (Copy\ messages\ at\ point menu-item "Copy messages at point" flycheck-copy-errors-as-kill :enable (flycheck-overlays-at (point))) (nil-9 menu-item "---") (Select\ syntax\ checker menu-item "Select syntax checker" flycheck-select-checker :enable flycheck-mode) (Disable\ syntax\ checker menu-item "Disable syntax checker" flycheck-disable-checker :enable flycheck-mode) (Set\ executable\ of\ syntax\ checker menu-item "Set executable of syntax checker" flycheck-set-checker-executable :enable flycheck-mode) (nil-13 menu-item "---") (Describe\ syntax\ checker menu-item "Describe syntax checker" flycheck-describe-checker) (Show\ Flycheck\ version menu-item "Show Flycheck version" flycheck-version) (Read\ the\ Flycheck\ manual menu-item "Read the Flycheck manual" flycheck-info))) (3 keymap (33 keymap (120 . flycheck-disable-checker) (118 . flycheck-verify-setup) (86 . flycheck-version) (105 . flycheck-info) (63 . flycheck-describe-checker) (101 . flycheck-set-checker-executable) (115 . flycheck-select-checker) (23 . flycheck-copy-errors-as-kill) (108 . flycheck-list-errors) (112 . flycheck-previous-error) (110 . flycheck-next-error) (3 . flycheck-compile) (67 . flycheck-clear) (99 . flycheck-buffer)))) completion-list-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693853) ergoemacs-mode us)))) (ergoemacs-remap keymap (mouse-yank-primary . mouse-choose-completion) (newline . choose-completion) (keyboard-escape-quit . delete-completion-window) (left-char . previous-completion) (right-char . next-completion)))) nil) completion-list-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693853) ergoemacs-unbound us))))) flycheck-error-list-mode-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693442) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (delete-backward-char . scroll-down-command) (mouse-yank-primary . mouse-select-window) (newline . flycheck-error-list-goto-error)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . scroll-down-command)))) nil) flycheck-error-list-mode-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693442) ergoemacs-unbound us))))) button-map-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693932) ergoemacs-mode us)))) (ergoemacs-remap keymap (newline . push-button) (mouse-yank-primary . push-button)))) nil) button-map-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693932) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693932) ergoemacs-mode us)))) (ergoemacs-remap keymap (newline . push-button) (mouse-yank-primary . push-button))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693932))) (mouse-2 . push-button) (13 . push-button)) markdown-mode-852438d026c018c4307b916406f98c62-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693832) ergoemacs-mode us)))) (ergoemacs-remap keymap (left-word . markdown-promote) (right-word . markdown-demote) (backward-paragraph . markdown-backward-paragraph) (forward-paragraph . markdown-forward-paragraph) (newline . markdown-enter-key)) (27 keymap (9 . markdown-backward-paragraph) (67108873 . markdown-backward-paragraph) (11 . markdown-forward-paragraph)))) nil) markdown-mode-852438d026c018c4307b916406f98c62-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693832) ergoemacs-unbound us))))) Custom-mode-852438d026c018c4307b916406f98c62-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693944) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . widget-forward) (complete-symbol . widget-backward) (mouse-drag-region . widget-button-click) (delete-backward-char . scroll-down-command) (save-buffer . Custom-save) (newline . Custom-newline)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . scroll-down-command)))) nil) Custom-mode-852438d026c018c4307b916406f98c62-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693944) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693944) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . widget-forward) (complete-symbol . widget-backward) (mouse-drag-region . widget-button-click) (delete-backward-char . scroll-down-command) (save-buffer . Custom-save) (newline . Custom-newline)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . scroll-down-command))) keymap #^[nil nil keymap 
#^^[3 0 nil nil nil (keymap (3 . Custom-set)) nil nil nil nil nil nil nil nil nil Custom-newline nil nil nil nil nil nil nil nil nil nil (keymap (19 . Custom-save)) nil nil nil nil nil nil nil scroll-up-command nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil widget-forward nil widget-backward Custom-buffer-done nil nil nil Custom-goto-parent nil nil nil nil nil nil nil nil nil scroll-down-command] #^^[1 0 #^^[2 0 
#^^[3 0 nil nil nil (keymap (3 . Custom-set)) nil nil nil nil nil nil nil nil nil Custom-newline nil nil nil nil nil nil nil nil nil nil (keymap (19 . Custom-save)) nil nil nil nil nil nil nil scroll-up-command nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil widget-forward nil widget-backward Custom-buffer-done nil nil nil Custom-goto-parent nil nil nil nil nil nil nil nil nil scroll-down-command] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693944))) (menu-bar keymap (Custom menu-item "Custom" (keymap "Custom" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693902))) (Customize menu-item "Customize" nil :filter (lambda (menu) (easy-menu-filter-return ((lambda (&rest junk) (let ((menu (custom-menu-create (quote customize)))) (if (consp menu) (cdr menu) menu))) menu) "Customize"))) (\ Apply\  menu-item " Apply " Custom-set :help "Apply settings (for the current session only)") (\ Apply\ and\ Save\  menu-item " Apply and Save " Custom-save :help "Apply settings and save for future sessions.") (\ Undo\ Edits\  menu-item " Undo Edits " Custom-reset-current :help "Restore customization buffer to reflect existing settings.") (\ Reset\ Customizations\  menu-item " Reset Customizations " Custom-reset-saved :help "Undo any settings applied only for the current session.") (\ Erase\ Customizations\  menu-item " Erase Customizations " Custom-reset-standard :help "Un-customize settings in this and future sessions.") (\ Help\ for\ Customize\  menu-item " Help for Customize " Custom-help :help "Get help for using Customize.") (\ Exit\  menu-item " Exit " Custom-buffer-done :help "Exit Customize.")))) (remap keymap (self-insert-command . Custom-no-edit)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693942))) (13 . widget-button-press) (down-mouse-1 . widget-button-click) (down-mouse-2 . widget-button-click) (backtab . widget-backward) (S-tab . widget-backward) (27 keymap (9 . widget-backward)) (9 . widget-forward)) custom-mode-link-map-composed-key-60660ac5d9bb96506993807c6dd481e3 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693872) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . widget-forward) (complete-symbol . widget-backward) (delete-backward-char . scroll-down-command) (save-buffer . Custom-save) (newline . Custom-newline) (mouse-drag-region . mouse-drag-region) (mouse-yank-primary . widget-move-and-invoke)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . scroll-down-command)))) nil) custom-mode-link-map-unbound-keymap-60660ac5d9bb96506993807c6dd481e3 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693872) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693872) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . widget-forward) (complete-symbol . widget-backward) (delete-backward-char . scroll-down-command) (save-buffer . Custom-save) (newline . Custom-newline) (mouse-drag-region . mouse-drag-region) (mouse-yank-primary . widget-move-and-invoke)) (27 keymap (67108873 . backward-paragraph) (9 . backward-paragraph) (100 . scroll-down-command))) keymap #^[nil nil keymap nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693872))) (mouse-2 . widget-move-and-invoke) (down-mouse-1 . mouse-drag-region) (down-mouse-2) keymap #^[nil nil keymap 
#^^[3 0 nil nil nil (keymap (3 . Custom-set)) nil nil nil nil nil nil nil nil nil Custom-newline nil nil nil nil nil nil nil nil nil nil (keymap (19 . Custom-save)) nil nil nil nil nil nil nil scroll-up-command nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil widget-forward nil widget-backward Custom-buffer-done nil nil nil Custom-goto-parent nil nil nil nil nil nil nil nil nil scroll-down-command] #^^[1 0 #^^[2 0 
#^^[3 0 nil nil nil (keymap (3 . Custom-set)) nil nil nil nil nil nil nil nil nil Custom-newline nil nil nil nil nil nil nil nil nil nil (keymap (19 . Custom-save)) nil nil nil nil nil nil nil scroll-up-command nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil widget-forward nil widget-backward Custom-buffer-done nil nil nil Custom-goto-parent nil nil nil nil nil nil nil nil nil scroll-down-command] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693944))) (menu-bar keymap (Custom menu-item "Custom" (keymap "Custom" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693902))) (Customize menu-item "Customize" nil :filter (lambda (menu) (easy-menu-filter-return ((lambda (&rest junk) (let ((menu (custom-menu-create (quote customize)))) (if (consp menu) (cdr menu) menu))) menu) "Customize"))) (\ Apply\  menu-item " Apply " Custom-set :help "Apply settings (for the current session only)") (\ Apply\ and\ Save\  menu-item " Apply and Save " Custom-save :help "Apply settings and save for future sessions.") (\ Undo\ Edits\  menu-item " Undo Edits " Custom-reset-current :help "Restore customization buffer to reflect existing settings.") (\ Reset\ Customizations\  menu-item " Reset Customizations " Custom-reset-saved :help "Undo any settings applied only for the current session.") (\ Erase\ Customizations\  menu-item " Erase Customizations " Custom-reset-standard :help "Un-customize settings in this and future sessions.") (\ Help\ for\ Customize\  menu-item " Help for Customize " Custom-help :help "Get help for using Customize.") (\ Exit\  menu-item " Exit " Custom-buffer-done :help "Exit Customize.")))) (remap keymap (self-insert-command . Custom-no-edit)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693942))) (13 . widget-button-press) (down-mouse-1 . widget-button-click) (down-mouse-2 . widget-button-click) (backtab . widget-backward) (S-tab . widget-backward) (27 keymap (9 . widget-backward)) (9 . widget-forward))))] ergoemacs-map-properties--indirect-keymaps [object pcache-entry "pcache-entry" 1441053127.0503416 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ())] ergoemacs-map-properties--key-struct [object pcache-entry "pcache-entry" 1441053127.053839 7776000 #s(hash-table size 325 test eql rehash-size 1.5 rehash-threshold 0.8 data (2305843009213693949 (:map-key 2305843009213693949) 2305843009213693950 (:map-key 2305843009213693950) -2305843009213693750 (:map-key -2305843009213693750) -2305843009213693749 (:map-key -2305843009213693749) -2305843009213693748 (:map-key -2305843009213693748) -2305843009213693820 (:map-key -2305843009213693820) -2305843009213693903 (:map-key -2305843009213693903) -2305843009213693888 (:map-key -2305843009213693888) -2305843009213693747 (:map-key -2305843009213693747) -2305843009213693878 (:map-key -2305843009213693878) -2305843009213693853 (:map-key -2305843009213693853) -2305843009213693843 (:map-key -2305843009213693843) -2305843009213693875 (:map-key -2305843009213693875) -2305843009213693841 (:map-key -2305843009213693841) -2305843009213693948 (:map-key -2305843009213693948 :parent (:map-key -2305843009213693841)) -2305843009213693769 (:map-key -2305843009213693769) -2305843009213693870 (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769)) -2305843009213693823 (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))) -2305843009213693931 (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769)))) -2305843009213693746 (:map-key -2305843009213693746 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693926 (:map-key -2305843009213693926) -2305843009213693895 (:map-key -2305843009213693895) -2305843009213693742 (:map-key -2305843009213693742 :parent (:map-key -2305843009213693895)) -2305843009213693741 (:map-key -2305843009213693741) -2305843009213693783 (:map-key -2305843009213693783) -2305843009213693868 (:map-key -2305843009213693868) -2305843009213693845 (:map-key -2305843009213693845) -2305843009213693919 (:map-key -2305843009213693919) -2305843009213693739 (:map-key -2305843009213693739 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693767 (:map-key -2305843009213693767) -2305843009213693768 (:map-key -2305843009213693768) -2305843009213693824 (:map-key -2305843009213693824) -2305843009213693825 (:map-key -2305843009213693825 :parent (:map-key -2305843009213693769)) -2305843009213693773 (:map-key -2305843009213693773) -2305843009213693914 (:map-key -2305843009213693914) -2305843009213693826 (:map-key -2305843009213693826 :parent (:map-key -2305843009213693914)) -2305843009213693899 (:map-key -2305843009213693899 :parent (:map-key -2305843009213693914)) -2305843009213693827 (:map-key -2305843009213693827 :parent (:map-key -2305843009213693899 :parent (:map-key -2305843009213693914))) -2305843009213693932 (:map-key -2305843009213693932) -2305843009213693776 (:map-key -2305843009213693776 :parent (:map-key -2305843009213693932)) -2305843009213693828 (:map-key -2305843009213693828) -2305843009213693778 (:map-key -2305843009213693778) -2305843009213693779 (:map-key -2305843009213693779) -2305843009213693780 (:map-key -2305843009213693780) -2305843009213693830 (:map-key -2305843009213693830) -2305843009213693831 (:map-key -2305843009213693831) -2305843009213693832 (:map-key -2305843009213693832) -2305843009213693833 (:map-key -2305843009213693833 :parent (:map-key -2305843009213693899 :parent (:map-key -2305843009213693914))) -2305843009213693834 (:map-key -2305843009213693834) -2305843009213693787 (:map-key -2305843009213693787) -2305843009213693788 (:map-key -2305843009213693788) -2305843009213693862 (:map-key -2305843009213693862) -2305843009213693789 (:map-key -2305843009213693789 :parent (:map-key -2305843009213693862)) -2305843009213693790 (:map-key -2305843009213693790) -2305843009213693836 (:map-key -2305843009213693836) -2305843009213693837 (:map-key -2305843009213693837 :parent (:map-key -2305843009213693769)) -2305843009213693793 (:map-key -2305843009213693793) -2305843009213693838 (:map-key -2305843009213693838) -2305843009213693795 (:map-key -2305843009213693795) -2305843009213693887 (:map-key -2305843009213693887) -2305843009213693839 (:map-key -2305843009213693839 :parent (:map-key -2305843009213693887)) -2305843009213693840 (:map-key -2305843009213693840) -2305843009213693842 (:map-key -2305843009213693842 :parent (:map-key -2305843009213693837 :parent (:map-key -2305843009213693769))) -2305843009213693844 (:map-key -2305843009213693844) -2305843009213693846 (:map-key -2305843009213693846) -2305843009213693847 (:map-key -2305843009213693847) -2305843009213693805 (:map-key -2305843009213693805) -2305843009213693848 (:map-key -2305843009213693848) -2305843009213693849 (:map-key -2305843009213693849) -2305843009213693850 (:map-key -2305843009213693850) -2305843009213693851 (:map-key -2305843009213693851) -2305843009213693810 (:map-key -2305843009213693810 :parent (:map-key -2305843009213693868)) -2305843009213693852 (:map-key -2305843009213693852) -2305843009213693854 (:map-key -2305843009213693854) -2305843009213693814 (:map-key -2305843009213693814) -2305843009213693855 (:map-key -2305843009213693855) -2305843009213693856 (:map-key -2305843009213693856) -2305843009213693817 (:map-key -2305843009213693817 :parent (:map-key -2305843009213693932)) -2305843009213693857 (:map-key -2305843009213693857) -2305843009213693858 (:map-key -2305843009213693858) -2305843009213693869 (:map-key -2305843009213693869) -2305843009213693859 (:map-key -2305843009213693859) -2305843009213693860 (:map-key -2305843009213693860) -2305843009213693863 (:map-key -2305843009213693863) -2305843009213693864 (:map-key -2305843009213693864) -2305843009213693865 (:map-key -2305843009213693865) -2305843009213693866 (:map-key -2305843009213693866 :parent (:map-key -2305843009213693769)) -2305843009213693867 (:map-key -2305843009213693867) -2305843009213693871 (:map-key -2305843009213693871) -2305843009213693952 (:map-key -2305843009213693952) -2305843009213693942 (:map-key -2305843009213693942) -2305843009213693944 (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942)) -2305843009213693872 (:map-key -2305843009213693872 :parent (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942))) -2305843009213693873 (:map-key -2305843009213693873) -2305843009213693874 (:map-key -2305843009213693874) -2305843009213693876 (:map-key -2305843009213693876) -2305843009213693877 (:map-key -2305843009213693877) -2305843009213693879 (:map-key -2305843009213693879 :parent (:map-key -2305843009213693862)) -2305843009213693880 (:map-key -2305843009213693880) -2305843009213693882 (:map-key -2305843009213693882) -2305843009213693883 (:map-key -2305843009213693883) -2305843009213693884 (:map-key -2305843009213693884) -2305843009213693885 (:map-key -2305843009213693885) -2305843009213693886 (:map-key -2305843009213693886) -2305843009213693889 (:map-key -2305843009213693889) -2305843009213693890 (:map-key -2305843009213693890) -2305843009213693891 (:map-key -2305843009213693891) -2305843009213693892 (:map-key -2305843009213693892) -2305843009213693894 (:map-key -2305843009213693894) -2305843009213693896 (:map-key -2305843009213693896) -2305843009213693897 (:map-key -2305843009213693897 :parent (:map-key -2305843009213693841)) -2305843009213693900 (:map-key -2305843009213693900) -2305843009213693901 (:map-key -2305843009213693901) -2305843009213693902 (:map-key -2305843009213693902) -2305843009213693904 (:map-key -2305843009213693904) -2305843009213693906 (:map-key -2305843009213693906 :parent (:map-key -2305843009213693873)) -2305843009213693907 (:map-key -2305843009213693907) -2305843009213693908 (:map-key -2305843009213693908) -2305843009213693909 (:map-key -2305843009213693909) -2305843009213693912 (:map-key -2305843009213693912) -2305843009213693913 (:map-key -2305843009213693913) -2305843009213693915 (:map-key -2305843009213693915) -2305843009213693916 (:map-key -2305843009213693916) -2305843009213693905 (:map-key -2305843009213693905) -2305843009213693918 (:map-key -2305843009213693918) -2305843009213693920 (:map-key -2305843009213693920) -2305843009213693921 (:map-key -2305843009213693921) -2305843009213693922 (:map-key -2305843009213693922) -2305843009213693923 (:map-key -2305843009213693923) -2305843009213693924 (:map-key -2305843009213693924) -2305843009213693925 (:map-key -2305843009213693925) nil (:map-key -2305843009213693424 :parent (:map-key -2305843009213693478)) -2305843009213693927 (:map-key -2305843009213693927) -2305843009213693928 (:map-key -2305843009213693928) -2305843009213693929 (:map-key -2305843009213693929) -2305843009213693930 (:map-key -2305843009213693930) -2305843009213693933 (:map-key -2305843009213693933) -2305843009213693935 (:map-key -2305843009213693935) -2305843009213693934 (:map-key -2305843009213693934 :parent (:map-key -2305843009213693735 :parent (:map-key -2305843009213693897 :parent (:map-key -2305843009213693841)))) -2305843009213693936 (:map-key -2305843009213693936 :parent (:map-key -2305843009213693769)) -2305843009213693939 (:map-key -2305843009213693939) -2305843009213693938 (:map-key -2305843009213693938) -2305843009213693940 (:map-key -2305843009213693940) -2305843009213693941 (:map-key -2305843009213693941) -2305843009213693943 (:map-key -2305843009213693943 :parent (:map-key -2305843009213693932)) -2305843009213693945 (:map-key -2305843009213693945) -2305843009213693946 (:map-key -2305843009213693946) -2305843009213693949 (:map-key -2305843009213693949) -2305843009213693950 (:map-key -2305843009213693950) -2305843009213693697 (:map-key -2305843009213693697) -2305843009213693695 (:map-key -2305843009213693695 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693692 (:map-key -2305843009213693692 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693690 (:map-key -2305843009213693690) -2305843009213693713 (:map-key -2305843009213693713) -2305843009213693714 (:map-key -2305843009213693714) -2305843009213693715 (:map-key -2305843009213693715) -2305843009213693716 (:map-key -2305843009213693716) -2305843009213693717 (:map-key -2305843009213693717) -2305843009213693719 (:map-key -2305843009213693719) -2305843009213693720 (:map-key -2305843009213693720) -2305843009213693722 (:map-key -2305843009213693722) -2305843009213693723 (:map-key -2305843009213693723) -2305843009213693724 (:map-key -2305843009213693724) -2305843009213693725 (:map-key -2305843009213693725) -2305843009213693726 (:map-key -2305843009213693726) -2305843009213693727 (:map-key -2305843009213693727) -2305843009213693728 (:map-key -2305843009213693728) -2305843009213693729 (:map-key -2305843009213693729) -2305843009213693730 (:map-key -2305843009213693730) -2305843009213693731 (:map-key -2305843009213693731 :parent (:map-key -2305843009213693714)) -2305843009213693732 (:map-key -2305843009213693732 :parent (:map-key -2305843009213693688 :parent (:map-key -2305843009213693727))) -2305843009213693733 (:map-key -2305843009213693733 :parent (:map-key -2305843009213693714)) -2305843009213693734 (:map-key -2305843009213693734) -2305843009213693650 (:map-key -2305843009213693650) -2305843009213693649 (:map-key -2305843009213693649 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693646 (:map-key -2305843009213693646 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693643 (:map-key -2305843009213693643 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693641 (:map-key -2305843009213693641 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693640 (:map-key -2305843009213693640 :parent (:map-key -2305843009213693895)) -2305843009213693638 (:map-key -2305843009213693638) -2305843009213693637 (:map-key -2305843009213693637 :parent (:map-key -2305843009213693889)) -2305843009213693635 (:map-key -2305843009213693635 :parent (:map-key -2305843009213693914)) -2305843009213693631 (:map-key -2305843009213693631) -2305843009213693666 (:map-key -2305843009213693666) -2305843009213693667 (:map-key -2305843009213693667) -2305843009213693668 (:map-key -2305843009213693668) -2305843009213693669 (:map-key -2305843009213693669) -2305843009213693670 (:map-key -2305843009213693670) -2305843009213693672 (:map-key -2305843009213693672) -2305843009213693673 (:map-key -2305843009213693673) -2305843009213693675 (:map-key -2305843009213693675) -2305843009213693676 (:map-key -2305843009213693676) -2305843009213693677 (:map-key -2305843009213693677) -2305843009213693678 (:map-key -2305843009213693678) -2305843009213693679 (:map-key -2305843009213693679) -2305843009213693680 (:map-key -2305843009213693680) -2305843009213693681 (:map-key -2305843009213693681) -2305843009213693682 (:map-key -2305843009213693682) -2305843009213693683 (:map-key -2305843009213693683) -2305843009213693684 (:map-key -2305843009213693684 :parent (:map-key -2305843009213693667)) -2305843009213693685 (:map-key -2305843009213693685 :parent (:map-key -2305843009213693628 :parent (:map-key -2305843009213693680))) -2305843009213693686 (:map-key -2305843009213693686 :parent (:map-key -2305843009213693667)) -2305843009213693687 (:map-key -2305843009213693687) -2305843009213693590 (:map-key -2305843009213693590) -2305843009213693589 (:map-key -2305843009213693589 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693587 (:map-key -2305843009213693587) -2305843009213693606 (:map-key -2305843009213693606) -2305843009213693607 (:map-key -2305843009213693607) -2305843009213693608 (:map-key -2305843009213693608) -2305843009213693609 (:map-key -2305843009213693609) -2305843009213693610 (:map-key -2305843009213693610) -2305843009213693612 (:map-key -2305843009213693612) -2305843009213693613 (:map-key -2305843009213693613) -2305843009213693615 (:map-key -2305843009213693615) -2305843009213693616 (:map-key -2305843009213693616) -2305843009213693617 (:map-key -2305843009213693617) -2305843009213693618 (:map-key -2305843009213693618) -2305843009213693619 (:map-key -2305843009213693619) -2305843009213693620 (:map-key -2305843009213693620) -2305843009213693621 (:map-key -2305843009213693621) -2305843009213693622 (:map-key -2305843009213693622) -2305843009213693623 (:map-key -2305843009213693623) -2305843009213693624 (:map-key -2305843009213693624 :parent (:map-key -2305843009213693607)) -2305843009213693625 (:map-key -2305843009213693625 :parent (:map-key -2305843009213693585 :parent (:map-key -2305843009213693620))) -2305843009213693626 (:map-key -2305843009213693626 :parent (:map-key -2305843009213693607)) -2305843009213693627 (:map-key -2305843009213693627) -2305843009213693547 (:map-key -2305843009213693547) -2305843009213693546 (:map-key -2305843009213693546 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693544 (:map-key -2305843009213693544) -2305843009213693542 (:map-key -2305843009213693542) -2305843009213693539 (:map-key -2305843009213693539) -2305843009213693538 (:map-key -2305843009213693538 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693563 (:map-key -2305843009213693563) -2305843009213693564 (:map-key -2305843009213693564) -2305843009213693565 (:map-key -2305843009213693565) -2305843009213693566 (:map-key -2305843009213693566) -2305843009213693567 (:map-key -2305843009213693567) -2305843009213693569 (:map-key -2305843009213693569) -2305843009213693570 (:map-key -2305843009213693570) -2305843009213693572 (:map-key -2305843009213693572) -2305843009213693573 (:map-key -2305843009213693573) -2305843009213693574 (:map-key -2305843009213693574) -2305843009213693575 (:map-key -2305843009213693575) -2305843009213693576 (:map-key -2305843009213693576) -2305843009213693577 (:map-key -2305843009213693577) -2305843009213693578 (:map-key -2305843009213693578) -2305843009213693579 (:map-key -2305843009213693579) -2305843009213693580 (:map-key -2305843009213693580) -2305843009213693581 (:map-key -2305843009213693581 :parent (:map-key -2305843009213693564)) -2305843009213693582 (:map-key -2305843009213693582 :parent (:map-key -2305843009213693534 :parent (:map-key -2305843009213693577))) -2305843009213693583 (:map-key -2305843009213693583 :parent (:map-key -2305843009213693564)) -2305843009213693584 (:map-key -2305843009213693584) -2305843009213693496 (:map-key -2305843009213693496) -2305843009213693495 (:map-key -2305843009213693495 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693493 (:map-key -2305843009213693493 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693492 (:map-key -2305843009213693492) -2305843009213693490 (:map-key -2305843009213693490 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693512 (:map-key -2305843009213693512) -2305843009213693513 (:map-key -2305843009213693513) -2305843009213693514 (:map-key -2305843009213693514) -2305843009213693515 (:map-key -2305843009213693515) -2305843009213693516 (:map-key -2305843009213693516) -2305843009213693518 (:map-key -2305843009213693518) -2305843009213693519 (:map-key -2305843009213693519) -2305843009213693521 (:map-key -2305843009213693521) -2305843009213693522 (:map-key -2305843009213693522) -2305843009213693523 (:map-key -2305843009213693523) -2305843009213693524 (:map-key -2305843009213693524) -2305843009213693525 (:map-key -2305843009213693525) -2305843009213693526 (:map-key -2305843009213693526) -2305843009213693527 (:map-key -2305843009213693527) -2305843009213693528 (:map-key -2305843009213693528) -2305843009213693529 (:map-key -2305843009213693529) -2305843009213693530 (:map-key -2305843009213693530 :parent (:map-key -2305843009213693513)) -2305843009213693531 (:map-key -2305843009213693531 :parent (:map-key -2305843009213693486 :parent (:map-key -2305843009213693526))) -2305843009213693532 (:map-key -2305843009213693532 :parent (:map-key -2305843009213693513)) -2305843009213693533 (:map-key -2305843009213693533) -2305843009213693448 (:map-key -2305843009213693448) -2305843009213693446 (:map-key -2305843009213693446 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693444 (:map-key -2305843009213693444) -2305843009213693442 (:map-key -2305843009213693442 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693436 (:map-key -2305843009213693436) -2305843009213693435 (:map-key -2305843009213693435 :parent (:map-key -2305843009213693889)) -2305843009213693433 (:map-key -2305843009213693433 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693441 (:map-key -2305843009213693441 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) -2305843009213693439 (:map-key -2305843009213693439 :parent (:map-key -2305843009213693889)) -2305843009213693438 (:map-key -2305843009213693438 :parent (:map-key -2305843009213693889)) -2305843009213693434 (:map-key -2305843009213693434) -2305843009213693429 (:map-key -2305843009213693429 :parent (:map-key -2305843009213693889)) -2305843009213693427 (:map-key -2305843009213693427 :parent (:map-key -2305843009213693889)) -2305843009213693464 (:map-key -2305843009213693464) -2305843009213693465 (:map-key -2305843009213693465) -2305843009213693466 (:map-key -2305843009213693466) -2305843009213693467 (:map-key -2305843009213693467) -2305843009213693468 (:map-key -2305843009213693468) -2305843009213693470 (:map-key -2305843009213693470) -2305843009213693471 (:map-key -2305843009213693471) -2305843009213693473 (:map-key -2305843009213693473) -2305843009213693474 (:map-key -2305843009213693474) -2305843009213693475 (:map-key -2305843009213693475) -2305843009213693476 (:map-key -2305843009213693476) -2305843009213693477 (:map-key -2305843009213693477) -2305843009213693478 (:map-key -2305843009213693478) -2305843009213693479 (:map-key -2305843009213693479) -2305843009213693480 (:map-key -2305843009213693480) -2305843009213693481 (:map-key -2305843009213693481) -2305843009213693482 (:map-key -2305843009213693482 :parent (:map-key -2305843009213693465)) -2305843009213693483 (:map-key -2305843009213693483 :parent (:map-key -2305843009213693424 :parent (:map-key -2305843009213693478))) -2305843009213693484 (:map-key -2305843009213693484 :parent (:map-key -2305843009213693465)) -2305843009213693485 (:map-key -2305843009213693485)))] ergoemacs-map-properties--plist-hash [object pcache-entry "pcache-entry" 1441053127.0767274 7776000 #s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8 data ((:map-key 2305843009213693949) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--modal-parent-map))) (:map-key 2305843009213693950) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--parent-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693820 :parent (:map-key -2305843009213693841)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (emacs-lisp-mode-map))) (:map-key -2305843009213693821) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-indian-environment-map))) (:map-key -2305843009213693822) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-map))) (:map-key -2305843009213693823) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (eudc-tools-menu))) (:map-key -2305843009213693824) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-column-line-number-mode-map))) (:map-key -2305843009213693825 :parent (:map-key -2305843009213693822)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (read-passwd-map))) (:map-key -2305843009213693826 :parent (:map-key -2305843009213693914)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (splash-screen-keymap))) (:map-key -2305843009213693827 :parent (:map-key -2305843009213693899 :parent (:map-key -2305843009213693914))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (package-menu-mode-map))) (:map-key -2305843009213693828) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-major-mode-keymap))) (:map-key -2305843009213693829) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-cyrillic-environment-map))) (:map-key -2305843009213693830) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (kmacro-keymap))) (:map-key -2305843009213693831) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-manuals-menu))) (:map-key -2305843009213693832) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (markdown-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693833 :parent (:map-key -2305843009213693899 :parent (:map-key -2305843009213693914))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (Buffer-menu-mode-map))) (:map-key -2305843009213693834) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (goto-map))) (:map-key -2305843009213693835) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-chinese-environment-map))) (:map-key -2305843009213693836) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-face-menu))) (:map-key -2305843009213693837 :parent (:map-key -2305843009213693822)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-completion-map))) (:map-key -2305843009213693838) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-special-menu))) (:map-key -2305843009213693839 :parent (:map-key -2305843009213693887)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-key-sequence-map))) (:map-key -2305843009213693840) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-buffer-identification-keymap))) (:map-key -2305843009213693841) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (lisp-mode-shared-map))) (:map-key -2305843009213693842 :parent (:map-key -2305843009213693837 :parent (:map-key -2305843009213693822))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-must-match-map))) (:map-key -2305843009213693843) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (org-src-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693844) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (search-map))) (:map-key -2305843009213693845) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (special-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693846) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-ediff-merge-menu))) (:map-key -2305843009213693847) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-foreground-menu))) (:map-key -2305843009213693848) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (occur-menu-map))) (:map-key -2305843009213693849) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-filename-completion-map))) (:map-key -2305843009213693850) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-fringe-ind-menu))) (:map-key -2305843009213693851) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (narrow-map))) (:map-key -2305843009213693852) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (2C-mode-map))) (:map-key -2305843009213693853) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (outline-minor-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693854) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-language-environment-map))) (:map-key -2305843009213693855) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-modal-ignored-keymap))) (:map-key -2305843009213693856) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (custom-field-keymap))) (:map-key -2305843009213693857) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-line-wrapping-menu))) (:map-key -2305843009213693858) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (edit-tab-stops-map))) (:map-key -2305843009213693869) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-files-menu menu-bar-file-menu))) (:map-key -2305843009213693859) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-indentation-menu))) (:map-key -2305843009213693860) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-tool-bar-menu))) (:map-key -2305843009213693861) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-cyrillic-environment-map))) (:map-key -2305843009213693862) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (text-mode-map))) (:map-key -2305843009213693863) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mule-menu-keymap))) (:map-key -2305843009213693864) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-menu))) (:map-key -2305843009213693865) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-ediff-misc-menu))) (:map-key -2305843009213693866 :parent (:map-key -2305843009213693822)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-shell-command-map))) (:map-key -2305843009213693867) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (completion-in-region-mode-map))) (:map-key -2305843009213693868) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (isearch-mode-map) :use-local-unbind-list-key t :use-set-map-key t)) (:map-key -2305843009213693870) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (bookmark-map))) (:map-key -2305843009213693871) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-search-documentation-menu))) (:map-key -2305843009213693952) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (global-map widget-global-map) :extract-keys ([switch-frame] [select-window] [delete-frame] [67108911] [XF86Forward] [XF86Back] [67108912] [67108913] [67108914] [67108915] [67108916] [67108917] [67108918] [67108919] [67108920] [67108921] [67108909] [67108896] [menu] [find] [C-S-backspace] [home] [C-home] [M-home] [left] [up] [right] [down] [prior] [next] [C-up] [C-down] [C-prior] [C-next] [M-next] [M-prior] [end] [C-end] [M-end] [begin] [M-begin] [execute] [insert] [C-insert] [S-insert] [insertchar] [C-insertchar] [S-insertchar] [undo] [redo] [again] [open] [insertline] [deleteline] [deletechar] [mouse-movement] [M-right] [M-left] [C-right] [C-left] [C-delete] [C-backspace] [S-delete] [C-M-left] [C-M-right] [C-M-up] [C-M-down] [C-M-home] [C-M-end] [f3] [f4] [menu-bar mouse-1] [f2 50] [f2 f2] [f2 98] [f2 115] [help 8] [help help] [help f1] [help 46] [help 63] [help 1] [help 3] [help 4] [help 5] [help 6] [help 13] [help 14] [help 15] [help 16] [help 20] [help 23] [help 28] [help 67] [help 70] [help 73] [help 75] [help 76] [help 83] [help 97] [help 98] [help 99] [help 100] [help 101] [help 102] [help 103] [help 104] [help 105] [help 52 105] [help 107] [help 108] [help 109] [help 110] [help 112] [help 80] [help 114] [help 115] [help 116] [help 119] [help 118] [help 113] [f1 8] [f1 help] [f1 f1] [f1 46] [f1 63] [f1 1] [f1 3] [f1 4] [f1 5] [f1 6] [f1 13] [f1 14] [f1 15] [f1 16] [f1 20] [f1 23] [f1 28] [f1 67] [f1 70] [f1 73] [f1 75] [f1 76] [f1 83] [f1 97] [f1 98] [f1 99] [f1 100] [f1 101] [f1 102] [f1 103] [f1 104] [f1 105] [f1 52 105] [f1 107] [f1 108] [f1 109] [f1 110] [f1 112] [f1 80] [f1 114] [f1 115] [f1 116] [f1 119] [f1 118] [f1 113] [compose-last-chars] [M-mouse-1] [M-drag-mouse-1] [M-down-mouse-1] [M-mouse-3] [M-mouse-2] [down-mouse-1] [mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1] [mouse-2] [mouse-3] [C-down-mouse-1] [S-down-mouse-1] [mode-line mouse-1] [mode-line drag-mouse-1] [mode-line down-mouse-1] [mode-line mouse-2] [mode-line mouse-3] [mode-line C-mouse-2] [header-line down-mouse-1] [header-line mouse-1] [vertical-scroll-bar C-mouse-2] [vertical-scroll-bar mouse-1] [vertical-line C-mouse-2] [vertical-line down-mouse-1] [vertical-line mouse-1] [f10] [mouse-4] [S-mouse-4] [C-mouse-4] [mouse-5] [S-mouse-5] [C-mouse-5] [S-mouse-3] [127] [31] [29] [28] [27 67108912] [27 67108913] [27 67108914] [27 67108915] [27 67108916] [27 67108917] [27 67108918] [27 67108919] [27 67108920] [27 67108921] [27 67108909] [27 home] [27 next] [27 prior] [27 33554454] [27 end] [27 begin] [27 right] [27 left] [27 C-left] [27 C-right] [27 C-up] [27 C-down] [27 C-home] [27 C-end] [27 67108896] [27 C-delete] [27 C-backspace] [27 67108911] [27 67108910] [27 67108901] [27 127] [27 126] [27 125] [27 124] [27 123] [27 122] [27 121] [27 120] [27 119] [27 118] [27 117] [27 116] [27 115 111] [27 115 104 114] [27 115 104 112] [27 115 104 108] [27 115 104 117] [27 115 104 119] [27 115 119] [27 115 95] [27 114] [27 113] [27 111 27 111] [27 111 27 83] [27 111 27 115] [27 109] [27 108] [27 107] [27 106] [27 105] [27 104] [27 103 99] [27 103 103] [27 103 27 103] [27 103 27 110] [27 103 27 112] [27 103 110] [27 103 112] [27 103 9] [27 102] [27 101] [27 100] [27 99] [27 98] [27 97] [27 96] [27 94] [27 92] [27 64] [27 62] [27 61] [27 60] [27 59] [27 58] [27 47] [27 46] [27 45] [27 44] [27 42] [27 41] [27 40] [27 39] [27 38] [27 37] [27 36] [27 33] [27 32] [27 28] [27 27 27] [27 27 58] [27 23] [27 22] [27 21] [27 20] [27 19] [27 18] [27 16] [27 15] [27 14] [27 12] [27 11] [27 10] [27 9] [27 8] [27 6] [27 5] [27 4] [27 3] [27 2] [27 1] [27 0] [26] [25] [24 right] [24 C-right] [24 left] [24 C-left] [24 67108896] [24 67108907] [24 67108909] [24 67108925] [24 67108912] [24 127] [24 125] [24 123] [24 122] [24 118 97] [24 118 98] [24 118 99] [24 118 100] [24 118 103] [24 118 104] [24 118 105] [24 118 108] [24 118 76] [24 118 73] [24 118 79] [24 118 109] [24 118 114] [24 118 115] [24 118 117] [24 118 118] [24 118 43] [24 118 61] [24 118 68] [24 118 126] [24 117] [24 115] [24 114 99] [24 114 107] [24 114 100] [24 114 121] [24 114 111] [24 114 116] [24 114 78] [24 114 27 119] [24 114 0] [24 114 67108896] [24 114 32] [24 114 106] [24 114 115] [24 114 120] [24 114 105] [24 114 103] [24 114 114] [24 114 110] [24 114 43] [24 114 119] [24 114 102] [24 114 98] [24 114 109] [24 114 108] [24 113] [24 111] [24 110 110] [24 110 119] [24 110 100] [24 110 112] [24 109] [24 108] [24 107] [24 105] [24 104] [24 102] [24 101] [24 100] [24 98] [24 97 108] [24 97 1] [24 97 103] [24 97 43] [24 97 105 103] [24 97 105 108] [24 97 45] [24 97 101] [24 97 39] [24 97 112] [24 97 110] [24 96] [24 94] [24 93] [24 91] [24 62] [24 61] [24 60] [24 59] [24 56 13] [24 54 50] [24 54 f2] [24 54 98] [24 54 115] [24 53 109] [24 53 98] [24 53 102] [24 53 6] [24 53 114] [24 53 15] [24 53 100] [24 53 46] [24 53 50] [24 53 49] [24 53 48] [24 53 111] [24 52 109] [24 52 97] [24 52 99] [24 52 48] [24 52 102] [24 52 114] [24 52 6] [24 52 98] [24 52 15] [24 52 100] [24 52 46] [24 51] [24 50] [24 49] [24 48] [24 46] [24 45] [24 43] [24 42] [24 41] [24 40] [24 39] [24 36] [24 27 27] [24 27 58] [24 26] [24 24] [24 23] [24 22] [24 21] [24 20] [24 19] [24 18] [24 17] [24 16] [24 15] [24 14] [24 13 102] [24 13 114] [24 13 70] [24 13 116] [24 13 107] [24 13 112] [24 13 120] [24 13 88] [24 13 28] [24 13 99] [24 13 108] [24 12] [24 11 115] [24 11 19] [24 11 11] [24 11 114] [24 11 113] [24 11 14] [24 11 16] [24 11 22] [24 11 4] [24 11 20] [24 11 12] [24 11 6] [24 11 3] [24 11 9] [24 11 1] [24 11 5] [24 11 13] [24 11 101] [24 11 108] [24 11 32] [24 11 98] [24 11 110] [24 9] [24 6] [24 5] [24 4] [24 3] [24 2] [24 0] [23] [22] [21] [20] [19] [18] [17] [16] [15] [14] [13] [12] [11] [10] [9] [8 8] [8 help] [8 f1] [8 46] [8 63] [8 1] [8 3] [8 4] [8 5] [8 6] [8 13] [8 14] [8 15] [8 16] [8 20] [8 23] [8 28] [8 67] [8 70] [8 73] [8 75] [8 76] [8 83] [8 97] [8 98] [8 99] [8 100] [8 101] [8 102] [8 103] [8 104] [8 105] [8 52 105] [8 107] [8 108] [8 109] [8 110] [8 112] [8 80] [8 114] [8 115] [8 116] [8 119] [8 118] [8 113] [7] [6] [5] [4] [2] [1] [0]) :extract-where-is #s(hash-table size 487 test eql rehash-size 1.5 rehash-threshold 0.8 data (set-mark-command ([0]) move-beginning-of-line ([1]) backward-char ([2]) delete-char ([4]) move-end-of-line ([5]) forward-char ([6]) keyboard-quit ([7]) help-quit ([8 113]) describe-variable ([8 118]) where-is ([8 119]) help-with-tutorial ([8 116]) describe-syntax ([8 115]) info-emacs-manual ([8 114]) describe-package ([8 80]) finder-by-keyword ([8 112]) view-emacs-news ([8 110]) describe-mode ([8 109]) view-lossage ([8 108]) describe-key ([8 107]) info-other-window ([8 52 105]) info ([8 105]) view-hello-file ([8 104]) describe-gnu-project ([8 103]) describe-function ([8 102]) view-echo-area-messages ([8 101]) apropos-documentation ([8 100]) describe-key-briefly ([8 99]) describe-bindings ([8 98]) apropos-command ([8 97]) info-lookup-symbol ([8 83]) describe-language-environment ([8 76]) Info-goto-emacs-key-command-node ([8 75]) describe-input-method ([8 73]) Info-goto-emacs-command-node ([8 70]) describe-coding-system ([8 67]) describe-no-warranty ([8 23]) view-emacs-todo ([8 20]) view-emacs-problems ([8 16]) describe-distribution ([8 15]) view-order-manuals ([8 13]) view-emacs-FAQ ([8 6]) view-external-packages ([8 5]) view-emacs-debugging ([8 4]) describe-copying ([8 3]) about-emacs ([8 1]) help-for-help ([8 63]) display-local-help ([8 46]) indent-for-tab-command ([9]) newline-and-indent ([10]) kill-line ([11]) recenter-top-bottom ([12]) newline ([13]) next-line ([14]) open-line ([15]) previous-line ([16]) quoted-insert ([17]) isearch-backward ([18]) isearch-forward ([19]) transpose-chars ([20]) universal-argument ([21]) scroll-up-command ([22]) kill-region ([23]) pop-global-mark ([24 0]) list-buffers ([24 2]) save-buffers-kill-terminal ([24 3]) list-directory ([24 4]) eval-last-sexp ([24 5]) find-file ([24 6]) indent-rigidly ([24 9]) kmacro-name-last-macro ([24 11 110]) kmacro-bind-to-key ([24 11 98]) kmacro-step-edit-macro ([24 11 32]) kmacro-edit-lossage ([24 11 108]) edit-kbd-macro ([24 11 101]) kmacro-edit-macro ([24 11 13]) kmacro-edit-macro-repeat ([24 11 5]) kmacro-add-counter ([24 11 1]) kmacro-insert-counter ([24 11 9]) kmacro-set-counter ([24 11 3]) kmacro-set-format ([24 11 6]) kmacro-call-ring-2nd-repeat ([24 11 12]) kmacro-swap-ring ([24 11 20]) kmacro-delete-ring-head ([24 11 4]) kmacro-view-macro-repeat ([24 11 22]) kmacro-cycle-ring-previous ([24 11 16]) kmacro-cycle-ring-next ([24 11 14]) kbd-macro-query ([24 11 113]) apply-macro-to-region-lines ([24 11 114]) kmacro-end-or-call-macro-repeat ([24 11 11]) kmacro-start-macro ([24 11 19]) downcase-region ([24 12]) set-language-environment ([24 13 108]) universal-coding-system-argument ([24 13 99]) set-input-method ([24 13 28]) set-next-selection-coding-system ([24 13 88]) set-selection-coding-system ([24 13 120]) set-buffer-process-coding-system ([24 13 112]) set-keyboard-coding-system ([24 13 107]) set-terminal-coding-system ([24 13 116]) set-file-name-coding-system ([24 13 70]) revert-buffer-with-coding-system ([24 13 114]) set-buffer-file-coding-system ([24 13 102]) set-goal-column ([24 14]) delete-blank-lines ([24 15]) mark-page ([24 16]) read-only-mode ([24 17]) find-file-read-only ([24 18]) save-buffer ([24 19]) transpose-lines ([24 20]) upcase-region ([24 21]) find-alternate-file ([24 22]) write-file ([24 23]) exchange-point-and-mark ([24 24]) suspend-frame ([24 26]) repeat-complex-command ([24 27 58]) set-selective-display ([24 36]) expand-abbrev ([24 39]) kmacro-end-macro ([24 41]) calc-dispatch ([24 42]) balance-windows ([24 43]) shrink-window-if-larger-than-buffer ([24 45]) set-fill-prefix ([24 46]) delete-window ([24 48]) delete-other-windows ([24 49]) split-window-below ([24 50]) split-window-right ([24 51]) find-tag-other-window ([24 52 46]) dired-other-window ([24 52 100]) display-buffer ([24 52 15]) switch-to-buffer-other-window ([24 52 98]) find-file-other-window ([24 52 6]) find-file-read-only-other-window ([24 52 114]) kill-buffer-and-window ([24 52 48]) clone-indirect-buffer-other-window ([24 52 99]) add-change-log-entry-other-window ([24 52 97]) compose-mail-other-window ([24 52 109]) other-frame ([24 53 111]) delete-frame ([24 53 48]) delete-other-frames ([24 53 49]) make-frame-command ([24 53 50]) find-tag-other-frame ([24 53 46]) dired-other-frame ([24 53 100]) display-buffer-other-frame ([24 53 15]) find-file-read-only-other-frame ([24 53 114]) find-file-other-frame ([24 53 6]) switch-to-buffer-other-frame ([24 53 98]) compose-mail-other-frame ([24 53 109]) 2C-split ([24 54 115]) 2C-associate-buffer ([24 54 98]) 2C-two-columns ([24 54 f2]) insert-char ([24 56 13]) comment-set-column ([24 59]) scroll-left ([24 60]) what-cursor-position ([24 61]) scroll-right ([24 62]) backward-page ([24 91]) forward-page ([24 93]) enlarge-window ([24 94]) next-error ([24 96]) expand-jump-to-next-slot ([24 97 110]) expand-jump-to-previous-slot ([24 97 112]) inverse-add-global-abbrev ([24 97 45]) inverse-add-mode-abbrev ([24 97 105 108]) add-mode-abbrev ([24 97 43]) add-global-abbrev ([24 97 103]) switch-to-buffer ([24 98]) dired ([24 100]) kmacro-end-and-call-macro ([24 101]) set-fill-column ([24 102]) mark-whole-buffer ([24 104]) insert-file ([24 105]) kill-buffer ([24 107]) count-lines-page ([24 108]) compose-mail ([24 109]) narrow-to-page ([24 110 112]) narrow-to-defun ([24 110 100]) widen ([24 110 119]) narrow-to-region ([24 110 110]) other-window ([24 111]) bookmark-bmenu-list ([24 114 108]) bookmark-set ([24 114 109]) bookmark-jump ([24 114 98]) frame-configuration-to-register ([24 114 102]) window-configuration-to-register ([24 114 119]) increment-register ([24 114 43]) number-to-register ([24 114 110]) copy-rectangle-to-register ([24 114 114]) insert-register ([24 114 103]) copy-to-register ([24 114 120]) jump-to-register ([24 114 106]) point-to-register ([24 114 32]) copy-rectangle-as-kill ([24 114 27 119]) rectangle-number-lines ([24 114 78]) string-rectangle ([24 114 116]) open-rectangle ([24 114 111]) yank-rectangle ([24 114 121]) delete-rectangle ([24 114 100]) kill-rectangle ([24 114 107]) clear-rectangle ([24 114 99]) save-some-buffers ([24 115]) undo ([24 117]) vc-revision-other-window ([24 118 126]) vc-root-diff ([24 118 68]) vc-diff ([24 118 61]) vc-update ([24 118 43]) vc-next-action ([24 118 118]) vc-revert ([24 118 117]) vc-create-tag ([24 118 115]) vc-retrieve-tag ([24 118 114]) vc-merge ([24 118 109]) vc-log-outgoing ([24 118 79]) vc-log-incoming ([24 118 73]) vc-print-root-log ([24 118 76]) vc-print-log ([24 118 108]) vc-register ([24 118 105]) vc-insert-headers ([24 118 104]) vc-annotate ([24 118 103]) vc-dir ([24 118 100]) vc-rollback ([24 118 99]) vc-switch-backend ([24 118 98]) vc-update-change-log ([24 118 97]) repeat ([24 122]) shrink-window-horizontally ([24 123]) enlarge-window-horizontally ([24 125]) backward-kill-sentence ([24 127]) text-scale-adjust ([24 67108912]) previous-buffer ([24 C-left]) next-buffer ([24 C-right]) yank ([25]) mark-sexp ([27 0]) beginning-of-defun ([27 1]) backward-sexp ([27 2]) exit-recursive-edit ([27 3]) down-list ([27 4]) end-of-defun ([27 5]) forward-sexp ([27 6]) mark-defun ([27 8]) complete-symbol ([27 9]) indent-new-comment-line ([27 10]) kill-sexp ([27 11]) reposition-window ([27 12]) forward-list ([27 14]) split-line ([27 15]) backward-list ([27 16]) isearch-backward-regexp ([27 18]) isearch-forward-regexp ([27 19]) transpose-sexps ([27 20]) backward-up-list ([27 21]) scroll-other-window ([27 22]) append-next-kill ([27 23]) eval-expression ([27 27 58]) keyboard-escape-quit ([27 27 27]) indent-region ([27 28]) just-one-space ([27 32]) shell-command ([27 33]) ispell-word ([27 36]) query-replace ([27 37]) async-shell-command ([27 38]) abbrev-prefix-mark ([27 39]) insert-parentheses ([27 40]) move-past-close-and-reindent ([27 41]) pop-tag-mark ([27 42]) tags-loop-continue ([27 44]) negative-argument ([27 45]) find-tag ([27 46]) dabbrev-expand ([27 47]) comment-dwim ([27 59]) beginning-of-buffer ([27 60]) count-words-region ([27 61]) end-of-buffer ([27 62]) mark-word ([27 64]) delete-horizontal-space ([27 92]) delete-indentation ([27 94]) tmm-menubar ([27 96]) backward-sentence ([27 97]) backward-word ([27 98]) capitalize-word ([27 99]) kill-word ([27 100]) forward-sentence ([27 101]) forward-word ([27 102]) move-to-column ([27 103 9]) previous-error ([27 103 112]) goto-line ([27 103 27 103]) goto-char ([27 103 99]) mark-paragraph ([27 104]) tab-to-tab-stop ([27 105]) kill-sentence ([27 107]) downcase-word ([27 108]) back-to-indentation ([27 109]) center-line ([27 111 27 115]) center-paragraph ([27 111 27 83]) font-lock-fontify-block ([27 111 27 111]) fill-paragraph ([27 113]) move-to-window-line-top-bottom ([27 114]) isearch-forward-symbol ([27 115 95]) isearch-forward-word ([27 115 119]) hi-lock-write-interactive-patterns ([27 115 104 119]) unhighlight-regexp ([27 115 104 117]) highlight-lines-matching-regexp ([27 115 104 108]) highlight-phrase ([27 115 104 112]) highlight-regexp ([27 115 104 114]) occur ([27 115 111]) transpose-words ([27 116]) upcase-word ([27 117]) scroll-down-command ([27 118]) kill-ring-save ([27 119]) execute-extended-command ([27 120]) yank-pop ([27 121]) zap-to-char ([27 122]) backward-paragraph ([27 123]) shell-command-on-region ([27 124]) forward-paragraph ([27 125]) not-modified ([27 126]) backward-kill-word ([27 127]) query-replace-regexp ([27 67108901]) find-tag-regexp ([27 67108910]) dabbrev-completion ([27 67108911]) backward-kill-sexp ([27 C-backspace]) beginning-of-buffer-other-window ([27 begin]) end-of-buffer-other-window ([27 end]) scroll-other-window-down ([27 33554454]) digit-argument ([27 67108921]) toggle-input-method ([28]) abort-recursive-edit ([29]) delete-backward-char ([127]) kmacro-end-call-mouse ([S-mouse-3]) mwheel-scroll ([C-mouse-5]) menu-bar-open ([f10]) mouse-select-window ([vertical-line mouse-1]) mouse-drag-vertical-line ([vertical-line down-mouse-1]) mouse-split-window-vertically ([vertical-line C-mouse-2]) scroll-bar-toolkit-scroll ([vertical-scroll-bar mouse-1]) mouse-drag-header-line ([header-line down-mouse-1]) mouse-split-window-horizontally ([mode-line C-mouse-2]) mouse-delete-window ([mode-line mouse-3]) mouse-delete-other-windows ([mode-line mouse-2]) mouse-drag-mode-line ([mode-line down-mouse-1]) mouse-appearance-menu ([S-down-mouse-1]) mouse-buffer-menu ([C-down-mouse-1]) mouse-save-then-kill ([mouse-3]) mouse-yank-primary ([mouse-2]) mouse-set-point ([triple-mouse-1]) mouse-set-region ([drag-mouse-1]) mouse-drag-region ([down-mouse-1]) mouse-yank-secondary ([M-mouse-2]) mouse-secondary-save-then-kill ([M-mouse-3]) mouse-drag-secondary ([M-down-mouse-1]) mouse-set-secondary ([M-drag-mouse-1]) mouse-start-secondary ([M-mouse-1]) compose-last-chars ([compose-last-chars]) tmm-menubar-mouse ([menu-bar mouse-1]) kmacro-end-or-call-macro ([f4]) kmacro-start-macro-or-insert-counter ([f3]) left-word ([C-left]) right-word ([C-right]) ignore ([mouse-movement]) delete-forward-char ([deletechar]) overwrite-mode ([insertchar]) right-char ([right]) left-char ([left]) kill-whole-line ([C-S-backspace]) search-forward ([find]) handle-delete-frame ([delete-frame]) handle-select-window ([select-window]) handle-switch-frame ([switch-frame]))) :extract-lookup #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8 data ([0] set-mark-command [1] move-beginning-of-line [2] backward-char [4] delete-char [5] move-end-of-line [6] forward-char [7] keyboard-quit [8 113] help-quit [8 118] describe-variable [8 119] where-is [8 116] help-with-tutorial [8 115] describe-syntax [8 114] info-emacs-manual [8 80] describe-package [8 112] finder-by-keyword [8 110] view-emacs-news [8 109] describe-mode [8 108] view-lossage [8 107] describe-key [8 52 105] info-other-window [8 105] info [8 104] view-hello-file [8 103] describe-gnu-project [8 102] describe-function [8 101] view-echo-area-messages [8 100] apropos-documentation [8 99] describe-key-briefly [8 98] describe-bindings [8 97] apropos-command [8 83] info-lookup-symbol [8 76] describe-language-environment [8 75] Info-goto-emacs-key-command-node [8 73] describe-input-method [8 70] Info-goto-emacs-command-node [8 67] describe-coding-system [8 28] describe-input-method [8 23] describe-no-warranty [8 20] view-emacs-todo [8 16] view-emacs-problems [8 15] describe-distribution [8 14] view-emacs-news [8 13] view-order-manuals [8 6] view-emacs-FAQ [8 5] view-external-packages [8 4] view-emacs-debugging [8 3] describe-copying [8 1] about-emacs [8 63] help-for-help [8 46] display-local-help [8 f1] help-for-help [8 help] help-for-help [8 8] help-for-help [9] indent-for-tab-command [10] newline-and-indent [11] kill-line [12] recenter-top-bottom [13] newline [14] next-line [15] open-line [16] previous-line [17] quoted-insert [18] isearch-backward [19] isearch-forward [20] transpose-chars [21] universal-argument [22] scroll-up-command [23] kill-region [24 0] pop-global-mark [24 2] list-buffers [24 3] save-buffers-kill-terminal [24 4] list-directory [24 5] eval-last-sexp [24 6] find-file [24 9] indent-rigidly [24 11 110] kmacro-name-last-macro [24 11 98] kmacro-bind-to-key [24 11 32] kmacro-step-edit-macro [24 11 108] kmacro-edit-lossage [24 11 101] edit-kbd-macro [24 11 13] kmacro-edit-macro [24 11 5] kmacro-edit-macro-repeat [24 11 1] kmacro-add-counter [24 11 9] kmacro-insert-counter [24 11 3] kmacro-set-counter [24 11 6] kmacro-set-format [24 11 12] kmacro-call-ring-2nd-repeat [24 11 20] kmacro-swap-ring [24 11 4] kmacro-delete-ring-head [24 11 22] kmacro-view-macro-repeat [24 11 16] kmacro-cycle-ring-previous [24 11 14] kmacro-cycle-ring-next [24 11 113] kbd-macro-query [24 11 114] apply-macro-to-region-lines [24 11 11] kmacro-end-or-call-macro-repeat [24 11 19] kmacro-start-macro [24 11 115] kmacro-start-macro [24 12] downcase-region [24 13 108] set-language-environment [24 13 99] universal-coding-system-argument [24 13 28] set-input-method [24 13 88] set-next-selection-coding-system [24 13 120] set-selection-coding-system [24 13 112] set-buffer-process-coding-system [24 13 107] set-keyboard-coding-system [24 13 116] set-terminal-coding-system [24 13 70] set-file-name-coding-system [24 13 114] revert-buffer-with-coding-system [24 13 102] set-buffer-file-coding-system [24 14] set-goal-column [24 15] delete-blank-lines [24 16] mark-page [24 17] read-only-mode [24 18] find-file-read-only [24 19] save-buffer [24 20] transpose-lines [24 21] upcase-region [24 22] find-alternate-file [24 23] write-file [24 24] exchange-point-and-mark [24 26] suspend-frame [24 27 58] repeat-complex-command [24 27 27] repeat-complex-command [24 36] set-selective-display [24 39] expand-abbrev [24 40] kmacro-start-macro [24 41] kmacro-end-macro [24 42] calc-dispatch [24 43] balance-windows [24 45] shrink-window-if-larger-than-buffer [24 46] set-fill-prefix [24 48] delete-window [24 49] delete-other-windows [24 50] split-window-below [24 51] split-window-right [24 52 46] find-tag-other-window [24 52 100] dired-other-window [24 52 15] display-buffer [24 52 98] switch-to-buffer-other-window [24 52 6] find-file-other-window [24 52 114] find-file-read-only-other-window [24 52 102] find-file-other-window [24 52 48] kill-buffer-and-window [24 52 99] clone-indirect-buffer-other-window [24 52 97] add-change-log-entry-other-window [24 52 109] compose-mail-other-window [24 53 111] other-frame [24 53 48] delete-frame [24 53 49] delete-other-frames [24 53 50] make-frame-command [24 53 46] find-tag-other-frame [24 53 100] dired-other-frame [24 53 15] display-buffer-other-frame [24 53 114] find-file-read-only-other-frame [24 53 6] find-file-other-frame [24 53 102] find-file-other-frame [24 53 98] switch-to-buffer-other-frame [24 53 109] compose-mail-other-frame [24 54 115] 2C-split [24 54 98] 2C-associate-buffer [24 54 f2] 2C-two-columns [24 54 50] 2C-two-columns [24 56 13] insert-char [24 59] comment-set-column [24 60] scroll-left [24 61] what-cursor-position [24 62] scroll-right [24 91] backward-page [24 93] forward-page [24 94] enlarge-window [24 96] next-error [24 97 110] expand-jump-to-next-slot [24 97 112] expand-jump-to-previous-slot [24 97 39] expand-abbrev [24 97 101] expand-abbrev [24 97 45] inverse-add-global-abbrev [24 97 105 108] inverse-add-mode-abbrev [24 97 105 103] inverse-add-global-abbrev [24 97 43] add-mode-abbrev [24 97 103] add-global-abbrev [24 97 1] add-mode-abbrev [24 97 108] add-mode-abbrev [24 98] switch-to-buffer [24 100] dired [24 101] kmacro-end-and-call-macro [24 102] set-fill-column [24 104] mark-whole-buffer [24 105] insert-file [24 107] kill-buffer [24 108] count-lines-page [24 109] compose-mail [24 110 112] narrow-to-page [24 110 100] narrow-to-defun [24 110 119] widen [24 110 110] narrow-to-region [24 111] other-window [24 113] kbd-macro-query [24 114 108] bookmark-bmenu-list [24 114 109] bookmark-set [24 114 98] bookmark-jump [24 114 102] frame-configuration-to-register [24 114 119] window-configuration-to-register [24 114 43] increment-register [24 114 110] number-to-register [24 114 114] copy-rectangle-to-register [24 114 103] insert-register [24 114 105] insert-register [24 114 120] copy-to-register [24 114 115] copy-to-register [24 114 106] jump-to-register [24 114 32] point-to-register [24 114 67108896] point-to-register [24 114 0] point-to-register [24 114 27 119] copy-rectangle-as-kill [24 114 78] rectangle-number-lines [24 114 116] string-rectangle [24 114 111] open-rectangle [24 114 121] yank-rectangle [24 114 100] delete-rectangle [24 114 107] kill-rectangle [24 114 99] clear-rectangle [24 115] save-some-buffers [24 117] undo [24 118 126] vc-revision-other-window [24 118 68] vc-root-diff [24 118 61] vc-diff [24 118 43] vc-update [24 118 118] vc-next-action [24 118 117] vc-revert [24 118 115] vc-create-tag [24 118 114] vc-retrieve-tag [24 118 109] vc-merge [24 118 79] vc-log-outgoing [24 118 73] vc-log-incoming [24 118 76] vc-print-root-log [24 118 108] vc-print-log [24 118 105] vc-register [24 118 104] vc-insert-headers [24 118 103] vc-annotate [24 118 100] vc-dir [24 118 99] vc-rollback [24 118 98] vc-switch-backend [24 118 97] vc-update-change-log [24 122] repeat [24 123] shrink-window-horizontally [24 125] enlarge-window-horizontally [24 127] backward-kill-sentence [24 67108912] text-scale-adjust [24 67108925] text-scale-adjust [24 67108909] text-scale-adjust [24 67108907] text-scale-adjust [24 67108896] pop-global-mark [24 C-left] previous-buffer [24 left] previous-buffer [24 C-right] next-buffer [24 right] next-buffer [25] yank [26] suspend-frame [27 0] mark-sexp [27 1] beginning-of-defun [27 2] backward-sexp [27 3] exit-recursive-edit [27 4] down-list [27 5] end-of-defun [27 6] forward-sexp [27 8] mark-defun [27 9] complete-symbol [27 10] indent-new-comment-line [27 11] kill-sexp [27 12] reposition-window [27 14] forward-list [27 15] split-line [27 16] backward-list [27 18] isearch-backward-regexp [27 19] isearch-forward-regexp [27 20] transpose-sexps [27 21] backward-up-list [27 22] scroll-other-window [27 23] append-next-kill [27 27 58] eval-expression [27 27 27] keyboard-escape-quit [27 28] indent-region [27 32] just-one-space [27 33] shell-command [27 36] ispell-word [27 37] query-replace [27 38] async-shell-command [27 39] abbrev-prefix-mark [27 40] insert-parentheses [27 41] move-past-close-and-reindent [27 42] pop-tag-mark [27 44] tags-loop-continue [27 45] negative-argument [27 46] find-tag [27 47] dabbrev-expand [27 58] eval-expression [27 59] comment-dwim [27 60] beginning-of-buffer [27 61] count-words-region [27 62] end-of-buffer [27 64] mark-word [27 92] delete-horizontal-space [27 94] delete-indentation [27 96] tmm-menubar [27 97] backward-sentence [27 98] backward-word [27 99] capitalize-word [27 100] kill-word [27 101] forward-sentence [27 102] forward-word [27 103 9] move-to-column [27 103 112] previous-error [27 103 110] next-error [27 103 27 112] previous-error [27 103 27 110] next-error [27 103 27 103] goto-line [27 103 103] goto-line [27 103 99] goto-char [27 104] mark-paragraph [27 105] tab-to-tab-stop [27 106] indent-new-comment-line [27 107] kill-sentence [27 108] downcase-word [27 109] back-to-indentation [27 111 27 115] center-line [27 111 27 83] center-paragraph [27 111 27 111] font-lock-fontify-block [27 113] fill-paragraph [27 114] move-to-window-line-top-bottom [27 115 95] isearch-forward-symbol [27 115 119] isearch-forward-word [27 115 104 119] hi-lock-write-interactive-patterns [27 115 104 117] unhighlight-regexp [27 115 104 108] highlight-lines-matching-regexp [27 115 104 112] highlight-phrase [27 115 104 114] highlight-regexp [27 115 111] occur [27 116] transpose-words [27 117] upcase-word [27 118] scroll-down-command [27 119] kill-ring-save [27 120] execute-extended-command [27 121] yank-pop [27 122] zap-to-char [27 123] backward-paragraph [27 124] shell-command-on-region [27 125] forward-paragraph [27 126] not-modified [27 127] backward-kill-word [27 67108901] query-replace-regexp [27 67108910] find-tag-regexp [27 67108911] dabbrev-completion [27 C-backspace] backward-kill-sexp [27 C-delete] backward-kill-sexp [27 67108896] mark-sexp [27 C-end] end-of-defun [27 C-home] beginning-of-defun [27 C-down] down-list [27 C-up] backward-up-list [27 C-right] forward-sexp [27 C-left] backward-sexp [27 left] backward-word [27 right] forward-word [27 begin] beginning-of-buffer-other-window [27 end] end-of-buffer-other-window [27 33554454] scroll-other-window-down [27 prior] scroll-other-window-down [27 next] scroll-other-window [27 home] beginning-of-buffer-other-window [27 67108909] negative-argument [27 67108921] digit-argument [27 67108920] digit-argument [27 67108919] digit-argument [27 67108918] digit-argument [27 67108917] digit-argument [27 67108916] digit-argument [27 67108915] digit-argument [27 67108914] digit-argument [27 67108913] digit-argument [27 67108912] digit-argument [28] toggle-input-method [29] abort-recursive-edit [31] undo [127] delete-backward-char [S-mouse-3] kmacro-end-call-mouse [C-mouse-5] mwheel-scroll [S-mouse-5] mwheel-scroll [mouse-5] mwheel-scroll [C-mouse-4] mwheel-scroll [S-mouse-4] mwheel-scroll [mouse-4] mwheel-scroll [f10] menu-bar-open [vertical-line mouse-1] mouse-select-window [vertical-line down-mouse-1] mouse-drag-vertical-line [vertical-line C-mouse-2] mouse-split-window-vertically [vertical-scroll-bar mouse-1] scroll-bar-toolkit-scroll [vertical-scroll-bar C-mouse-2] mouse-split-window-vertically [header-line mouse-1] mouse-select-window [header-line down-mouse-1] mouse-drag-header-line [mode-line C-mouse-2] mouse-split-window-horizontally [mode-line mouse-3] mouse-delete-window [mode-line mouse-2] mouse-delete-other-windows [mode-line down-mouse-1] mouse-drag-mode-line [mode-line drag-mouse-1] mouse-select-window [mode-line mouse-1] mouse-select-window [S-down-mouse-1] mouse-appearance-menu [C-down-mouse-1] mouse-buffer-menu [mouse-3] mouse-save-then-kill [mouse-2] mouse-yank-primary [triple-mouse-1] mouse-set-point [double-mouse-1] mouse-set-point [drag-mouse-1] mouse-set-region [mouse-1] mouse-set-point [down-mouse-1] mouse-drag-region [M-mouse-2] mouse-yank-secondary [M-mouse-3] mouse-secondary-save-then-kill [M-down-mouse-1] mouse-drag-secondary [M-drag-mouse-1] mouse-set-secondary [M-mouse-1] mouse-start-secondary [compose-last-chars] compose-last-chars [f1 113] help-quit [f1 118] describe-variable [f1 119] where-is [f1 116] help-with-tutorial [f1 115] describe-syntax [f1 114] info-emacs-manual [f1 80] describe-package [f1 112] finder-by-keyword [f1 110] view-emacs-news [f1 109] describe-mode [f1 108] view-lossage [f1 107] describe-key [f1 52 105] info-other-window [f1 105] info [f1 104] view-hello-file [f1 103] describe-gnu-project [f1 102] describe-function [f1 101] view-echo-area-messages [f1 100] apropos-documentation [f1 99] describe-key-briefly [f1 98] describe-bindings [f1 97] apropos-command [f1 83] info-lookup-symbol [f1 76] describe-language-environment [f1 75] Info-goto-emacs-key-command-node [f1 73] describe-input-method [f1 70] Info-goto-emacs-command-node [f1 67] describe-coding-system [f1 28] describe-input-method [f1 23] describe-no-warranty [f1 20] view-emacs-todo [f1 16] view-emacs-problems [f1 15] describe-distribution [f1 14] view-emacs-news [f1 13] view-order-manuals [f1 6] view-emacs-FAQ [f1 5] view-external-packages [f1 4] view-emacs-debugging [f1 3] describe-copying [f1 1] about-emacs [f1 63] help-for-help [f1 46] display-local-help [f1 f1] help-for-help [f1 help] help-for-help [f1 8] help-for-help [help 113] help-quit [help 118] describe-variable [help 119] where-is [help 116] help-with-tutorial [help 115] describe-syntax [help 114] info-emacs-manual [help 80] describe-package [help 112] finder-by-keyword [help 110] view-emacs-news [help 109] describe-mode [help 108] view-lossage [help 107] describe-key [help 52 105] info-other-window [help 105] info [help 104] view-hello-file [help 103] describe-gnu-project [help 102] describe-function [help 101] view-echo-area-messages [help 100] apropos-documentation [help 99] describe-key-briefly [help 98] describe-bindings [help 97] apropos-command [help 83] info-lookup-symbol [help 76] describe-language-environment [help 75] Info-goto-emacs-key-command-node [help 73] describe-input-method [help 70] Info-goto-emacs-command-node [help 67] describe-coding-system [help 28] describe-input-method [help 23] describe-no-warranty [help 20] view-emacs-todo [help 16] view-emacs-problems [help 15] describe-distribution [help 14] view-emacs-news [help 13] view-order-manuals [help 6] view-emacs-FAQ [help 5] view-external-packages [help 4] view-emacs-debugging [help 3] describe-copying [help 1] about-emacs [help 63] help-for-help [help 46] display-local-help [help f1] help-for-help [help help] help-for-help [help 8] help-for-help [f2 115] 2C-split [f2 98] 2C-associate-buffer [f2 f2] 2C-two-columns [f2 50] 2C-two-columns [menu-bar mouse-1] tmm-menubar-mouse [f4] kmacro-end-or-call-macro [f3] kmacro-start-macro-or-insert-counter [C-M-end] end-of-defun [C-M-home] beginning-of-defun [C-M-down] down-list [C-M-up] backward-up-list [C-M-right] forward-sexp [C-M-left] backward-sexp [S-delete] kill-region [C-backspace] backward-kill-word [C-delete] kill-word [C-left] left-word [C-right] right-word [M-left] left-word [M-right] right-word [mouse-movement] ignore [deletechar] delete-forward-char [deleteline] kill-line [insertline] open-line [open] find-file [again] repeat-complex-command [redo] repeat-complex-command [undo] undo [S-insertchar] yank [C-insertchar] kill-ring-save [insertchar] overwrite-mode [S-insert] yank [C-insert] kill-ring-save [insert] overwrite-mode [execute] execute-extended-command [M-begin] beginning-of-buffer-other-window [begin] beginning-of-buffer [M-end] end-of-buffer-other-window [C-end] end-of-buffer [end] move-end-of-line [M-prior] scroll-other-window-down [M-next] scroll-other-window [C-next] scroll-left [C-prior] scroll-right [C-down] forward-paragraph [C-up] backward-paragraph [next] scroll-up-command [prior] scroll-down-command [down] next-line [right] right-char [up] previous-line [left] left-char [M-home] beginning-of-buffer-other-window [C-home] beginning-of-buffer [home] move-beginning-of-line [C-S-backspace] kill-whole-line [find] search-forward [menu] execute-extended-command [67108896] set-mark-command [67108909] negative-argument [67108921] digit-argument [67108920] digit-argument [67108919] digit-argument [67108918] digit-argument [67108917] digit-argument [67108916] digit-argument [67108915] digit-argument [67108914] digit-argument [67108913] digit-argument [67108912] digit-argument [XF86Back] previous-buffer [XF86Forward] next-buffer [67108911] undo [delete-frame] handle-delete-frame [select-window] handle-select-window [switch-frame] handle-switch-frame)))) (:map-key -2305843009213693872 :parent (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (custom-mode-link-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693873) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (query-replace-map))) (:map-key -2305843009213693874) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-search-menu))) (:map-key -2305843009213693875) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (visual-line-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693876) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (help-mode-menu))) (:map-key -2305843009213693877) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-4-map))) (:map-key -2305843009213693878) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (org-cdlatex-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693879 :parent (:map-key -2305843009213693862)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (occur-edit-mode-map))) (:map-key -2305843009213693880) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--global-map-before-ergoemacs))) (:map-key -2305843009213693881) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-indian-environment-map))) (:map-key -2305843009213693882) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-describe-menu))) (:map-key -2305843009213693883) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-text-keymap))) (:map-key -2305843009213693884) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (isearch-help-map))) (:map-key -2305843009213693885) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-keymap))) (:map-key -2305843009213693886) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (2C-minor-mode-map))) (:map-key -2305843009213693887) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-field-keymap))) (:map-key -2305843009213693888) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (smartparens-strict-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693889) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-encryption-decryption-menu))) (:map-key -2305843009213693890) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-ediff-menu))) (:map-key -2305843009213693891) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (occur-mode-map))) (:map-key -2305843009213693892) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-r-map))) (:map-key -2305843009213693893) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (key-translation-map))) (:map-key -2305843009213693894) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (tabulated-list-sort-button-map))) (:map-key -2305843009213693895) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (prog-mode-map))) (:map-key -2305843009213693896) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-language-environment-map))) (:map-key -2305843009213693897 :parent (:map-key -2305843009213693841)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (lisp-mode-map))) (:map-key -2305843009213693898) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (cvs-global-menu))) (:map-key -2305843009213693899 :parent (:map-key -2305843009213693914)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (tabulated-list-mode-map))) (:map-key -2305843009213693900) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (edit-abbrevs-map))) (:map-key -2305843009213693901) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-menu))) (:map-key -2305843009213693902) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (Custom-mode-menu))) (:map-key -2305843009213693903 :parent (:map-key -2305843009213693822)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-isearch-map))) (:map-key -2305843009213693904) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (set-coding-system-map))) (:map-key -2305843009213693905) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-european-environment-map))) (:map-key -2305843009213693906 :parent (:map-key -2305843009213693873)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (kmacro-step-edit-map))) (:map-key -2305843009213693907) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-input-method-map))) (:map-key -2305843009213693908) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-scroll-bar-menu))) (:map-key -2305843009213693909) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (sp-pair-overlay-keymap) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693910) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (special-event-map))) (:map-key -2305843009213693911) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (function-key-map))) (:map-key -2305843009213693912) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-mode-menu))) (:map-key -2305843009213693913) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-tools-menu))) (:map-key -2305843009213693914) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (button-buffer-map))) (:map-key -2305843009213693915) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-fringe-menu))) (:map-key -2305843009213693916) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-help-menu))) (:map-key -2305843009213693917) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-bookmark-map))) (:map-key -2305843009213693918) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-custom-menu))) (:map-key -2305843009213693919 :parent (:map-key -2305843009213693914 :composed ((:map-key -2305843009213693914)) :parent (:map-key -2305843009213693845))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (help-mode-map))) (:map-key -2305843009213693920) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mule-keymap))) (:map-key -2305843009213693921) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-minor-mode-keymap))) (:map-key -2305843009213693922) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-games-menu))) (:map-key -2305843009213693923) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-justification-menu))) (:map-key -2305843009213693924) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (universal-argument-map))) (:map-key -2305843009213693925) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-coding-system-map))) (:map-key -2305843009213693926) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693927) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-5-map))) (:map-key -2305843009213693928) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-i-search-menu))) (:map-key -2305843009213693929) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-goto-menu))) (:map-key -2305843009213693930) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (vc-menu-map))) (:map-key -2305843009213693931) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ispell-menu-map))) (:map-key -2305843009213693932) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (button-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693933) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-background-menu))) (:map-key -2305843009213693934) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-chinese-environment-map))) (:map-key -2305843009213693935) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-epatch-menu))) (:map-key -2305843009213693936 :parent (:map-key -2305843009213693822)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-ns-map))) (:map-key -2305843009213693937 :parent (:map-key -2305843009213693911)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (local-function-key-map))) (:map-key -2305843009213693938 :parent (:map-key -2305843009213693822)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (read-expression-map))) (:map-key -2305843009213693939) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (vc-prefix-map))) (:map-key -2305843009213693940) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-edit-menu))) (:map-key -2305843009213693941) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (edmacro-mode-map))) (:map-key -2305843009213693942) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-keymap))) (:map-key -2305843009213693943 :parent (:map-key -2305843009213693873)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (multi-query-replace-map))) (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (custom-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693945) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-map))) (:map-key -2305843009213693946) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-options-menu))) (:map-key -2305843009213693947) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-european-environment-map))) (:map-key -2305843009213693948 :parent (:map-key -2305843009213693841)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (lisp-interaction-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693949) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (esc-map))) (:map-key -2305843009213693950) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-replace-menu))) (:map-key -2305843009213693750) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--before-ergoemacs))) (:map-key -2305843009213693749) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (:map-key -2305843009213693748) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (-2305843009213693952) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:extract-keys ([switch-frame] [select-window] [delete-frame] [67108911] [XF86Forward] [XF86Back] [67108912] [67108913] [67108914] [67108915] [67108916] [67108917] [67108918] [67108919] [67108920] [67108921] [67108909] [67108896] [menu] [find] [C-S-backspace] [home] [C-home] [M-home] [left] [up] [right] [down] [prior] [next] [C-up] [C-down] [C-prior] [C-next] [M-next] [M-prior] [end] [C-end] [M-end] [begin] [M-begin] [execute] [insert] [C-insert] [S-insert] [insertchar] [C-insertchar] [S-insertchar] [undo] [redo] [again] [open] [insertline] [deleteline] [deletechar] [mouse-movement] [M-right] [M-left] [C-right] [C-left] [C-delete] [C-backspace] [S-delete] [C-M-left] [C-M-right] [C-M-up] [C-M-down] [C-M-home] [C-M-end] [f3] [f4] [menu-bar mouse-1] [f2 50] [f2 f2] [f2 98] [f2 115] [help 8] [help help] [help f1] [help 46] [help 63] [help 1] [help 3] [help 4] [help 5] [help 6] [help 13] [help 14] [help 15] [help 16] [help 20] [help 23] [help 28] [help 67] [help 70] [help 73] [help 75] [help 76] [help 83] [help 97] [help 98] [help 99] [help 100] [help 101] [help 102] [help 103] [help 104] [help 105] [help 52 105] [help 107] [help 108] [help 109] [help 110] [help 112] [help 80] [help 114] [help 115] [help 116] [help 119] [help 118] [help 113] [f1 8] [f1 help] [f1 f1] [f1 46] [f1 63] [f1 1] [f1 3] [f1 4] [f1 5] [f1 6] [f1 13] [f1 14] [f1 15] [f1 16] [f1 20] [f1 23] [f1 28] [f1 67] [f1 70] [f1 73] [f1 75] [f1 76] [f1 83] [f1 97] [f1 98] [f1 99] [f1 100] [f1 101] [f1 102] [f1 103] [f1 104] [f1 105] [f1 52 105] [f1 107] [f1 108] [f1 109] [f1 110] [f1 112] [f1 80] [f1 114] [f1 115] [f1 116] [f1 119] [f1 118] [f1 113] [compose-last-chars] [M-mouse-1] [M-drag-mouse-1] [M-down-mouse-1] [M-mouse-3] [M-mouse-2] [down-mouse-1] [mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1] [mouse-2] [mouse-3] [C-down-mouse-1] [S-down-mouse-1] [mode-line mouse-1] [mode-line drag-mouse-1] [mode-line down-mouse-1] [mode-line mouse-2] [mode-line mouse-3] [mode-line C-mouse-2] [header-line down-mouse-1] [header-line mouse-1] [vertical-scroll-bar C-mouse-2] [vertical-scroll-bar mouse-1] [vertical-line C-mouse-2] [vertical-line down-mouse-1] [vertical-line mouse-1] [f10] [f20] [f16] [f18] [cut] [copy] [paste] [mouse-4] [S-mouse-4] [C-mouse-4] [mouse-5] [S-mouse-5] [C-mouse-5] [S-mouse-3] [127] [31] [29] [28] [27 67108912] [27 67108913] [27 67108914] [27 67108915] [27 67108916] [27 67108917] [27 67108918] [27 67108919] [27 67108920] [27 67108921] [27 67108909] [27 home] [27 next] [27 prior] [27 33554454] [27 end] [27 begin] [27 right] [27 left] [27 C-left] [27 C-right] [27 C-up] [27 C-down] [27 C-home] [27 C-end] [27 67108896] [27 C-delete] [27 C-backspace] [27 67108911] [27 67108910] [27 67108901] [27 127] [27 126] [27 125] [27 124] [27 123] [27 122] [27 121] [27 120] [27 119] [27 118] [27 117] [27 116] [27 115 111] [27 115 104 114] [27 115 104 112] [27 115 104 108] [27 115 104 117] [27 115 104 119] [27 115 119] [27 115 95] [27 114] [27 113] [27 111 27 111] [27 111 27 83] [27 111 27 115] [27 109] [27 108] [27 107] [27 106] [27 105] [27 104] [27 103 99] [27 103 103] [27 103 27 103] [27 103 27 110] [27 103 27 112] [27 103 110] [27 103 112] [27 103 9] [27 102] [27 101] [27 100] [27 99] [27 98] [27 97] [27 96] [27 94] [27 92] [27 64] [27 62] [27 61] [27 60] [27 59] [27 58] [27 47] [27 46] [27 45] [27 44] [27 42] [27 41] [27 40] [27 39] [27 38] [27 37] [27 36] [27 33] [27 32] [27 28] [27 27 27] [27 27 58] [27 23] [27 22] [27 21] [27 20] [27 19] [27 18] [27 16] [27 15] [27 14] [27 12] [27 11] [27 10] [27 9] [27 8] [27 6] [27 5] [27 4] [27 3] [27 2] [27 1] [27 0] [26] [25] [24 right] [24 C-right] [24 left] [24 C-left] [24 67108896] [24 67108907] [24 67108909] [24 67108925] [24 67108912] [24 127] [24 125] [24 123] [24 122] [24 118 97] [24 118 98] [24 118 99] [24 118 100] [24 118 103] [24 118 104] [24 118 105] [24 118 108] [24 118 76] [24 118 73] [24 118 79] [24 118 109] [24 118 114] [24 118 115] [24 118 117] [24 118 118] [24 118 43] [24 118 61] [24 118 68] [24 118 126] [24 117] [24 115] [24 114 99] [24 114 107] [24 114 100] [24 114 121] [24 114 111] [24 114 116] [24 114 78] [24 114 27 119] [24 114 0] [24 114 67108896] [24 114 32] [24 114 106] [24 114 115] [24 114 120] [24 114 105] [24 114 103] [24 114 114] [24 114 110] [24 114 43] [24 114 119] [24 114 102] [24 114 98] [24 114 109] [24 114 108] [24 113] [24 111] [24 110 110] [24 110 119] [24 110 100] [24 110 112] [24 110 115] [24 110 98] [24 110 101] [24 109] [24 108] [24 107] [24 105] [24 104] [24 102] [24 101] [24 100] [24 98] [24 97 108] [24 97 1] [24 97 103] [24 97 43] [24 97 105 103] [24 97 105 108] [24 97 45] [24 97 101] [24 97 39] [24 97 112] [24 97 110] [24 96] [24 94] [24 93] [24 91] [24 62] [24 61] [24 60] [24 59] [24 56 13] [24 54 50] [24 54 f2] [24 54 98] [24 54 115] [24 53 109] [24 53 98] [24 53 102] [24 53 6] [24 53 114] [24 53 15] [24 53 100] [24 53 46] [24 53 50] [24 53 49] [24 53 48] [24 53 111] [24 52 109] [24 52 97] [24 52 99] [24 52 48] [24 52 102] [24 52 114] [24 52 6] [24 52 98] [24 52 15] [24 52 100] [24 52 46] [24 51] [24 50] [24 49] [24 48] [24 46] [24 45] [24 43] [24 42] [24 41] [24 40] [24 39] [24 36] [24 35] [24 27 27] [24 27 58] [24 26] [24 24] [24 23] [24 22] [24 21] [24 20] [24 19] [24 18] [24 17] [24 16] [24 15] [24 14] [24 13 102] [24 13 114] [24 13 70] [24 13 116] [24 13 107] [24 13 112] [24 13 120] [24 13 88] [24 13 28] [24 13 99] [24 13 108] [24 12] [24 11 115] [24 11 19] [24 11 11] [24 11 114] [24 11 113] [24 11 14] [24 11 16] [24 11 22] [24 11 4] [24 11 20] [24 11 12] [24 11 6] [24 11 3] [24 11 9] [24 11 1] [24 11 5] [24 11 13] [24 11 101] [24 11 108] [24 11 32] [24 11 98] [24 11 110] [24 9] [24 6] [24 5] [24 4] [24 3] [24 2] [24 0] [23] [22] [21] [20] [19] [18] [17] [16] [15] [14] [13] [12] [11] [10] [9] [8 8] [8 help] [8 f1] [8 46] [8 63] [8 1] [8 3] [8 4] [8 5] [8 6] [8 13] [8 14] [8 15] [8 16] [8 20] [8 23] [8 28] [8 67] [8 70] [8 73] [8 75] [8 76] [8 83] [8 97] [8 98] [8 99] [8 100] [8 101] [8 102] [8 103] [8 104] [8 105] [8 52 105] [8 107] [8 108] [8 109] [8 110] [8 112] [8 80] [8 114] [8 115] [8 116] [8 119] [8 118] [8 113] [7] [6] [5] [4] [2] [1] [0]) :extract-where-is #s(hash-table size 487 test eql rehash-size 1.5 rehash-threshold 0.8 data (set-mark-command ([0]) move-beginning-of-line ([1]) backward-char ([2]) delete-char ([4]) move-end-of-line ([5]) forward-char ([6]) keyboard-quit ([7]) help-quit ([8 113]) describe-variable ([8 118]) where-is ([8 119]) help-with-tutorial ([8 116]) describe-syntax ([8 115]) info-emacs-manual ([8 114]) describe-package ([8 80]) finder-by-keyword ([8 112]) view-emacs-news ([8 110]) describe-mode ([8 109]) view-lossage ([8 108]) describe-key ([8 107]) info-other-window ([8 52 105]) info ([8 105]) view-hello-file ([8 104]) describe-gnu-project ([8 103]) describe-function ([8 102]) view-echo-area-messages ([8 101]) apropos-documentation ([8 100]) describe-key-briefly ([8 99]) describe-bindings ([8 98]) apropos-command ([8 97]) info-lookup-symbol ([8 83]) describe-language-environment ([8 76]) Info-goto-emacs-key-command-node ([8 75]) describe-input-method ([8 73]) Info-goto-emacs-command-node ([8 70]) describe-coding-system ([8 67]) describe-no-warranty ([8 23]) view-emacs-todo ([8 20]) view-emacs-problems ([8 16]) describe-distribution ([8 15]) view-order-manuals ([8 13]) view-emacs-FAQ ([8 6]) view-external-packages ([8 5]) view-emacs-debugging ([8 4]) describe-copying ([8 3]) about-emacs ([8 1]) help-for-help ([8 63]) display-local-help ([8 46]) indent-for-tab-command ([9]) newline-and-indent ([10]) kill-line ([11]) recenter-top-bottom ([12]) newline ([13]) next-line ([14]) open-line ([15]) previous-line ([16]) quoted-insert ([17]) isearch-backward ([18]) isearch-forward ([19]) transpose-chars ([20]) universal-argument ([21]) scroll-up-command ([22]) kill-region ([23]) pop-global-mark ([24 0]) list-buffers ([24 2]) save-buffers-kill-terminal ([24 3]) list-directory ([24 4]) eval-last-sexp ([24 5]) find-file ([24 6]) indent-rigidly ([24 9]) kmacro-name-last-macro ([24 11 110]) kmacro-bind-to-key ([24 11 98]) kmacro-step-edit-macro ([24 11 32]) kmacro-edit-lossage ([24 11 108]) edit-kbd-macro ([24 11 101]) kmacro-edit-macro ([24 11 13]) kmacro-edit-macro-repeat ([24 11 5]) kmacro-add-counter ([24 11 1]) kmacro-insert-counter ([24 11 9]) kmacro-set-counter ([24 11 3]) kmacro-set-format ([24 11 6]) kmacro-call-ring-2nd-repeat ([24 11 12]) kmacro-swap-ring ([24 11 20]) kmacro-delete-ring-head ([24 11 4]) kmacro-view-macro-repeat ([24 11 22]) kmacro-cycle-ring-previous ([24 11 16]) kmacro-cycle-ring-next ([24 11 14]) kbd-macro-query ([24 11 113]) apply-macro-to-region-lines ([24 11 114]) kmacro-end-or-call-macro-repeat ([24 11 11]) kmacro-start-macro ([24 11 19]) downcase-region ([24 12]) set-language-environment ([24 13 108]) universal-coding-system-argument ([24 13 99]) set-input-method ([24 13 28]) set-next-selection-coding-system ([24 13 88]) set-selection-coding-system ([24 13 120]) set-buffer-process-coding-system ([24 13 112]) set-keyboard-coding-system ([24 13 107]) set-terminal-coding-system ([24 13 116]) set-file-name-coding-system ([24 13 70]) revert-buffer-with-coding-system ([24 13 114]) set-buffer-file-coding-system ([24 13 102]) set-goal-column ([24 14]) delete-blank-lines ([24 15]) mark-page ([24 16]) read-only-mode ([24 17]) find-file-read-only ([24 18]) save-buffer ([24 19]) transpose-lines ([24 20]) upcase-region ([24 21]) find-alternate-file ([24 22]) write-file ([24 23]) exchange-point-and-mark ([24 24]) suspend-frame ([24 26]) repeat-complex-command ([24 27 58]) server-edit ([24 35]) set-selective-display ([24 36]) expand-abbrev ([24 39]) kmacro-end-macro ([24 41]) calc-dispatch ([24 42]) balance-windows ([24 43]) shrink-window-if-larger-than-buffer ([24 45]) set-fill-prefix ([24 46]) delete-window ([24 48]) delete-other-windows ([24 49]) split-window-below ([24 50]) split-window-right ([24 51]) find-tag-other-window ([24 52 46]) dired-other-window ([24 52 100]) display-buffer ([24 52 15]) switch-to-buffer-other-window ([24 52 98]) find-file-other-window ([24 52 6]) find-file-read-only-other-window ([24 52 114]) kill-buffer-and-window ([24 52 48]) clone-indirect-buffer-other-window ([24 52 99]) add-change-log-entry-other-window ([24 52 97]) compose-mail-other-window ([24 52 109]) other-frame ([24 53 111]) delete-frame ([24 53 48]) delete-other-frames ([24 53 49]) make-frame-command ([24 53 50]) find-tag-other-frame ([24 53 46]) dired-other-frame ([24 53 100]) display-buffer-other-frame ([24 53 15]) find-file-read-only-other-frame ([24 53 114]) find-file-other-frame ([24 53 6]) switch-to-buffer-other-frame ([24 53 98]) compose-mail-other-frame ([24 53 109]) 2C-split ([24 54 115]) 2C-associate-buffer ([24 54 98]) 2C-two-columns ([24 54 f2]) insert-char ([24 56 13]) comment-set-column ([24 59]) scroll-left ([24 60]) what-cursor-position ([24 61]) scroll-right ([24 62]) backward-page ([24 91]) forward-page ([24 93]) enlarge-window ([24 94]) next-error ([24 96]) expand-jump-to-next-slot ([24 97 110]) expand-jump-to-previous-slot ([24 97 112]) inverse-add-global-abbrev ([24 97 45]) inverse-add-mode-abbrev ([24 97 105 108]) add-mode-abbrev ([24 97 43]) add-global-abbrev ([24 97 103]) switch-to-buffer ([24 98]) dired ([24 100]) kmacro-end-and-call-macro ([24 101]) set-fill-column ([24 102]) mark-whole-buffer ([24 104]) insert-file ([24 105]) kill-buffer ([24 107]) count-lines-page ([24 108]) compose-mail ([24 109]) org-narrow-to-element ([24 110 101]) org-narrow-to-block ([24 110 98]) org-narrow-to-subtree ([24 110 115]) narrow-to-page ([24 110 112]) narrow-to-defun ([24 110 100]) widen ([24 110 119]) narrow-to-region ([24 110 110]) other-window ([24 111]) bookmark-bmenu-list ([24 114 108]) bookmark-set ([24 114 109]) bookmark-jump ([24 114 98]) frame-configuration-to-register ([24 114 102]) window-configuration-to-register ([24 114 119]) increment-register ([24 114 43]) number-to-register ([24 114 110]) copy-rectangle-to-register ([24 114 114]) insert-register ([24 114 103]) copy-to-register ([24 114 120]) jump-to-register ([24 114 106]) point-to-register ([24 114 32]) copy-rectangle-as-kill ([24 114 27 119]) rectangle-number-lines ([24 114 78]) string-rectangle ([24 114 116]) open-rectangle ([24 114 111]) yank-rectangle ([24 114 121]) delete-rectangle ([24 114 100]) kill-rectangle ([24 114 107]) clear-rectangle ([24 114 99]) save-some-buffers ([24 115]) undo ([24 117]) vc-revision-other-window ([24 118 126]) vc-root-diff ([24 118 68]) vc-diff ([24 118 61]) vc-update ([24 118 43]) vc-next-action ([24 118 118]) vc-revert ([24 118 117]) vc-create-tag ([24 118 115]) vc-retrieve-tag ([24 118 114]) vc-merge ([24 118 109]) vc-log-outgoing ([24 118 79]) vc-log-incoming ([24 118 73]) vc-print-root-log ([24 118 76]) vc-print-log ([24 118 108]) vc-register ([24 118 105]) vc-insert-headers ([24 118 104]) vc-annotate ([24 118 103]) vc-dir ([24 118 100]) vc-rollback ([24 118 99]) vc-switch-backend ([24 118 98]) vc-update-change-log ([24 118 97]) repeat ([24 122]) shrink-window-horizontally ([24 123]) enlarge-window-horizontally ([24 125]) backward-kill-sentence ([24 127]) text-scale-adjust ([24 67108912]) previous-buffer ([24 C-left]) next-buffer ([24 C-right]) yank ([25]) mark-sexp ([27 0]) beginning-of-defun ([27 1]) backward-sexp ([27 2]) exit-recursive-edit ([27 3]) down-list ([27 4]) end-of-defun ([27 5]) forward-sexp ([27 6]) mark-defun ([27 8]) complete-symbol ([27 9]) indent-new-comment-line ([27 10]) kill-sexp ([27 11]) reposition-window ([27 12]) forward-list ([27 14]) split-line ([27 15]) backward-list ([27 16]) isearch-backward-regexp ([27 18]) isearch-forward-regexp ([27 19]) transpose-sexps ([27 20]) backward-up-list ([27 21]) scroll-other-window ([27 22]) append-next-kill ([27 23]) eval-expression ([27 27 58]) keyboard-escape-quit ([27 27 27]) indent-region ([27 28]) just-one-space ([27 32]) shell-command ([27 33]) ispell-word ([27 36]) query-replace ([27 37]) async-shell-command ([27 38]) abbrev-prefix-mark ([27 39]) insert-parentheses ([27 40]) move-past-close-and-reindent ([27 41]) pop-tag-mark ([27 42]) tags-loop-continue ([27 44]) negative-argument ([27 45]) find-tag ([27 46]) dabbrev-expand ([27 47]) comment-dwim ([27 59]) beginning-of-buffer ([27 60]) count-words-region ([27 61]) end-of-buffer ([27 62]) mark-word ([27 64]) delete-horizontal-space ([27 92]) delete-indentation ([27 94]) tmm-menubar ([27 96]) backward-sentence ([27 97]) backward-word ([27 98]) capitalize-word ([27 99]) kill-word ([27 100]) forward-sentence ([27 101]) forward-word ([27 102]) move-to-column ([27 103 9]) previous-error ([27 103 112]) goto-line ([27 103 27 103]) goto-char ([27 103 99]) mark-paragraph ([27 104]) tab-to-tab-stop ([27 105]) kill-sentence ([27 107]) downcase-word ([27 108]) back-to-indentation ([27 109]) center-line ([27 111 27 115]) center-paragraph ([27 111 27 83]) font-lock-fontify-block ([27 111 27 111]) fill-paragraph ([27 113]) move-to-window-line-top-bottom ([27 114]) isearch-forward-symbol ([27 115 95]) isearch-forward-word ([27 115 119]) hi-lock-write-interactive-patterns ([27 115 104 119]) unhighlight-regexp ([27 115 104 117]) highlight-lines-matching-regexp ([27 115 104 108]) highlight-phrase ([27 115 104 112]) highlight-regexp ([27 115 104 114]) occur ([27 115 111]) transpose-words ([27 116]) upcase-word ([27 117]) scroll-down-command ([27 118]) kill-ring-save ([27 119]) execute-extended-command ([27 120]) yank-pop ([27 121]) zap-to-char ([27 122]) backward-paragraph ([27 123]) shell-command-on-region ([27 124]) forward-paragraph ([27 125]) not-modified ([27 126]) backward-kill-word ([27 127]) query-replace-regexp ([27 67108901]) find-tag-regexp ([27 67108910]) dabbrev-completion ([27 67108911]) backward-kill-sexp ([27 C-backspace]) beginning-of-buffer-other-window ([27 begin]) end-of-buffer-other-window ([27 end]) scroll-other-window-down ([27 33554454]) digit-argument ([27 67108921]) toggle-input-method ([28]) abort-recursive-edit ([29]) delete-backward-char ([127]) kmacro-end-call-mouse ([S-mouse-3]) mwheel-scroll ([C-mouse-5]) clipboard-yank ([paste]) clipboard-kill-ring-save ([copy]) clipboard-kill-region ([cut]) menu-bar-open ([f10]) mouse-select-window ([vertical-line mouse-1]) mouse-drag-vertical-line ([vertical-line down-mouse-1]) mouse-split-window-vertically ([vertical-line C-mouse-2]) scroll-bar-toolkit-scroll ([vertical-scroll-bar mouse-1]) mouse-drag-header-line ([header-line down-mouse-1]) mouse-split-window-horizontally ([mode-line C-mouse-2]) mouse-delete-window ([mode-line mouse-3]) mouse-delete-other-windows ([mode-line mouse-2]) mouse-drag-mode-line ([mode-line down-mouse-1]) mouse-appearance-menu ([S-down-mouse-1]) mouse-buffer-menu ([C-down-mouse-1]) mouse-save-then-kill ([mouse-3]) mouse-yank-primary ([mouse-2]) mouse-set-point ([triple-mouse-1]) mouse-set-region ([drag-mouse-1]) mouse-drag-region ([down-mouse-1]) mouse-yank-secondary ([M-mouse-2]) mouse-secondary-save-then-kill ([M-mouse-3]) mouse-drag-secondary ([M-down-mouse-1]) mouse-set-secondary ([M-drag-mouse-1]) mouse-start-secondary ([M-mouse-1]) compose-last-chars ([compose-last-chars]) tmm-menubar-mouse ([menu-bar mouse-1]) kmacro-end-or-call-macro ([f4]) kmacro-start-macro-or-insert-counter ([f3]) left-word ([C-left]) right-word ([C-right]) ignore ([mouse-movement]) delete-forward-char ([deletechar]) overwrite-mode ([insertchar]) right-char ([right]) left-char ([left]) kill-whole-line ([C-S-backspace]) search-forward ([find]) handle-delete-frame ([delete-frame]) handle-select-window ([select-window]) handle-switch-frame ([switch-frame]))) :extract-lookup #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8 data ([0] set-mark-command [1] move-beginning-of-line [2] backward-char [4] delete-char [5] move-end-of-line [6] forward-char [7] keyboard-quit [8 113] help-quit [8 118] describe-variable [8 119] where-is [8 116] help-with-tutorial [8 115] describe-syntax [8 114] info-emacs-manual [8 80] describe-package [8 112] finder-by-keyword [8 110] view-emacs-news [8 109] describe-mode [8 108] view-lossage [8 107] describe-key [8 52 105] info-other-window [8 105] info [8 104] view-hello-file [8 103] describe-gnu-project [8 102] describe-function [8 101] view-echo-area-messages [8 100] apropos-documentation [8 99] describe-key-briefly [8 98] describe-bindings [8 97] apropos-command [8 83] info-lookup-symbol [8 76] describe-language-environment [8 75] Info-goto-emacs-key-command-node [8 73] describe-input-method [8 70] Info-goto-emacs-command-node [8 67] describe-coding-system [8 28] describe-input-method [8 23] describe-no-warranty [8 20] view-emacs-todo [8 16] view-emacs-problems [8 15] describe-distribution [8 14] view-emacs-news [8 13] view-order-manuals [8 6] view-emacs-FAQ [8 5] view-external-packages [8 4] view-emacs-debugging [8 3] describe-copying [8 1] about-emacs [8 63] help-for-help [8 46] display-local-help [8 f1] help-for-help [8 help] help-for-help [8 8] help-for-help [9] indent-for-tab-command [10] newline-and-indent [11] kill-line [12] recenter-top-bottom [13] newline [14] next-line [15] open-line [16] previous-line [17] quoted-insert [18] isearch-backward [19] isearch-forward [20] transpose-chars [21] universal-argument [22] scroll-up-command [23] kill-region [24 0] pop-global-mark [24 2] list-buffers [24 3] save-buffers-kill-terminal [24 4] list-directory [24 5] eval-last-sexp [24 6] find-file [24 9] indent-rigidly [24 11 110] kmacro-name-last-macro [24 11 98] kmacro-bind-to-key [24 11 32] kmacro-step-edit-macro [24 11 108] kmacro-edit-lossage [24 11 101] edit-kbd-macro [24 11 13] kmacro-edit-macro [24 11 5] kmacro-edit-macro-repeat [24 11 1] kmacro-add-counter [24 11 9] kmacro-insert-counter [24 11 3] kmacro-set-counter [24 11 6] kmacro-set-format [24 11 12] kmacro-call-ring-2nd-repeat [24 11 20] kmacro-swap-ring [24 11 4] kmacro-delete-ring-head [24 11 22] kmacro-view-macro-repeat [24 11 16] kmacro-cycle-ring-previous [24 11 14] kmacro-cycle-ring-next [24 11 113] kbd-macro-query [24 11 114] apply-macro-to-region-lines [24 11 11] kmacro-end-or-call-macro-repeat [24 11 19] kmacro-start-macro [24 11 115] kmacro-start-macro [24 12] downcase-region [24 13 108] set-language-environment [24 13 99] universal-coding-system-argument [24 13 28] set-input-method [24 13 88] set-next-selection-coding-system [24 13 120] set-selection-coding-system [24 13 112] set-buffer-process-coding-system [24 13 107] set-keyboard-coding-system [24 13 116] set-terminal-coding-system [24 13 70] set-file-name-coding-system [24 13 114] revert-buffer-with-coding-system [24 13 102] set-buffer-file-coding-system [24 14] set-goal-column [24 15] delete-blank-lines [24 16] mark-page [24 17] read-only-mode [24 18] find-file-read-only [24 19] save-buffer [24 20] transpose-lines [24 21] upcase-region [24 22] find-alternate-file [24 23] write-file [24 24] exchange-point-and-mark [24 26] suspend-frame [24 27 58] repeat-complex-command [24 27 27] repeat-complex-command [24 35] server-edit [24 36] set-selective-display [24 39] expand-abbrev [24 40] kmacro-start-macro [24 41] kmacro-end-macro [24 42] calc-dispatch [24 43] balance-windows [24 45] shrink-window-if-larger-than-buffer [24 46] set-fill-prefix [24 48] delete-window [24 49] delete-other-windows [24 50] split-window-below [24 51] split-window-right [24 52 46] find-tag-other-window [24 52 100] dired-other-window [24 52 15] display-buffer [24 52 98] switch-to-buffer-other-window [24 52 6] find-file-other-window [24 52 114] find-file-read-only-other-window [24 52 102] find-file-other-window [24 52 48] kill-buffer-and-window [24 52 99] clone-indirect-buffer-other-window [24 52 97] add-change-log-entry-other-window [24 52 109] compose-mail-other-window [24 53 111] other-frame [24 53 48] delete-frame [24 53 49] delete-other-frames [24 53 50] make-frame-command [24 53 46] find-tag-other-frame [24 53 100] dired-other-frame [24 53 15] display-buffer-other-frame [24 53 114] find-file-read-only-other-frame [24 53 6] find-file-other-frame [24 53 102] find-file-other-frame [24 53 98] switch-to-buffer-other-frame [24 53 109] compose-mail-other-frame [24 54 115] 2C-split [24 54 98] 2C-associate-buffer [24 54 f2] 2C-two-columns [24 54 50] 2C-two-columns [24 56 13] insert-char [24 59] comment-set-column [24 60] scroll-left [24 61] what-cursor-position [24 62] scroll-right [24 91] backward-page [24 93] forward-page [24 94] enlarge-window [24 96] next-error [24 97 110] expand-jump-to-next-slot [24 97 112] expand-jump-to-previous-slot [24 97 39] expand-abbrev [24 97 101] expand-abbrev [24 97 45] inverse-add-global-abbrev [24 97 105 108] inverse-add-mode-abbrev [24 97 105 103] inverse-add-global-abbrev [24 97 43] add-mode-abbrev [24 97 103] add-global-abbrev [24 97 1] add-mode-abbrev [24 97 108] add-mode-abbrev [24 98] switch-to-buffer [24 100] dired [24 101] kmacro-end-and-call-macro [24 102] set-fill-column [24 104] mark-whole-buffer [24 105] insert-file [24 107] kill-buffer [24 108] count-lines-page [24 109] compose-mail [24 110 101] org-narrow-to-element [24 110 98] org-narrow-to-block [24 110 115] org-narrow-to-subtree [24 110 112] narrow-to-page [24 110 100] narrow-to-defun [24 110 119] widen [24 110 110] narrow-to-region [24 111] other-window [24 113] kbd-macro-query [24 114 108] bookmark-bmenu-list [24 114 109] bookmark-set [24 114 98] bookmark-jump [24 114 102] frame-configuration-to-register [24 114 119] window-configuration-to-register [24 114 43] increment-register [24 114 110] number-to-register [24 114 114] copy-rectangle-to-register [24 114 103] insert-register [24 114 105] insert-register [24 114 120] copy-to-register [24 114 115] copy-to-register [24 114 106] jump-to-register [24 114 32] point-to-register [24 114 67108896] point-to-register [24 114 0] point-to-register [24 114 27 119] copy-rectangle-as-kill [24 114 78] rectangle-number-lines [24 114 116] string-rectangle [24 114 111] open-rectangle [24 114 121] yank-rectangle [24 114 100] delete-rectangle [24 114 107] kill-rectangle [24 114 99] clear-rectangle [24 115] save-some-buffers [24 117] undo [24 118 126] vc-revision-other-window [24 118 68] vc-root-diff [24 118 61] vc-diff [24 118 43] vc-update [24 118 118] vc-next-action [24 118 117] vc-revert [24 118 115] vc-create-tag [24 118 114] vc-retrieve-tag [24 118 109] vc-merge [24 118 79] vc-log-outgoing [24 118 73] vc-log-incoming [24 118 76] vc-print-root-log [24 118 108] vc-print-log [24 118 105] vc-register [24 118 104] vc-insert-headers [24 118 103] vc-annotate [24 118 100] vc-dir [24 118 99] vc-rollback [24 118 98] vc-switch-backend [24 118 97] vc-update-change-log [24 122] repeat [24 123] shrink-window-horizontally [24 125] enlarge-window-horizontally [24 127] backward-kill-sentence [24 67108912] text-scale-adjust [24 67108925] text-scale-adjust [24 67108909] text-scale-adjust [24 67108907] text-scale-adjust [24 67108896] pop-global-mark [24 C-left] previous-buffer [24 left] previous-buffer [24 C-right] next-buffer [24 right] next-buffer [25] yank [26] suspend-frame [27 0] mark-sexp [27 1] beginning-of-defun [27 2] backward-sexp [27 3] exit-recursive-edit [27 4] down-list [27 5] end-of-defun [27 6] forward-sexp [27 8] mark-defun [27 9] complete-symbol [27 10] indent-new-comment-line [27 11] kill-sexp [27 12] reposition-window [27 14] forward-list [27 15] split-line [27 16] backward-list [27 18] isearch-backward-regexp [27 19] isearch-forward-regexp [27 20] transpose-sexps [27 21] backward-up-list [27 22] scroll-other-window [27 23] append-next-kill [27 27 58] eval-expression [27 27 27] keyboard-escape-quit [27 28] indent-region [27 32] just-one-space [27 33] shell-command [27 36] ispell-word [27 37] query-replace [27 38] async-shell-command [27 39] abbrev-prefix-mark [27 40] insert-parentheses [27 41] move-past-close-and-reindent [27 42] pop-tag-mark [27 44] tags-loop-continue [27 45] negative-argument [27 46] find-tag [27 47] dabbrev-expand [27 58] eval-expression [27 59] comment-dwim [27 60] beginning-of-buffer [27 61] count-words-region [27 62] end-of-buffer [27 64] mark-word [27 92] delete-horizontal-space [27 94] delete-indentation [27 96] tmm-menubar [27 97] backward-sentence [27 98] backward-word [27 99] capitalize-word [27 100] kill-word [27 101] forward-sentence [27 102] forward-word [27 103 9] move-to-column [27 103 112] previous-error [27 103 110] next-error [27 103 27 112] previous-error [27 103 27 110] next-error [27 103 27 103] goto-line [27 103 103] goto-line [27 103 99] goto-char [27 104] mark-paragraph [27 105] tab-to-tab-stop [27 106] indent-new-comment-line [27 107] kill-sentence [27 108] downcase-word [27 109] back-to-indentation [27 111 27 115] center-line [27 111 27 83] center-paragraph [27 111 27 111] font-lock-fontify-block [27 113] fill-paragraph [27 114] move-to-window-line-top-bottom [27 115 95] isearch-forward-symbol [27 115 119] isearch-forward-word [27 115 104 119] hi-lock-write-interactive-patterns [27 115 104 117] unhighlight-regexp [27 115 104 108] highlight-lines-matching-regexp [27 115 104 112] highlight-phrase [27 115 104 114] highlight-regexp [27 115 111] occur [27 116] transpose-words [27 117] upcase-word [27 118] scroll-down-command [27 119] kill-ring-save [27 120] execute-extended-command [27 121] yank-pop [27 122] zap-to-char [27 123] backward-paragraph [27 124] shell-command-on-region [27 125] forward-paragraph [27 126] not-modified [27 127] backward-kill-word [27 67108901] query-replace-regexp [27 67108910] find-tag-regexp [27 67108911] dabbrev-completion [27 C-backspace] backward-kill-sexp [27 C-delete] backward-kill-sexp [27 67108896] mark-sexp [27 C-end] end-of-defun [27 C-home] beginning-of-defun [27 C-down] down-list [27 C-up] backward-up-list [27 C-right] forward-sexp [27 C-left] backward-sexp [27 left] backward-word [27 right] forward-word [27 begin] beginning-of-buffer-other-window [27 end] end-of-buffer-other-window [27 33554454] scroll-other-window-down [27 prior] scroll-other-window-down [27 next] scroll-other-window [27 home] beginning-of-buffer-other-window [27 67108909] negative-argument [27 67108921] digit-argument [27 67108920] digit-argument [27 67108919] digit-argument [27 67108918] digit-argument [27 67108917] digit-argument [27 67108916] digit-argument [27 67108915] digit-argument [27 67108914] digit-argument [27 67108913] digit-argument [27 67108912] digit-argument [28] toggle-input-method [29] abort-recursive-edit [31] undo [127] delete-backward-char [S-mouse-3] kmacro-end-call-mouse [C-mouse-5] mwheel-scroll [S-mouse-5] mwheel-scroll [mouse-5] mwheel-scroll [C-mouse-4] mwheel-scroll [S-mouse-4] mwheel-scroll [mouse-4] mwheel-scroll [paste] clipboard-yank [copy] clipboard-kill-ring-save [cut] clipboard-kill-region [f18] clipboard-yank [f16] clipboard-kill-ring-save [f20] clipboard-kill-region [f10] menu-bar-open [vertical-line mouse-1] mouse-select-window [vertical-line down-mouse-1] mouse-drag-vertical-line [vertical-line C-mouse-2] mouse-split-window-vertically [vertical-scroll-bar mouse-1] scroll-bar-toolkit-scroll [vertical-scroll-bar C-mouse-2] mouse-split-window-vertically [header-line mouse-1] mouse-select-window [header-line down-mouse-1] mouse-drag-header-line [mode-line C-mouse-2] mouse-split-window-horizontally [mode-line mouse-3] mouse-delete-window [mode-line mouse-2] mouse-delete-other-windows [mode-line down-mouse-1] mouse-drag-mode-line [mode-line drag-mouse-1] mouse-select-window [mode-line mouse-1] mouse-select-window [S-down-mouse-1] mouse-appearance-menu [C-down-mouse-1] mouse-buffer-menu [mouse-3] mouse-save-then-kill [mouse-2] mouse-yank-primary [triple-mouse-1] mouse-set-point [double-mouse-1] mouse-set-point [drag-mouse-1] mouse-set-region [mouse-1] mouse-set-point [down-mouse-1] mouse-drag-region [M-mouse-2] mouse-yank-secondary [M-mouse-3] mouse-secondary-save-then-kill [M-down-mouse-1] mouse-drag-secondary [M-drag-mouse-1] mouse-set-secondary [M-mouse-1] mouse-start-secondary [compose-last-chars] compose-last-chars [f1 113] help-quit [f1 118] describe-variable [f1 119] where-is [f1 116] help-with-tutorial [f1 115] describe-syntax [f1 114] info-emacs-manual [f1 80] describe-package [f1 112] finder-by-keyword [f1 110] view-emacs-news [f1 109] describe-mode [f1 108] view-lossage [f1 107] describe-key [f1 52 105] info-other-window [f1 105] info [f1 104] view-hello-file [f1 103] describe-gnu-project [f1 102] describe-function [f1 101] view-echo-area-messages [f1 100] apropos-documentation [f1 99] describe-key-briefly [f1 98] describe-bindings [f1 97] apropos-command [f1 83] info-lookup-symbol [f1 76] describe-language-environment [f1 75] Info-goto-emacs-key-command-node [f1 73] describe-input-method [f1 70] Info-goto-emacs-command-node [f1 67] describe-coding-system [f1 28] describe-input-method [f1 23] describe-no-warranty [f1 20] view-emacs-todo [f1 16] view-emacs-problems [f1 15] describe-distribution [f1 14] view-emacs-news [f1 13] view-order-manuals [f1 6] view-emacs-FAQ [f1 5] view-external-packages [f1 4] view-emacs-debugging [f1 3] describe-copying [f1 1] about-emacs [f1 63] help-for-help [f1 46] display-local-help [f1 f1] help-for-help [f1 help] help-for-help [f1 8] help-for-help [help 113] help-quit [help 118] describe-variable [help 119] where-is [help 116] help-with-tutorial [help 115] describe-syntax [help 114] info-emacs-manual [help 80] describe-package [help 112] finder-by-keyword [help 110] view-emacs-news [help 109] describe-mode [help 108] view-lossage [help 107] describe-key [help 52 105] info-other-window [help 105] info [help 104] view-hello-file [help 103] describe-gnu-project [help 102] describe-function [help 101] view-echo-area-messages [help 100] apropos-documentation [help 99] describe-key-briefly [help 98] describe-bindings [help 97] apropos-command [help 83] info-lookup-symbol [help 76] describe-language-environment [help 75] Info-goto-emacs-key-command-node [help 73] describe-input-method [help 70] Info-goto-emacs-command-node [help 67] describe-coding-system [help 28] describe-input-method [help 23] describe-no-warranty [help 20] view-emacs-todo [help 16] view-emacs-problems [help 15] describe-distribution [help 14] view-emacs-news [help 13] view-order-manuals [help 6] view-emacs-FAQ [help 5] view-external-packages [help 4] view-emacs-debugging [help 3] describe-copying [help 1] about-emacs [help 63] help-for-help [help 46] display-local-help [help f1] help-for-help [help help] help-for-help [help 8] help-for-help [f2 115] 2C-split [f2 98] 2C-associate-buffer [f2 f2] 2C-two-columns [f2 50] 2C-two-columns [menu-bar mouse-1] tmm-menubar-mouse [f4] kmacro-end-or-call-macro [f3] kmacro-start-macro-or-insert-counter [C-M-end] end-of-defun [C-M-home] beginning-of-defun [C-M-down] down-list [C-M-up] backward-up-list [C-M-right] forward-sexp [C-M-left] backward-sexp [S-delete] kill-region [C-backspace] backward-kill-word [C-delete] kill-word [C-left] left-word [C-right] right-word [M-left] left-word [M-right] right-word [mouse-movement] ignore [deletechar] delete-forward-char [deleteline] kill-line [insertline] open-line [open] find-file [again] repeat-complex-command [redo] repeat-complex-command [undo] undo [S-insertchar] yank [C-insertchar] kill-ring-save [insertchar] overwrite-mode [S-insert] yank [C-insert] kill-ring-save [insert] overwrite-mode [execute] execute-extended-command [M-begin] beginning-of-buffer-other-window [begin] beginning-of-buffer [M-end] end-of-buffer-other-window [C-end] end-of-buffer [end] move-end-of-line [M-prior] scroll-other-window-down [M-next] scroll-other-window [C-next] scroll-left [C-prior] scroll-right [C-down] forward-paragraph [C-up] backward-paragraph [next] scroll-up-command [prior] scroll-down-command [down] next-line [right] right-char [up] previous-line [left] left-char [M-home] beginning-of-buffer-other-window [C-home] beginning-of-buffer [home] move-beginning-of-line [C-S-backspace] kill-whole-line [find] search-forward [menu] execute-extended-command [67108896] set-mark-command [67108909] negative-argument [67108921] digit-argument [67108920] digit-argument [67108919] digit-argument [67108918] digit-argument [67108917] digit-argument [67108916] digit-argument [67108915] digit-argument [67108914] digit-argument [67108913] digit-argument [67108912] digit-argument [XF86Back] previous-buffer [XF86Forward] next-buffer [67108911] undo [delete-frame] handle-delete-frame [select-window] handle-select-window [switch-frame] handle-switch-frame)))) (:map-key -2305843009213693820) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (emacs-lisp-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693903) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (undo-tree-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693747) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693746 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693742 :parent (:map-key -2305843009213693895)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (rust-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693741) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--normal-map ergoemacs-normal-translation-local-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693783) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ibuffer-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693919) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (bs-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693739 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693697) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (:map-key -2305843009213693695 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693692 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693690) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693650) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (:map-key -2305843009213693649 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693646 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693643 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693641 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693640 :parent (:map-key -2305843009213693895)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (sh-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693638) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693637 :parent (:map-key -2305843009213693889)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693635 :parent (:map-key -2305843009213693914)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (debugger-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693631) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693590) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (:map-key -2305843009213693589 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693587) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693547) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (:map-key -2305843009213693546 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693544) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693542) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693842 :parent (:map-key -2305843009213693837 :parent (:map-key -2305843009213693769))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-must-match-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693539) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693538 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693496) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (:map-key -2305843009213693495 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693493 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693492) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693490 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693448) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (:map-key -2305843009213693446 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693444) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693442 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (flycheck-error-list-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693436) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no :map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693435 :parent (:map-key -2305843009213693889)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693433 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693441 :parent (:map-key -2305843009213693931 :parent (:map-key -2305843009213693823 :parent (:map-key -2305843009213693870 :parent (:map-key -2305843009213693769))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693439 :parent (:map-key -2305843009213693889)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693438 :parent (:map-key -2305843009213693889)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693434) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693429 :parent (:map-key -2305843009213693889)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693427 :parent (:map-key -2305843009213693889)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map) :use-local-unbind-list-key no :use-set-map-key no))))] ergoemacs-theme-hash [object pcache-entry "pcache-entry" 1441053127.0771422 7776000 #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("lvl0" (:name "lvl0" :description "CUA-mode style" :components (unicode-fonts undo-tree lvl0-theme) :optional-on nil :optional-off nil :options-menu nil :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") "defined-themes" ("reduction" "standard" "lvl2" "lvl1" "lvl0") "lvl1" (:name "lvl1" :description "Arrow Key Movements Only" :components (unicode-fonts undo-tree lvl1-theme move-char) :optional-on nil :optional-off nil :options-menu nil :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") "lvl2" (:name "lvl2" :description "Arrow Key Movements, Moving/Deleting Words" :components (unicode-fonts undo-tree lvl2-theme move-char move-word) :optional-on nil :optional-off nil :options-menu nil :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") "standard" (:name "standard" :description "Standard Ergoemacs Theme" :components (unicode-fonts undo-tree standard-theme copy dired-tab dired-to-wdired execute fixed-newline help kill-line misc move-bracket move-buffer move-char move-line move-page move-paragraph move-word search select-items switch text-transform ergoemacs-remaps standard-vars) :optional-on (apps-punctuation tab-indents-region icy-reclaim apps-apps apps-toggle apps backspace-del-seq backspace-is-back fn-keys f2-edit fixed-bold-italic standard-fixed ido-remaps helm-remaps multiple-cursors-remaps quit apps-swap save-options-on-exit menu-bar-help menu-bar-languages menu-bar-view menu-bar-search menu-bar-edit menu-bar-file) :optional-off (guru alt-backspace-is-undo search-reg no-backspace ergoemacs-banish-shift move-and-transpose-lines move-sexp helm-switch-sources helm-files-up ido-prev-next-instead-of-left-right) :options-menu (("Menu/Apps Key" (apps apps-apps apps-punctuation apps-toggle)) ("Function Keys" (fn-keys f2-edit)) ("Helm Options" (helm-switch-sources helm-files-up)) ("Remaps" (ido-remaps helm-remaps multiple-cursors-remaps icy-reclaim)) ("Extreme ErgoEmacs" (guru no-backspace ergoemacs-banish-shift)) ("Standard Keys" (standard-fixed fixed-bold-italic quit move-and-transpose-lines alt-backspace-is-undo)) ("Keys during Key Sequence" (f2-edit apps-swap backspace-del-seq)) ("Disputed Keys" (ido-prev-next-instead-of-left-right move-sexp)) ("Ergoemacs global menus" (menu-bar-file menu-bar-edit menu-bar-search menu-bar-view menu-bar-languages menu-bar-help))) :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc") "reduction" (:name "reduction" :description "Reduce Ergoemacs keys" :based-on (quote standard) :components (unicode-fonts undo-tree reduction-theme multiple-cursors ace-jump-mode expand-region standard-theme copy dired-tab dired-to-wdired execute fixed-newline help kill-line misc move-bracket move-buffer move-char move-line move-page move-paragraph move-word search select-items switch text-transform ergoemacs-remaps standard-vars) :optional-on (apps-punctuation tab-indents-region icy-reclaim apps-apps apps-toggle apps backspace-del-seq backspace-is-back fn-keys f2-edit fixed-bold-italic standard-fixed ido-remaps helm-remaps multiple-cursors-remaps quit apps-swap save-options-on-exit menu-bar-help menu-bar-languages menu-bar-view menu-bar-search menu-bar-edit menu-bar-file) :optional-off (guru alt-backspace-is-undo search-reg no-backspace ergoemacs-banish-shift move-and-transpose-lines move-sexp helm-switch-sources helm-files-up ido-prev-next-instead-of-left-right) :options-menu (("Menu/Apps Key" (apps apps-apps apps-punctuation apps-toggle)) ("Function Keys" (fn-keys f2-edit)) ("Helm Options" (helm-switch-sources helm-files-up)) ("Remaps" (ido-remaps helm-remaps multiple-cursors-remaps icy-reclaim)) ("Extreme ErgoEmacs" (guru no-backspace ergoemacs-banish-shift)) ("Standard Keys" (standard-fixed fixed-bold-italic quit move-and-transpose-lines alt-backspace-is-undo)) ("Keys during Key Sequence" (f2-edit apps-swap backspace-del-seq)) ("Disputed Keys" (ido-prev-next-instead-of-left-right move-sexp)) ("Ergoemacs global menus" (menu-bar-file menu-bar-edit menu-bar-search menu-bar-view menu-bar-languages menu-bar-help))) :file "/home/m0r15/.emacs.d/elpa/ergoemacs-mode-20150829.1732/ergoemacs-themes.elc")))] ergoemacs-translate--event-hash [object pcache-entry "pcache-entry" 1441053127.0773125 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-layout-us #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (126 96 s96 126 33 49 s49 33 64 50 s50 64 35 51 s51 35 36 52 s52 36 37 53 s53 37 94 54 s54 94 38 55 s55 38 42 56 s56 42 40 57 s57 40 41 48 s48 41 95 45 s45 95 43 61 s61 43 123 91 s91 123 125 93 s93 125 124 92 s92 124 58 59 s59 58 34 39 s39 34 60 44 s44 60 62 46 s46 62 63 47 s47 63))))] ergoemacs-translate--hash [object pcache-entry "pcache-entry" 1441053127.077396 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ())] ergoemacs-translation-hash [object pcache-entry "pcache-entry" 1441053127.0775144 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:normal [cl-struct-ergoemacs-translation-struct "normal" nil nil nil nil nil nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693741))) (8 . ergoemacs-read-key-help) (f1 . ergoemacs-read-key-help)) (keymap) nil nil :normal nil] :ctl-to-alt #[0 "\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317\320\321\322\323\324\325\326\327\330\331\332\333\334\335\336\337\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356\357 \360\361\362#\210\360\363\364!\362#\210\360\365=\203J \366\202K \367\370#\210\360\363\371!\372#\210\360\363\373!\374#\210\211\262&.\207" [system-type ergoemacs-translate--create :key :ctl-to-alt :name "ctl-to-alt" :description "Ctl <-> Alt translation" :text #[0 "\300\301\302\303\304\"\"\207" [format "<Ctl%sAlt> " ergoemacs-key-description--unicode-char "↔" " to "] 5 "

(fn)"] :meta (control) :control (meta) :meta-shift (control shift) :control-shift (meta shift) :control-hyper (meta hyper) :meta-hyper (control hyper) :control-super (meta super) :meta-super (control super) :meta-shift-hyper (control shift hyper) :control-shift-hyper (meta shift hyper) :meta-shift-super (control shift super) :control-shift-super (meta shift super) :meta-super-hyper (control super hyper) :control-super-hyper (meta super hyper) :meta-super-hyper-shift (control super hyper shift) :control-super-hyper-shift (meta super hyper shift) :modal-color "blue" :modal-always t :keymap make-sparse-keymap define-key [f1] ergoemacs-read-key-help read-kbd-macro "M-h" windows-nt [M-apps] [M-menu] ergoemacs-read-key-force-next-key-is-quoted "SPC" ergoemacs-read-key-force-next-key-is-ctl "M-SPC" ergoemacs-read-key-force-next-key-is-alt] 51 "Ctl <-> Alt translation

(fn)"] :unchorded-ctl #[0 "\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317\320\321\322 \323\324\325#\210\323\326\327!\330#\210\323\326\331!\332#\210\323\333\334#\210\323\335\332#\210\211\262&\207" [ergoemacs-translate--create :key :unchorded-ctl :name "unchorded-ctl" :description "Make the Ctl key sticky." :text "<Ctl+>" :unchorded (control) :shift (control shift) :meta nil :control (meta) :keymap make-sparse-keymap define-key [f1] ergoemacs-read-key-help read-kbd-macro "SPC" ergoemacs-read-key-force-next-key-is-quoted "M-SPC" ergoemacs-read-key-force-next-key-is-alt-ctl "g" ergoemacs-read-key-force-next-key-is-alt "G"] 23 "Make the Ctl key sticky.

(fn)"] :unchorded-alt #[0 "\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317\320\321\322 \323\324\325!\326#\210\323\324\327!\326#\210\211\262&\207" [ergoemacs-translate--create :key :unchorded-alt :name "unchorded-alt" :description "Make the Alt key sticky." :text "<Alt+>" :unchorded (meta) :shift (meta shift) :meta (meta shift) :modal-color "red" :keymap-modal make-sparse-keymap define-key read-kbd-macro "<return>" ergoemacs-unchorded-alt-modal "RET"] 23 "Make the Alt key sticky.

(fn)"]))] ergoemacs-breadcrumb-hash [object pcache-entry "pcache-entry" 1441053127.077619 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:minor-mode-map-alist:2C-mode -2305843009213693748 -2305843009213693748 :minor-mode-map-alist:2C-mode :minor-mode-map-alist:ido-mode -2305843009213693747 -2305843009213693747 :minor-mode-map-alist:ido-mode rust-mode -2305843009213693742 -2305843009213693742 rust-mode :minor-mode-map-alist:racer-mode -2305843009213693631 -2305843009213693631 :minor-mode-map-alist:racer-mode :minor-mode-map-alist:flycheck-mode -2305843009213693539 -2305843009213693539 :minor-mode-map-alist:flycheck-mode flycheck-error-list-mode -2305843009213693442 -2305843009213693442 flycheck-error-list-mode))] ergoemacs-map-properties--create-label-function [object pcache-entry "pcache-entry" 1441053127.0816588 7776000 (lambda nil (progn (eval-after-load "lisp-mode" (quote (when (boundp (quote emacs-lisp-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote emacs-lisp-mode-map)) (ergoemacs-map-properties--label emacs-lisp-mode-map -2305843009213693820)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-mode-filter-group-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-mode-filter-group-map)) (ergoemacs-map-properties--label ibuffer-mode-filter-group-map -2305843009213693767)))) (eval-after-load "loaddefs" (quote (when (boundp (quote eudc-tools-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote eudc-tools-menu)) (ergoemacs-map-properties--label eudc-tools-menu -2305843009213693823)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-column-line-number-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-column-line-number-mode-map)) (ergoemacs-map-properties--label mode-line-column-line-number-mode-map -2305843009213693824)))) (eval-after-load "subr" (quote (when (boundp (quote read-passwd-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote read-passwd-map)) (ergoemacs-map-properties--label read-passwd-map -2305843009213693825)))) (eval-after-load "undo-tree" (quote (when (boundp (quote undo-tree-visualizer-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote undo-tree-visualizer-mode-map)) (ergoemacs-map-properties--label undo-tree-visualizer-mode-map -2305843009213693773)))) (eval-after-load "startup" (quote (when (boundp (quote splash-screen-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote splash-screen-keymap)) (ergoemacs-map-properties--label splash-screen-keymap -2305843009213693826)))) (eval-after-load "package" (quote (when (boundp (quote package-menu-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote package-menu-mode-map)) (ergoemacs-map-properties--label package-menu-mode-map -2305843009213693827)))) (eval-after-load "info" (quote (when (boundp (quote Info-speedbar-key-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-speedbar-key-map)) (ergoemacs-map-properties--label Info-speedbar-key-map -2305843009213693776)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-major-mode-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-major-mode-keymap)) (ergoemacs-map-properties--label mode-line-major-mode-keymap -2305843009213693828)))) (eval-after-load "info" (quote (when (boundp (quote Info-mode-line-node-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-mode-line-node-keymap)) (ergoemacs-map-properties--label Info-mode-line-node-keymap -2305843009213693778)))) (eval-after-load "org" (quote (when (boundp (quote org-tbl-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-tbl-menu)) (ergoemacs-map-properties--label org-tbl-menu -2305843009213693779)))) (eval-after-load "kmacro" (quote (when (boundp (quote kmacro-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote kmacro-keymap)) (ergoemacs-map-properties--label kmacro-keymap -2305843009213693830)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-manuals-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-manuals-menu)) (ergoemacs-map-properties--label menu-bar-manuals-menu -2305843009213693831)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-mode-map)) (ergoemacs-map-properties--label ibuffer-mode-map -2305843009213693783)))) (eval-after-load "help" (quote (when (boundp (quote help-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote help-map)) (ergoemacs-map-properties--label help-map -2305843009213693832)))) (eval-after-load "buff-menu" (quote (when (boundp (quote Buffer-menu-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Buffer-menu-mode-map)) (ergoemacs-map-properties--label Buffer-menu-mode-map -2305843009213693833)))) (eval-after-load "bindings" (quote (when (boundp (quote goto-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote goto-map)) (ergoemacs-map-properties--label goto-map -2305843009213693834)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-mode-name-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-mode-name-map)) (ergoemacs-map-properties--label ibuffer-mode-name-map -2305843009213693787)))) (eval-after-load "info" (quote (when (boundp (quote Info-edit-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-edit-map)) (ergoemacs-map-properties--label Info-edit-map -2305843009213693789)))) (eval-after-load "speedbar" (quote (when (boundp (quote speedbar-key-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote speedbar-key-map)) (ergoemacs-map-properties--label speedbar-key-map -2305843009213693932)))) (eval-after-load "cal-menu" (quote (when (boundp (quote cal-menu-global-mouse-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote cal-menu-global-mouse-menu)) (ergoemacs-map-properties--label cal-menu-global-mouse-menu -2305843009213693790)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-face-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-face-menu)) (ergoemacs-map-properties--label facemenu-face-menu -2305843009213693836)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-local-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-completion-map)) (ergoemacs-map-properties--label minibuffer-local-completion-map -2305843009213693837)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-special-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-special-menu)) (ergoemacs-map-properties--label facemenu-special-menu -2305843009213693838)))) (eval-after-load "info" (quote (when (boundp (quote Info-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-mode-menu)) (ergoemacs-map-properties--label Info-mode-menu -2305843009213693795)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-key-sequence-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-key-sequence-map)) (ergoemacs-map-properties--label widget-key-sequence-map -2305843009213693839)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-buffer-identification-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-buffer-identification-keymap)) (ergoemacs-map-properties--label mode-line-buffer-identification-keymap -2305843009213693840)))) (eval-after-load "lisp-mode" (quote (when (boundp (quote lisp-mode-shared-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote lisp-mode-shared-map)) (ergoemacs-map-properties--label lisp-mode-shared-map -2305843009213693841)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-local-must-match-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-must-match-map)) (ergoemacs-map-properties--label minibuffer-local-must-match-map -2305843009213693842)))) (eval-after-load "bindings" (quote (when (boundp (quote abbrev-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote abbrev-map)) (ergoemacs-map-properties--label abbrev-map -2305843009213693843)))) (eval-after-load "bindings" (quote (when (boundp (quote search-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote search-map)) (ergoemacs-map-properties--label search-map -2305843009213693844)))) (eval-after-load "simple" (quote (when (boundp (quote special-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote special-mode-map)) (ergoemacs-map-properties--label special-mode-map -2305843009213693845)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-ediff-merge-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-ediff-merge-menu)) (ergoemacs-map-properties--label menu-bar-ediff-merge-menu -2305843009213693846)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-foreground-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-foreground-menu)) (ergoemacs-map-properties--label facemenu-foreground-menu -2305843009213693847)))) (eval-after-load "outline" (quote (when (boundp (quote outline-mode-menu-bar-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote outline-mode-menu-bar-map)) (ergoemacs-map-properties--label outline-mode-menu-bar-map -2305843009213693805)))) (eval-after-load "replace" (quote (when (boundp (quote occur-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote occur-menu-map)) (ergoemacs-map-properties--label occur-menu-map -2305843009213693848)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-local-filename-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-filename-completion-map)) (ergoemacs-map-properties--label minibuffer-local-filename-completion-map -2305843009213693849)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-fringe-ind-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-fringe-ind-menu)) (ergoemacs-map-properties--label menu-bar-showhide-fringe-ind-menu -2305843009213693850)))) (eval-after-load "bindings" (quote (when (boundp (quote narrow-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote narrow-map)) (ergoemacs-map-properties--label narrow-map -2305843009213693851)))) (eval-after-load "org" (quote (when (boundp (quote org-goto-local-auto-isearch-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-goto-local-auto-isearch-map)) (ergoemacs-map-properties--label org-goto-local-auto-isearch-map -2305843009213693810)))) (eval-after-load "two-column" (quote (when (boundp (quote 2C-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote 2C-mode-map)) (ergoemacs-map-properties--label 2C-mode-map -2305843009213693852)))) (eval-after-load "simple" (quote (when (boundp (quote completion-list-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote completion-list-mode-map)) (ergoemacs-map-properties--label completion-list-mode-map -2305843009213693853)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote setup-language-environment-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote setup-language-environment-map)) (ergoemacs-map-properties--label setup-language-environment-map -2305843009213693854)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-mode-groups-popup)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-mode-groups-popup)) (ergoemacs-map-properties--label ibuffer-mode-groups-popup -2305843009213693814)))) (eval-after-load "ergoemacs-mode" (quote (when (boundp (quote ergoemacs-modal-ignored-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ergoemacs-modal-ignored-keymap)) (ergoemacs-map-properties--label ergoemacs-modal-ignored-keymap -2305843009213693855)))) (eval-after-load "cus-edit" (quote (when (boundp (quote custom-field-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote custom-field-keymap)) (ergoemacs-map-properties--label custom-field-keymap -2305843009213693856)))) (eval-after-load "speedbar" (quote (when (boundp (quote speedbar-buffers-key-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote speedbar-buffers-key-map)) (ergoemacs-map-properties--label speedbar-buffers-key-map -2305843009213693817)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-line-wrapping-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-line-wrapping-menu)) (ergoemacs-map-properties--label menu-bar-line-wrapping-menu -2305843009213693857)))) (eval-after-load "indent" (quote (when (boundp (quote edit-tab-stops-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote edit-tab-stops-map)) (ergoemacs-map-properties--label edit-tab-stops-map -2305843009213693858)))) (eval-after-load "undo-tree" (quote (when (boundp (quote undo-tree-visualizer-selection-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote undo-tree-visualizer-selection-mode-map)) (ergoemacs-map-properties--label undo-tree-visualizer-selection-mode-map -2305843009213693820)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-file-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-file-menu)) (ergoemacs-map-properties--label menu-bar-file-menu -2305843009213693869)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-indentation-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-indentation-menu)) (ergoemacs-map-properties--label facemenu-indentation-menu -2305843009213693859)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-tool-bar-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-tool-bar-menu)) (ergoemacs-map-properties--label menu-bar-showhide-tool-bar-menu -2305843009213693860)))) (eval-after-load "ido" (quote (when (boundp (quote ido-file-dir-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ido-file-dir-completion-map)) (ergoemacs-map-properties--label ido-file-dir-completion-map -2305843009213693823)))) (eval-after-load "text-mode" (quote (when (boundp (quote text-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote text-mode-map)) (ergoemacs-map-properties--label text-mode-map -2305843009213693862)))) (eval-after-load "info" (quote (when (boundp (quote Info-link-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-link-keymap)) (ergoemacs-map-properties--label Info-link-keymap -2305843009213693826)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote mule-menu-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mule-menu-keymap)) (ergoemacs-map-properties--label mule-menu-keymap -2305843009213693863)))) (eval-after-load "info" (quote (when (boundp (quote Info-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-mode-map)) (ergoemacs-map-properties--label Info-mode-map -2305843009213693828)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-menu)) (ergoemacs-map-properties--label menu-bar-showhide-menu -2305843009213693864)))) (eval-after-load "smartparens" (quote (when (boundp (quote sp-wrap-overlay-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote sp-wrap-overlay-keymap)) (ergoemacs-map-properties--label sp-wrap-overlay-keymap -2305843009213693830)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-ediff-misc-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-ediff-misc-menu)) (ergoemacs-map-properties--label menu-bar-ediff-misc-menu -2305843009213693865)))) (eval-after-load "markdown-mode" (quote (when (boundp (quote markdown-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote markdown-mode-map)) (ergoemacs-map-properties--label markdown-mode-map -2305843009213693832)))) (eval-after-load "simple" (quote (when (boundp (quote minibuffer-local-shell-command-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-shell-command-map)) (ergoemacs-map-properties--label minibuffer-local-shell-command-map -2305843009213693866)))) (eval-after-load "markdown-mode" (quote (when (boundp (quote gfm-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote gfm-mode-map)) (ergoemacs-map-properties--label gfm-mode-map -2305843009213693834)))) (eval-after-load "minibuffer" (quote (when (boundp (quote completion-in-region-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote completion-in-region-mode-map)) (ergoemacs-map-properties--label completion-in-region-mode-map -2305843009213693867)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-mode-operate-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-mode-operate-map)) (ergoemacs-map-properties--label ibuffer-mode-operate-map -2305843009213693836)))) (eval-after-load "isearch" (quote (when (boundp (quote isearch-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote isearch-mode-map)) (ergoemacs-map-properties--label isearch-mode-map -2305843009213693868)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-files-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-files-menu)) (ergoemacs-map-properties--label menu-bar-files-menu -2305843009213693869)))) (eval-after-load "bookmark" (quote (when (boundp (quote bookmark-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote bookmark-map)) (ergoemacs-map-properties--label bookmark-map -2305843009213693471)))) (eval-after-load "comint" (quote (when (boundp (quote comint-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote comint-mode-map)) (ergoemacs-map-properties--label comint-mode-map -2305843009213693840)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-search-documentation-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-search-documentation-menu)) (ergoemacs-map-properties--label menu-bar-search-documentation-menu -2305843009213693871)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-global-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-global-map)) (ergoemacs-map-properties--label widget-global-map -2305843009213693952)))) (eval-after-load "info" (quote (when (boundp (quote info-tool-bar-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote info-tool-bar-map)) (ergoemacs-map-properties--label info-tool-bar-map -2305843009213693842)))) (eval-after-load "org-src" (quote (when (boundp (quote org-src-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-src-mode-map)) (ergoemacs-map-properties--label org-src-mode-map -2305843009213693843)))) (eval-after-load "cus-edit" (quote (when (boundp (quote custom-mode-link-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote custom-mode-link-map)) (ergoemacs-map-properties--label custom-mode-link-map -2305843009213693872)))) (eval-after-load "replace" (quote (when (boundp (quote query-replace-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote query-replace-map)) (ergoemacs-map-properties--label query-replace-map -2305843009213693873)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-search-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-search-menu)) (ergoemacs-map-properties--label menu-bar-search-menu -2305843009213693874)))) (eval-after-load "outline" (quote (when (boundp (quote outline-minor-mode-menu-bar-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote outline-minor-mode-menu-bar-map)) (ergoemacs-map-properties--label outline-minor-mode-menu-bar-map -2305843009213693847)))) (eval-after-load "simple" (quote (when (boundp (quote visual-line-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote visual-line-mode-map)) (ergoemacs-map-properties--label visual-line-mode-map -2305843009213693875)))) (eval-after-load "help-mode" (quote (when (boundp (quote help-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote help-mode-menu)) (ergoemacs-map-properties--label help-mode-menu -2305843009213693876)))) (eval-after-load "calendar" (quote (when (boundp (quote calendar-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote calendar-mode-map)) (ergoemacs-map-properties--label calendar-mode-map -2305843009213693850)))) (eval-after-load "subr" (quote (when (boundp (quote ctl-x-4-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-4-map)) (ergoemacs-map-properties--label ctl-x-4-map -2305843009213693877)))) (eval-after-load "menu-bar" (quote (when (boundp (quote global-buffers-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote global-buffers-menu-map)) (ergoemacs-map-properties--label global-buffers-menu-map -2305843009213693433)))) (eval-after-load "outline" (quote (when (boundp (quote outline-minor-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote outline-minor-mode-map)) (ergoemacs-map-properties--label outline-minor-mode-map -2305843009213693853)))) (eval-after-load "replace" (quote (when (boundp (quote occur-edit-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote occur-edit-mode-map)) (ergoemacs-map-properties--label occur-edit-mode-map -2305843009213693879)))) (eval-after-load "ergoemacs-mode" (quote (when (boundp (quote ergoemacs-map-properties--global-map-before-ergoemacs)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ergoemacs-map-properties--global-map-before-ergoemacs)) (ergoemacs-map-properties--label ergoemacs-map-properties--global-map-before-ergoemacs -2305843009213693880)))) (eval-after-load "dired" (quote (when (boundp (quote dired-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote dired-mode-map)) (ergoemacs-map-properties--label dired-mode-map -2305843009213693857)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-describe-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-describe-menu)) (ergoemacs-map-properties--label menu-bar-describe-menu -2305843009213693882)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-text-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-text-keymap)) (ergoemacs-map-properties--label widget-text-keymap -2305843009213693883)))) (eval-after-load "isearch" (quote (when (boundp (quote isearch-help-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote isearch-help-map)) (ergoemacs-map-properties--label isearch-help-map -2305843009213693884)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-keymap)) (ergoemacs-map-properties--label facemenu-keymap -2305843009213693885)))) (eval-after-load "two-column" (quote (when (boundp (quote 2C-minor-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote 2C-minor-mode-map)) (ergoemacs-map-properties--label 2C-minor-mode-map -2305843009213693886)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-field-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-field-keymap)) (ergoemacs-map-properties--label widget-field-keymap -2305843009213693887)))) (eval-after-load "org" (quote (when (boundp (quote org-read-date-minibuffer-local-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-read-date-minibuffer-local-map)) (ergoemacs-map-properties--label org-read-date-minibuffer-local-map -2305843009213693864)))) (eval-after-load "vc-hooks" (quote (when (boundp (quote vc-mode-line-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote vc-mode-line-map)) (ergoemacs-map-properties--label vc-mode-line-map -2305843009213693888)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-encryption-decryption-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-encryption-decryption-menu)) (ergoemacs-map-properties--label menu-bar-encryption-decryption-menu -2305843009213693889)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-ediff-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-ediff-menu)) (ergoemacs-map-properties--label menu-bar-ediff-menu -2305843009213693890)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-name-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-name-map)) (ergoemacs-map-properties--label ibuffer-name-map -2305843009213693868)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-name-header-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-name-header-map)) (ergoemacs-map-properties--label ibuffer-name-header-map -2305843009213693869)))) (eval-after-load "ido" (quote (when (boundp (quote ido-common-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ido-common-completion-map)) (ergoemacs-map-properties--label ido-common-completion-map -2305843009213693870)))) (eval-after-load "replace" (quote (when (boundp (quote occur-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote occur-mode-map)) (ergoemacs-map-properties--label occur-mode-map -2305843009213693891)))) (eval-after-load "bindings" (quote (when (boundp (quote ctl-x-r-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-r-map)) (ergoemacs-map-properties--label ctl-x-r-map -2305843009213693892)))) (eval-after-load "org" (quote (when (boundp (quote org-org-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-org-menu)) (ergoemacs-map-properties--label org-org-menu -2305843009213693874)))) (eval-after-load "tabulated-list" (quote (when (boundp (quote tabulated-list-sort-button-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote tabulated-list-sort-button-map)) (ergoemacs-map-properties--label tabulated-list-sort-button-map -2305843009213693894)))) (eval-after-load "simple" (quote (when (boundp (quote prog-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote prog-mode-map)) (ergoemacs-map-properties--label prog-mode-map -2305843009213693895)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote describe-language-environment-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote describe-language-environment-map)) (ergoemacs-map-properties--label describe-language-environment-map -2305843009213693896)))) (eval-after-load "org" (quote (when (boundp (quote org-cdlatex-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-cdlatex-mode-map)) (ergoemacs-map-properties--label org-cdlatex-mode-map -2305843009213693878)))) (eval-after-load "lisp-mode" (quote (when (boundp (quote lisp-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote lisp-mode-map)) (ergoemacs-map-properties--label lisp-mode-map -2305843009213693897)))) (eval-after-load "pcvs-defs" (quote (when (boundp (quote cvs-global-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote cvs-global-menu)) (ergoemacs-map-properties--label cvs-global-menu -2305843009213693475)))) (eval-after-load "tabulated-list" (quote (when (boundp (quote tabulated-list-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote tabulated-list-mode-map)) (ergoemacs-map-properties--label tabulated-list-mode-map -2305843009213693899)))) (eval-after-load "abbrev" (quote (when (boundp (quote edit-abbrevs-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote edit-abbrevs-map)) (ergoemacs-map-properties--label edit-abbrevs-map -2305843009213693900)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-menu)) (ergoemacs-map-properties--label facemenu-menu -2305843009213693901)))) (eval-after-load "cus-edit" (quote (when (boundp (quote Custom-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Custom-mode-menu)) (ergoemacs-map-properties--label Custom-mode-menu -2305843009213693902)))) (eval-after-load "isearch" (quote (when (boundp (quote minibuffer-local-isearch-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-isearch-map)) (ergoemacs-map-properties--label minibuffer-local-isearch-map -2305843009213693903)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote set-coding-system-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote set-coding-system-map)) (ergoemacs-map-properties--label set-coding-system-map -2305843009213693904)))) (eval-after-load "ergoemacs-translate" (quote (when (boundp (quote ergoemacs-translate--modal-parent-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ergoemacs-translate--modal-parent-map)) (ergoemacs-map-properties--label ergoemacs-translate--modal-parent-map 2305843009213693949)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-size-header-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-size-header-map)) (ergoemacs-map-properties--label ibuffer-size-header-map -2305843009213693887)))) (eval-after-load "smartparens" (quote (when (boundp (quote smartparens-strict-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote smartparens-strict-mode-map)) (ergoemacs-map-properties--label smartparens-strict-mode-map -2305843009213693888)))) (eval-after-load "ido" (quote (when (boundp (quote ido-buffer-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ido-buffer-completion-map)) (ergoemacs-map-properties--label ido-buffer-completion-map -2305843009213693889)))) (eval-after-load "outline" (quote (when (boundp (quote outline-mode-prefix-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote outline-mode-prefix-map)) (ergoemacs-map-properties--label outline-mode-prefix-map -2305843009213693890)))) (eval-after-load "kmacro" (quote (when (boundp (quote kmacro-step-edit-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote kmacro-step-edit-map)) (ergoemacs-map-properties--label kmacro-step-edit-map -2305843009213693906)))) (eval-after-load "ergoemacs-translate" (quote (when (boundp (quote ergoemacs-translate--parent-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ergoemacs-translate--parent-map)) (ergoemacs-map-properties--label ergoemacs-translate--parent-map 2305843009213693950)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-input-method-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-input-method-map)) (ergoemacs-map-properties--label mode-line-input-method-map -2305843009213693907)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-scroll-bar-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-scroll-bar-menu)) (ergoemacs-map-properties--label menu-bar-showhide-scroll-bar-menu -2305843009213693908)))) (eval-after-load "common-win" (quote (when (boundp (quote x-alternatives-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote x-alternatives-map)) (ergoemacs-map-properties--label x-alternatives-map -2305843009213693909)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-mode-menu)) (ergoemacs-map-properties--label mode-line-mode-menu -2305843009213693912)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-tools-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-tools-menu)) (ergoemacs-map-properties--label menu-bar-tools-menu -2305843009213693913)))) (eval-after-load "button" (quote (when (boundp (quote button-buffer-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote button-buffer-map)) (ergoemacs-map-properties--label button-buffer-map -2305843009213693914)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-fringe-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-fringe-menu)) (ergoemacs-map-properties--label menu-bar-showhide-fringe-menu -2305843009213693915)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-help-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-help-menu)) (ergoemacs-map-properties--label menu-bar-help-menu -2305843009213693916)))) (eval-after-load "undo-tree" (quote (when (boundp (quote undo-tree-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote undo-tree-map)) (ergoemacs-map-properties--label undo-tree-map -2305843009213693903)))) (eval-after-load "ob-keys" (quote (when (boundp (quote org-babel-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-babel-map)) (ergoemacs-map-properties--label org-babel-map -2305843009213693904)))) (eval-after-load "org" (quote (when (boundp (quote org-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-mode-map)) (ergoemacs-map-properties--label org-mode-map -2305843009213693905)))) (eval-after-load "bookmark" (quote (when (boundp (quote menu-bar-bookmark-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-bookmark-map)) (ergoemacs-map-properties--label menu-bar-bookmark-map -2305843009213693479)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-custom-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-custom-menu)) (ergoemacs-map-properties--label menu-bar-custom-menu -2305843009213693918)))) (eval-after-load "help-mode" (quote (when (boundp (quote help-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote help-mode-map)) (ergoemacs-map-properties--label help-mode-map -2305843009213693919)))) (eval-after-load "smartparens" (quote (when (boundp (quote sp-pair-overlay-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote sp-pair-overlay-keymap)) (ergoemacs-map-properties--label sp-pair-overlay-keymap -2305843009213693909)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote mule-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mule-keymap)) (ergoemacs-map-properties--label mule-keymap -2305843009213693920)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-minor-mode-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-minor-mode-keymap)) (ergoemacs-map-properties--label mode-line-minor-mode-keymap -2305843009213693921)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-games-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-games-menu)) (ergoemacs-map-properties--label menu-bar-games-menu -2305843009213693922)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-justification-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-justification-menu)) (ergoemacs-map-properties--label facemenu-justification-menu -2305843009213693923)))) (eval-after-load "simple" (quote (when (boundp (quote universal-argument-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote universal-argument-map)) (ergoemacs-map-properties--label universal-argument-map -2305843009213693924)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-coding-system-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-coding-system-map)) (ergoemacs-map-properties--label mode-line-coding-system-map -2305843009213693925)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-inactive-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-inactive-mode-map)) (ergoemacs-map-properties--label minibuffer-inactive-mode-map -2305843009213693926)))) (eval-after-load "subr" (quote (when (boundp (quote global-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote global-map)) (ergoemacs-map-properties--label global-map -2305843009213693952)))) (eval-after-load "subr" (quote (when (boundp (quote ctl-x-5-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-5-map)) (ergoemacs-map-properties--label ctl-x-5-map -2305843009213693927)))) (eval-after-load "bs" (quote (when (boundp (quote bs-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote bs-mode-map)) (ergoemacs-map-properties--label bs-mode-map -2305843009213693919)))) (eval-after-load "markdown-mode" (quote (when (boundp (quote markdown-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote markdown-mode-menu)) (ergoemacs-map-properties--label markdown-mode-menu -2305843009213693920)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-i-search-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-i-search-menu)) (ergoemacs-map-properties--label menu-bar-i-search-menu -2305843009213693928)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-goto-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-goto-menu)) (ergoemacs-map-properties--label menu-bar-goto-menu -2305843009213693929)))) (eval-after-load "vc-hooks" (quote (when (boundp (quote vc-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote vc-menu-map)) (ergoemacs-map-properties--label vc-menu-map -2305843009213693930)))) (eval-after-load "ispell" (quote (when (boundp (quote ispell-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ispell-menu-map)) (ergoemacs-map-properties--label ispell-menu-map -2305843009213693480)))) (eval-after-load "button" (quote (when (boundp (quote button-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote button-map)) (ergoemacs-map-properties--label button-map -2305843009213693932)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-mode-header-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-mode-header-map)) (ergoemacs-map-properties--label ibuffer-mode-header-map -2305843009213693926)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-background-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-background-menu)) (ergoemacs-map-properties--label facemenu-background-menu -2305843009213693933)))) (eval-after-load "org" (quote (when (boundp (quote org-mouse-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote org-mouse-map)) (ergoemacs-map-properties--label org-mouse-map -2305843009213693929)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-epatch-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-epatch-menu)) (ergoemacs-map-properties--label menu-bar-epatch-menu -2305843009213693935)))) (eval-after-load "ido" (quote (when (boundp (quote ido-file-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ido-file-completion-map)) (ergoemacs-map-properties--label ido-file-completion-map -2305843009213693931)))) (eval-after-load "speedbar" (quote (when (boundp (quote speedbar-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote speedbar-mode-map)) (ergoemacs-map-properties--label speedbar-mode-map -2305843009213693932)))) (eval-after-load "ibuffer" (quote (when (boundp (quote ibuffer-filename/process-header-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ibuffer-filename/process-header-map)) (ergoemacs-map-properties--label ibuffer-filename/process-header-map -2305843009213693935)))) (eval-after-load "vc-hooks" (quote (when (boundp (quote vc-prefix-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote vc-prefix-map)) (ergoemacs-map-properties--label vc-prefix-map -2305843009213693939)))) (eval-after-load "tool-bar" (quote (when (boundp (quote tool-bar-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote tool-bar-map)) (ergoemacs-map-properties--label tool-bar-map -2305843009213693938)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-edit-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-edit-menu)) (ergoemacs-map-properties--label menu-bar-edit-menu -2305843009213693940)))) (eval-after-load "outline" (quote (when (boundp (quote outline-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote outline-mode-map)) (ergoemacs-map-properties--label outline-mode-map -2305843009213693940)))) (eval-after-load "edmacro" (quote (when (boundp (quote edmacro-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote edmacro-mode-map)) (ergoemacs-map-properties--label edmacro-mode-map -2305843009213693941)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-keymap)) (ergoemacs-map-properties--label widget-keymap -2305843009213693942)))) (eval-after-load "speedbar" (quote (when (boundp (quote speedbar-file-key-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote speedbar-file-key-map)) (ergoemacs-map-properties--label speedbar-file-key-map -2305843009213693943)))) (eval-after-load "replace" (quote (when (boundp (quote multi-query-replace-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote multi-query-replace-map)) (ergoemacs-map-properties--label multi-query-replace-map -2305843009213693943)))) (eval-after-load "cus-edit" (quote (when (boundp (quote custom-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote custom-mode-map)) (ergoemacs-map-properties--label custom-mode-map -2305843009213693944)))) (eval-after-load "subr" (quote (when (boundp (quote ctl-x-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-map)) (ergoemacs-map-properties--label ctl-x-map -2305843009213693945)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-options-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-options-menu)) (ergoemacs-map-properties--label menu-bar-options-menu -2305843009213693946)))) (eval-after-load "lisp-mode" (quote (when (boundp (quote lisp-interaction-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote lisp-interaction-mode-map)) (ergoemacs-map-properties--label lisp-interaction-mode-map -2305843009213693948)))) (eval-after-load "subr" (quote (when (boundp (quote esc-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote esc-map)) (ergoemacs-map-properties--label esc-map -2305843009213693949)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-replace-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-replace-menu)) (ergoemacs-map-properties--label menu-bar-replace-menu -2305843009213693950)))) (eval-after-load "ergoemacs-mode" (quote (when (boundp (quote ergoemacs-map-properties--before-ergoemacs)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ergoemacs-map-properties--before-ergoemacs)) (ergoemacs-map-properties--label ergoemacs-map-properties--before-ergoemacs -2305843009213693750))))))] ergoemacs-map-properties--get-or-generate-map-key [object pcache-entry "pcache-entry" 1441053127.081809 7776000 -2305843009213693424] ergoemacs-map-properties--before-ergoemacs [object pcache-entry "pcache-entry" 1441053127.081919 7776000 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693750))) (24 keymap (110 keymap (115 . org-narrow-to-subtree) (98 . org-narrow-to-block) (101 . org-narrow-to-element)) (35 . server-edit)))] ergoemacs--last-start-emacs-state-2 [object pcache-entry "pcache-entry" 1441048681.9022434 7776000 "cd0a291e90728867a150874130209864"]))
  :timestamp 1441053127.2119277
  )
